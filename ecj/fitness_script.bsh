#!/bin/bash

original_num_developers=100
original_num_testers=5
original_num_defects=100

cost_of_developer_increase=1.0
cost_of_tester_increase=0.5
cost_of_defect_increase=0.25

cost_of_developer_decrease=0.5
cost_of_tester_decrease=0.25
cost_of_defect_decrease=0.12

# $1 == number of developers
# $2 == number of testers
# $3 == number of defects

equilibrium_results=$(mktemp /tmp/XXXX)
# ./pythonscript $1 $2 $2 $equilibrium_results

#Remove the following
cp ALL_vanilla_equilibrium_results.csv $equilibrium_results

extracted_columns=$(mktemp /tmp/XXXX)

./column_extractor.bsh $equilibrium_results required_columns.dat >$extracted_columns

current_worst=$(mktemp /tmp/XXXX)
echo "100.0" >$current_worst

cat $extracted_columns | while read line; do
  symetric_value=$(echo $line | cut -d , -f 1)
  value=$(echo $line | cut -d , -f 2)
  if [ "$symetric_value" != "True" ]; then
    cp $equilibrium_results ERROR_MATRIX.csv
    >&2 echo "ERROR: Symetric is not 'True'. Aborted. Offending file stored as 'ERROR_MATRIX.csv'"
    exit 1
  fi
  if (( $(echo "$(cat $current_worst) > $value" | bc -l) )); then
    echo $value >$current_worst
  fi
done

if [ "$(cat $current_worst)" == "100.0" ];then
  >&2 echo "ERROR: Did not find any data"
  exit 1
fi

fitness=$(echo "$(cat $current_worst) * 1000" | bc -l)

if [ $1 -le $original_num_developers ]; then
	fitness=$(echo "$fitness - (($original_num_developers - $1)*$cost_of_developer_decrease)" | bc -l)
else
	fitness=$(echo "$fitness - (($1 - $original_num_developers)*$cost_of_developer_increase)" | bc -l)
fi

if [ $2 -le $original_num_testers ]; then
        fitness=$(echo "$fitness - (($original_num_testers - $2)*$cost_of_tester_decrease)" | bc -l)
else
	fitness=$(echo "$fitness - (($1 - $original_num_testers)*$cost_of_tester_increase)" | bc -l)
fi

if [ $3 -le $original_num_defects ]; then
        fitness=$(echo "$fitness - (($original_num_defects - $2)*$cost_of_defect_decrease)" | bc -l)
else
	fitness=$(echo "$fitness - (($1 - $original_num_defects)*$cost_of_defect_increase)" | bc -l)
fi

echo $fitness
