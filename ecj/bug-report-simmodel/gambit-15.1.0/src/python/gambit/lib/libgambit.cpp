/* Generated by Cython 0.24 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_24"
#include <stddef.h>
#ifndef offsetof
  #define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
  #define CYTHON_COMPILING_IN_PYPY 1
  #define CYTHON_COMPILING_IN_CPYTHON 0
#else
  #define CYTHON_COMPILING_IN_PYPY 0
  #define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
  #define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
  #undef SHIFT
  #undef BASE
  #undef MASK
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
  #define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != (likely(PyUnicode_IS_READY(u)) ? PyUnicode_GET_LENGTH(u) : PyUnicode_GET_SIZE(u)))
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
  #define __Pyx_PyUnicode_IS_TRUE(u)      (0 != PyUnicode_GET_SIZE(u))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Format)
  #define PyObject_Format(obj, fmt)  PyObject_CallMethod(obj, "__format__", "O", fmt)
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyObject_Malloc)
  #define PyObject_Malloc(s)   PyMem_Malloc(s)
  #define PyObject_Free(p)     PyMem_Free(p)
  #define PyObject_Realloc(p)  PyMem_Realloc(p)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION < 3 && !defined(PyObject_ASCII)
  #define PyObject_ASCII(o)            PyObject_Repr(o)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#define __PYX_ERR(f_index, lineno, Ln_error) \
{ \
  __pyx_filename = __pyx_f[f_index]; __pyx_lineno = lineno; __pyx_clineno = __LINE__; goto Ln_error; \
}

#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__gambit__lib__libgambit
#define __PYX_HAVE_API__gambit__lib__libgambit
#include "libgambit/libgambit.h"
#include "string"
#include "libgambit/rational.h"
#include "libgambit/number.h"
#include "libgambit/array.h"
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include "libgambit/list.h"
#include "libgambit/game.h"
#include "libgambit/mixed.h"
#include "libgambit/behav.h"
#include "libgambit/stratspt.h"
#include "util.h"
#include "tools/enumpure/enumpure.h"
#include "tools/lcp/nfglcp.h"
#include "tools/lcp/efglcp.h"
#include "tools/lp/nfglp.h"
#include "tools/lp/efglp.h"
#include "tools/logit/nfglogit.h"
#include "nash.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; const char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyNumber_Int(x) (PyLong_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Long(x))
#else
#define __Pyx_PyNumber_Int(x) (PyInt_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Int(x))
#endif
#define __Pyx_PyNumber_Float(x) (PyFloat_CheckExact(x) ? __Pyx_NewRef(x) : PyNumber_Float(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static PyObject *__pyx_empty_unicode;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "gambit/lib/libgambit.pyx",
  "gambit/lib/stratspt.pxi",
  "gambit/lib/mixed.pxi",
  "gambit/lib/behav.pxi",
  "gambit/lib/game.pxi",
  "gambit/lib/action.pxi",
  "gambit/lib/infoset.pxi",
  "gambit/lib/strategy.pxi",
  "gambit/lib/player.pxi",
  "gambit/lib/outcome.pxi",
  "gambit/lib/node.pxi",
  "gambit/lib/nash.pxi",
  "gambit/lib/basegame.pxi",
};

/*--- Type declarations ---*/
struct __pyx_obj_6gambit_3lib_9libgambit_Collection;
struct __pyx_obj_6gambit_3lib_9libgambit_Action;
struct __pyx_obj_6gambit_3lib_9libgambit_Members;
struct __pyx_obj_6gambit_3lib_9libgambit_Actions;
struct __pyx_obj_6gambit_3lib_9libgambit_Infoset;
struct __pyx_obj_6gambit_3lib_9libgambit_Strategy;
struct __pyx_obj_6gambit_3lib_9libgambit_Infosets;
struct __pyx_obj_6gambit_3lib_9libgambit_Strategies;
struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies;
struct __pyx_obj_6gambit_3lib_9libgambit_Player;
struct __pyx_obj_6gambit_3lib_9libgambit_Outcome;
struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome;
struct __pyx_obj_6gambit_3lib_9libgambit_Children;
struct __pyx_obj_6gambit_3lib_9libgambit_Node;
struct __pyx_obj_6gambit_3lib_9libgambit_BaseGame;
struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile;
struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes;
struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies;
struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction;
struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile;
struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble;
struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational;
struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile;
struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble;
struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational;
struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes;
struct __pyx_obj_6gambit_3lib_9libgambit_Players;
struct __pyx_obj_6gambit_3lib_9libgambit_GameActions;
struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets;
struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies;
struct __pyx_obj_6gambit_3lib_9libgambit_Game;
struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver;
struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver;
struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble;
struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational;
struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble;
struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational;
struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble;
struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational;
struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble;
struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational;
struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr;
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr;

/* "gambit/lib/libgambit.pyx":391
 * 
 * 
 * cdef class Collection(object):             # <<<<<<<<<<<<<<
 *     "Represents a collection of related objects in a game."
 *     def __repr__(self):   return str(list(self))
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Collection {
  PyObject_HEAD
};


/* "gambit/lib/action.pxi":24
 * from gambit.lib.error import UndefinedOperationError
 * 
 * cdef class Action:             # <<<<<<<<<<<<<<
 *     cdef c_GameAction action
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Action {
  PyObject_HEAD
  GameObjectPtr<GameActionRep> action;
};


/* "gambit/lib/infoset.pxi":24
 * from gambit.lib.error import MismatchError
 * 
 * cdef class Members(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of members of an infoset."
 *     cdef c_GameInfoset infoset
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Members {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameInfosetRep> infoset;
};


/* "gambit/lib/infoset.pxi":35
 *         return n
 * 
 * cdef class Actions(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of actions at an infoset."
 *     cdef c_GameInfoset infoset
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Actions {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameInfosetRep> infoset;
};


/* "gambit/lib/infoset.pxi":57
 *         return a
 * 
 * cdef class Infoset:             # <<<<<<<<<<<<<<
 *     cdef c_GameInfoset infoset
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Infoset {
  PyObject_HEAD
  GameObjectPtr<GameInfosetRep> infoset;
};


/* "gambit/lib/strategy.pxi":24
 * from gambit.lib.error import UndefinedOperationError
 * 
 * cdef class Strategy:             # <<<<<<<<<<<<<<
 *     cdef c_GameStrategy strategy
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Strategy {
  PyObject_HEAD
  GameObjectPtr<GameStrategyRep> strategy;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "gambit/lib/player.pxi":24
 * from gambit.lib.error import UndefinedOperationError
 * 
 * cdef class Infosets(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of infosets for a player."
 *     cdef c_GamePlayer player
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Infosets {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GamePlayerRep> player;
};


/* "gambit/lib/player.pxi":35
 *         return s
 * 
 * cdef class Strategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies for a player."
 *     cdef c_GamePlayer player
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Strategies {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GamePlayerRep> player;
};


/* "gambit/lib/player.pxi":59
 *         return s
 * 
 * cdef class PlayerSupportStrategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies for a player in a restriction"
 *     cdef Player player
 */
struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *player;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "gambit/lib/player.pxi":83
 *         return s
 * 
 * cdef class Player:             # <<<<<<<<<<<<<<
 *     cdef c_GamePlayer player
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Player {
  PyObject_HEAD
  GameObjectPtr<GamePlayerRep> player;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "gambit/lib/outcome.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * cdef class Outcome:             # <<<<<<<<<<<<<<
 *     cdef c_GameOutcome outcome
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Outcome {
  PyObject_HEAD
  GameObjectPtr<GameOutcomeRep> outcome;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "gambit/lib/outcome.pxi":108
 *         return o
 * 
 * cdef class TreeGameOutcome:             # <<<<<<<<<<<<<<
 *     "Represents an outcome in a strategic game derived from an extensive game."
 *     cdef c_PureStrategyProfile *psp
 */
struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome {
  PyObject_HEAD
  PureStrategyProfile *psp;
  GameObjectPtr<GameRep> c_game;
};


/* "gambit/lib/node.pxi":24
 * from gambit.lib.error import MismatchError, UndefinedOperationError
 * 
 * cdef class Children(Collection):             # <<<<<<<<<<<<<<
 *     "Represents the collection of direct children of a node."
 *     cdef c_GameNode parent
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Children {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameNodeRep> parent;
};


/* "gambit/lib/node.pxi":35
 *         return n
 * 
 * cdef class Node:             # <<<<<<<<<<<<<<
 *     cdef c_GameNode node
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Node {
  PyObject_HEAD
  GameObjectPtr<GameNodeRep> node;
};


/* "gambit/lib/basegame.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * cdef class BaseGame:             # <<<<<<<<<<<<<<
 * 	pass
 */
struct __pyx_obj_6gambit_3lib_9libgambit_BaseGame {
  PyObject_HEAD
};


/* "gambit/lib/stratspt.pxi":26
 * from gambit.lib.error import UndefinedOperationError
 * 
 * cdef class StrategySupportProfile(Collection):             # <<<<<<<<<<<<<<
 *     """
 *     A set-like object representing a subset of the strategies in game, incorporating
 */
struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  StrategySupportProfile *support;
};


/* "gambit/lib/stratspt.pxi":151
 *             return g
 * 
 * cdef class RestrictionOutcomes(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of outcomes in a restriction."
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "gambit/lib/stratspt.pxi":169
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")
 * 
 * cdef class RestrictionStrategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies in a restriction."
 *     cdef StrategicRestriction restriction
 */
struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "gambit/lib/stratspt.pxi":191
 *         raise IndexError("Index out of range")
 * 
 * cdef class StrategicRestriction(BaseGame):             # <<<<<<<<<<<<<<
 *     """
 *     A StrategicRestriction is a read-only view on a game, defined by a
 */
struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction {
  struct __pyx_obj_6gambit_3lib_9libgambit_BaseGame __pyx_base;
  StrategySupportProfile *support;
};


/* "gambit/lib/mixed.pxi":28
 * 
 * 
 * cdef class MixedStrategyProfile(object):             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 */
struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile {
  PyObject_HEAD
};


/* "gambit/lib/mixed.pxi":177
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)
 * 
 * cdef class MixedStrategyProfileDouble(MixedStrategyProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedStrategyProfileDouble *profile
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile __pyx_base;
  MixedStrategyProfile<double>  *profile;
};


/* "gambit/lib/mixed.pxi":238
 * 
 * 
 * cdef class MixedStrategyProfileRational(MixedStrategyProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedStrategyProfileRational *profile
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile __pyx_base;
  MixedStrategyProfile<Rational>  *profile;
};


/* "gambit/lib/behav.pxi":25
 * from cython.operator cimport dereference as deref
 * 
 * cdef class MixedBehaviorProfile(object):             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 */
struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile {
  PyObject_HEAD
};


/* "gambit/lib/behav.pxi":236
 *         return self._regret(action)
 * 
 * cdef class MixedBehaviorProfileDouble(MixedBehaviorProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedBehaviorProfileDouble *profile
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile __pyx_base;
  MixedBehaviorProfile<double>  *profile;
};


/* "gambit/lib/behav.pxi":293
 * 
 * 
 * cdef class MixedBehaviorProfileRational(MixedBehaviorProfile):             # <<<<<<<<<<<<<<
 *     cdef c_MixedBehaviorProfileRational *profile
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile __pyx_base;
  MixedBehaviorProfile<Rational>  *profile;
};


/* "gambit/lib/game.pxi":28
 * import gambit.gte
 * 
 * cdef class Outcomes(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of outcomes in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "gambit/lib/game.pxi":46
 *         return c
 * 
 * cdef class Players(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of players in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Players {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *restriction;
};


/* "gambit/lib/game.pxi":77
 *             return p
 * 
 * cdef class GameActions(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of actions in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_6gambit_3lib_9libgambit_GameActions {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "gambit/lib/game.pxi":90
 *         return a
 * 
 * cdef class GameInfosets(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of infosets in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "gambit/lib/game.pxi":109
 *         return i
 * 
 * cdef class GameStrategies(Collection):             # <<<<<<<<<<<<<<
 *     "Represents a collection of strategies in a game."
 *     cdef c_Game game
 */
struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies {
  struct __pyx_obj_6gambit_3lib_9libgambit_Collection __pyx_base;
  GameObjectPtr<GameRep> game;
};


/* "gambit/lib/game.pxi":122
 *         return s
 * 
 * cdef class Game(object):             # <<<<<<<<<<<<<<
 *     cdef c_Game game
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_Game {
  PyObject_HEAD
  GameObjectPtr<GameRep> game;
};


/* "gambit/lib/nash.pxi":32
 *         c_List[c_MixedBehaviorProfileRational] Solve(c_Game) except +RuntimeError
 * 
 * cdef class EnumPureStrategySolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashEnumPureStrategySolver *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver {
  PyObject_HEAD
  NashEnumPureStrategySolver *alg;
};


/* "gambit/lib/nash.pxi":50
 *         return ret
 * 
 * cdef class EnumPureAgentSolver(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashEnumPureAgentSolver *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver {
  PyObject_HEAD
  NashEnumPureAgentSolver *alg;
};


/* "gambit/lib/nash.pxi":88
 * 
 * 
 * cdef class LCPBehaviorSolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpBehaviorSolverDouble *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble {
  PyObject_HEAD
  NashLcpBehaviorSolver<double> *alg;
};


/* "gambit/lib/nash.pxi":106
 *         return ret
 * 
 * cdef class LCPBehaviorSolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpBehaviorSolverRational *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational {
  PyObject_HEAD
  NashLcpBehaviorSolver<Rational> *alg;
};


/* "gambit/lib/nash.pxi":124
 *         return ret
 * 
 * cdef class LCPStrategySolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpStrategySolverDouble *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble {
  PyObject_HEAD
  NashLcpStrategySolver<double> *alg;
};


/* "gambit/lib/nash.pxi":142
 *         return ret
 * 
 * cdef class LCPStrategySolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLcpStrategySolverRational *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational {
  PyObject_HEAD
  NashLcpStrategySolver<Rational> *alg;
};


/* "gambit/lib/nash.pxi":180
 * 
 * 
 * cdef class LPBehaviorSolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpBehavSolverDouble *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble {
  PyObject_HEAD
  NashLpBehavSolver<double> *alg;
};


/* "gambit/lib/nash.pxi":198
 *         return ret
 * 
 * cdef class LPBehaviorSolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpBehavSolverRational *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational {
  PyObject_HEAD
  NashLpBehavSolver<Rational> *alg;
};


/* "gambit/lib/nash.pxi":216
 *         return ret
 * 
 * cdef class LPStrategySolverDouble(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpStrategySolverDouble *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble {
  PyObject_HEAD
  NashLpStrategySolver<double> *alg;
};


/* "gambit/lib/nash.pxi":234
 *         return ret
 * 
 * cdef class LPStrategySolverRational(object):             # <<<<<<<<<<<<<<
 *     cdef c_NashLpStrategySolverRational *alg
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational {
  PyObject_HEAD
  NashLpStrategySolver<Rational> *alg;
};


/* "gambit/lib/nash.pxi":277
 *     c_List[c_LogitQREMixedStrategyProfile] _logit_principal_branch "logit_principal_branch"(c_Game, double)
 * 
 * cdef class LogitQREMixedStrategyProfile(object):             # <<<<<<<<<<<<<<
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):
 */
struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile {
  PyObject_HEAD
  LogitQREMixedStrategyProfile *thisptr;
};


/* "gambit/lib/stratspt.pxi":94
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove {
  PyObject_HEAD
  PyObject *__pyx_v_strategy;
};


/* "gambit/lib/stratspt.pxi":105
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other;
};


/* "gambit/lib/stratspt.pxi":108
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other;
};


/* "gambit/lib/stratspt.pxi":117
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other;
};


/* "gambit/lib/mixed.pxi":49
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index {
  PyObject_HEAD
  PyObject *__pyx_v_index;
};


/* "gambit/lib/mixed.pxi":89
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "gambit/lib/mixed.pxi":91
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "gambit/lib/behav.pxi":45
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index {
  PyObject_HEAD
  PyObject *__pyx_v_index;
};


/* "gambit/lib/behav.pxi":112
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "gambit/lib/behav.pxi":114
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "gambit/lib/behav.pxi":133
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ {
  PyObject_HEAD
  PyObject *__pyx_v_self;
};


/* "gambit/lib/behav.pxi":135
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *__pyx_outer_scope;
  PyObject *__pyx_v_i;
  PyObject *__pyx_t_0;
  Py_ssize_t __pyx_t_1;
  PyObject *(*__pyx_t_2)(PyObject *);
};


/* "gambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays {
  PyObject_HEAD
  PyObject *__pyx_v_arrays;
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g;
};


/* "gambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_outer_scope;
  PyObject *__pyx_v_a;
};


/* "gambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in xrange(len(g.players)))):
 *             for pl in xrange(len(g.players)):
 */
struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr {
  PyObject_HEAD
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_outer_scope;
  Py_ssize_t __pyx_v_i;
  Py_ssize_t __pyx_t_0;
  Py_ssize_t __pyx_t_1;
};


/* --- Runtime support code (head) --- */
/* Refnanny.proto */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

/* PyObjectGetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

/* GetBuiltinName.proto */
static PyObject *__Pyx_GetBuiltinName(PyObject *name);

/* PyObjectCall.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

/* ListCompAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

/* PyObjectCallMethO.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

/* PyObjectCallOneArg.proto */
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

/* PyThreadStateGet.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyThreadState_declare  PyThreadState *__pyx_tstate;
#define __Pyx_PyThreadState_assign  __pyx_tstate = PyThreadState_GET();
#else
#define __Pyx_PyThreadState_declare
#define __Pyx_PyThreadState_assign
#endif

/* SaveResetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSave(type, value, tb)  __Pyx__ExceptionSave(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#define __Pyx_ExceptionReset(type, value, tb)  __Pyx__ExceptionReset(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
#else
#define __Pyx_ExceptionSave(type, value, tb)   PyErr_GetExcInfo(type, value, tb)
#define __Pyx_ExceptionReset(type, value, tb)  PyErr_SetExcInfo(type, value, tb)
#endif

/* PyErrExceptionMatches.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyErr_ExceptionMatches(err) __Pyx_PyErr_ExceptionMatchesInState(__pyx_tstate, err)
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err);
#else
#define __Pyx_PyErr_ExceptionMatches(err)  PyErr_ExceptionMatches(err)
#endif

/* GetException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_GetException(type, value, tb)  __Pyx__GetException(__pyx_tstate, type, value, tb)
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyErrFetchRestore.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ErrRestoreWithState(type, value, tb)  __Pyx_ErrRestoreInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)    __Pyx_ErrFetchInState(PyThreadState_GET(), type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  __Pyx_ErrRestoreInState(__pyx_tstate, type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)    __Pyx_ErrFetchInState(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
#define __Pyx_ErrRestoreWithState(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetchWithState(type, value, tb)  PyErr_Fetch(type, value, tb)
#define __Pyx_ErrRestore(type, value, tb)  PyErr_Restore(type, value, tb)
#define __Pyx_ErrFetch(type, value, tb)  PyErr_Fetch(type, value, tb)
#endif

/* RaiseException.proto */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

/* ArgTypeTest.proto */
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_EqObjC(op1, op2, intval, inplace)\
    PyObject_RichCompare(op1, op2, Py_EQ)
    #endif

/* GetModuleGlobalName.proto */
static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

/* PySequenceContains.proto */
static CYTHON_INLINE int __Pyx_PySequence_ContainsTF(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

/* RaiseDoubleKeywords.proto */
static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

/* ParseKeywords.proto */
static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

/* RaiseArgTupleInvalid.proto */
static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

/* PyObjectSetAttrStr.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

/* StringJoin.proto */
#if PY_MAJOR_VERSION < 3
#define __Pyx_PyString_Join __Pyx_PyBytes_Join
#define __Pyx_PyBaseString_Join(s, v) (PyUnicode_CheckExact(s) ? PyUnicode_Join(s, v) : __Pyx_PyBytes_Join(s, v))
#else
#define __Pyx_PyString_Join PyUnicode_Join
#define __Pyx_PyBaseString_Join PyUnicode_Join
#endif
#if CYTHON_COMPILING_IN_CPYTHON
    #if PY_MAJOR_VERSION < 3
    #define __Pyx_PyBytes_Join _PyString_Join
    #else
    #define __Pyx_PyBytes_Join _PyBytes_Join
    #endif
#else
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values);
#endif

/* PyObjectCallNoArg.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func);
#else
#define __Pyx_PyObject_CallNoArg(func) __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL)
#endif

/* ExtTypeTest.proto */
static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type);

/* None.proto */
static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname);

/* FetchCommonType.proto */
static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

/* CythonFunction.proto */
#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f)\
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f)\
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f)\
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g)\
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
#if PY_VERSION_HEX < 0x030500A0
    PyObject *func_weakreflist;
#endif
    PyObject *func_dict;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj;
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;
    PyObject *defaults_kwdict;
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations;
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code)\
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __pyx_CyFunction_init(void);

/* SliceTupleAndList.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(PyObject* src, Py_ssize_t start, Py_ssize_t stop);
#else
#define __Pyx_PyList_GetSlice(seq, start, stop)   PySequence_GetSlice(seq, start, stop)
#define __Pyx_PyTuple_GetSlice(seq, start, stop)  PySequence_GetSlice(seq, start, stop)
#endif

/* ListAppend.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

/* KeywordStringCheck.proto */
static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

/* IncludeStringH.proto */
#include <string.h>

/* BytesEquals.proto */
static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

/* UnicodeEquals.proto */
static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

/* StrEquals.proto */
#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

/* GetItemInt.proto */
#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) :\
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) :\
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

/* CalculateMetaclass.proto */
static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

/* Py3ClassCreate.proto */
static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc);
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass);

/* RaiseTooManyValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

/* RaiseNeedMoreValuesToUnpack.proto */
static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

/* IterFinish.proto */
static CYTHON_INLINE int __Pyx_IterFinish(void);

/* UnpackItemEndCheck.proto */
static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected);

/* PyIntBinop.proto */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_SubtractObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceSubtract(op1, op2) : PyNumber_Subtract(op1, op2))
#endif

/* SetItemInt.proto */
#define __Pyx_SetItemInt(o, i, v, type, is_signed, to_py_func, is_list, wraparound, boundscheck)\
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ?\
    __Pyx_SetItemInt_Fast(o, (Py_ssize_t)i, v, is_list, wraparound, boundscheck) :\
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list assignment index out of range"), -1) :\
               __Pyx_SetItemInt_Generic(o, to_py_func(i), v)))
static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v);
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v,
                                               int is_list, int wraparound, int boundscheck);

/* CallNextTpTraverse.proto */
static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse);

/* CallNextTpClear.proto */
static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_dealloc);

/* Import.proto */
static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

/* ImportFrom.proto */
static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

/* GetNameInClass.proto */
static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name);

/* CodeObjectCache.proto */
typedef struct {
    PyCodeObject* code_object;
    int code_line;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

/* AddTraceback.proto */
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

/* None.proto */
#include <new>

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

/* CIntToPy.proto */
static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

/* CppExceptionConversion.proto */
#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

/* ClassMethod.proto */
#include "descrobject.h"
static PyObject* __Pyx_Method_ClassMethod(PyObject *method);

/* CIntFromPy.proto */
static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

/* CIntFromPy.proto */
static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

/* SwapException.proto */
#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_ExceptionSwap(type, value, tb)  __Pyx__ExceptionSwap(__pyx_tstate, type, value, tb)
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb);
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb);
#endif

/* PyObjectCallMethod1.proto */
static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg);

/* CoroutineBase.proto */
typedef PyObject *(*__pyx_coroutine_body_t)(PyObject *, PyObject *);
typedef struct {
    PyObject_HEAD
    __pyx_coroutine_body_t body;
    PyObject *closure;
    PyObject *exc_type;
    PyObject *exc_value;
    PyObject *exc_traceback;
    PyObject *gi_weakreflist;
    PyObject *classobj;
    PyObject *yieldfrom;
    PyObject *gi_name;
    PyObject *gi_qualname;
    int resume_label;
    char is_running;
} __pyx_CoroutineObject;
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject *type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname);
static int __Pyx_Coroutine_clear(PyObject *self);
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue);
#else
#define __Pyx_PyGen_FetchStopIterationValue(pvalue) PyGen_FetchStopIterationValue(pvalue)
#endif

/* PatchModuleWithCoroutine.proto */
static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code);

/* PatchGeneratorABC.proto */
static int __Pyx_patch_abc(void);

/* Generator.proto */
#define __Pyx_Generator_USED
static PyTypeObject *__pyx_GeneratorType = 0;
#define __Pyx_Generator_CheckExact(obj) (Py_TYPE(obj) == __pyx_GeneratorType)
#define __Pyx_Generator_New(body, closure, name, qualname)\
    __Pyx__Coroutine_New(__pyx_GeneratorType, body, closure, name, qualname)
static PyObject *__Pyx_Generator_Next(PyObject *self);
static int __pyx_Generator_init(void);

/* CheckBinaryVersion.proto */
static int __Pyx_check_binary_version(void);

/* InitStrings.proto */
static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);


/* Module declarations from 'libcpp' */

/* Module declarations from 'gambit.lib.libgambit' */
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Collection = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Action = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Members = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Actions = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Infoset = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Strategy = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Infosets = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Strategies = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_PlayerSupportStrategies = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Player = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Outcome = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_TreeGameOutcome = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Children = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Node = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_BaseGame = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_RestrictionOutcomes = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_RestrictionStrategies = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfile = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfile = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Outcomes = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Players = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_GameActions = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_GameInfosets = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_GameStrategies = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_Game = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_EnumPureStrategySolver = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_EnumPureAgentSolver = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LCPBehaviorSolverRational = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LCPStrategySolverDouble = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LCPStrategySolverRational = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LPBehaviorSolverDouble = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LPBehaviorSolverRational = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LPStrategySolverDouble = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LPStrategySolverRational = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct__remove = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = 0;
static PyTypeObject *__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = 0;
#define __Pyx_MODULE_NAME "gambit.lib.libgambit"
int __pyx_module_is_main_gambit__lib__libgambit = 0;

/* Implementation of 'gambit.lib.libgambit' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_filter;
static PyObject *__pyx_builtin_reduce;
static PyObject *__pyx_builtin_enumerate;
static PyObject *__pyx_builtin_KeyError;
static PyObject *__pyx_builtin_object;
static PyObject *__pyx_builtin_zip;
static PyObject *__pyx_builtin_xrange;
static const char __pyx_k_i[] = "i";
static const char __pyx_k_p[] = "p";
static const char __pyx_k_s[] = "$%s$";
static const char __pyx_k_x[] = "x";
static const char __pyx_k_y[] = "y";
static const char __pyx_k__3[] = ".";
static const char __pyx_k__8[] = "";
static const char __pyx_k_eq[] = "__eq__";
static const char __pyx_k_pl[] = "pl";
static const char __pyx_k_s1[] = "s1";
static const char __pyx_k_s2[] = "s2";
static const char __pyx_k_st[] = "st";
static const char __pyx_k__18[] = ",";
static const char __pyx_k__42[] = "$";
static const char __pyx_k_acc[] = "acc";
static const char __pyx_k_doc[] = "__doc__";
static const char __pyx_k_gte[] = "gte";
static const char __pyx_k_lam[] = "lam";
static const char __pyx_k_len[] = "__len__";
static const char __pyx_k_nfg[] = "nfg";
static const char __pyx_k_ret[] = "ret";
static const char __pyx_k_s_2[] = "(%s)";
static const char __pyx_k_zip[] = "zip";
static const char __pyx_k_args[] = "args";
static const char __pyx_k_game[] = "game";
static const char __pyx_k_init[] = "__init__";
static const char __pyx_k_join[] = "join";
static const char __pyx_k_left[] = "$\\left[";
static const char __pyx_k_main[] = "__main__";
static const char __pyx_k_name[] = "__name__";
static const char __pyx_k_repr[] = "__repr__";
static const char __pyx_k_self[] = "self";
static const char __pyx_k_send[] = "send";
static const char __pyx_k_test[] = "__test__";
static const char __pyx_k_warn[] = "warn";
static const char __pyx_k_class[] = "__class__";
static const char __pyx_k_close[] = "close";
static const char __pyx_k_count[] = "count";
static const char __pyx_k_index[] = "index";
static const char __pyx_k_label[] = "label";
static const char __pyx_k_other[] = "other";
static const char __pyx_k_range[] = "range";
static const char __pyx_k_right[] = "\\right]$";
static const char __pyx_k_shape[] = "shape";
static const char __pyx_k_solns[] = "solns";
static const char __pyx_k_throw[] = "throw";
static const char __pyx_k_title[] = "title";
static const char __pyx_k_union[] = "union";
static const char __pyx_k_value[] = "value";
static const char __pyx_k_write[] = "write";
static const char __pyx_k_Filler[] = "Filler";
static const char __pyx_k_Game_s[] = "<Game '%s'>";
static const char __pyx_k_action[] = "action";
static const char __pyx_k_belief[] = "_belief";
static const char __pyx_k_filter[] = "filter";
static const char __pyx_k_format[] = "format";
static const char __pyx_k_gambit[] = "gambit";
static const char __pyx_k_import[] = "__import__";
static const char __pyx_k_module[] = "__module__";
static const char __pyx_k_native[] = "native";
static const char __pyx_k_number[] = "number";
static const char __pyx_k_object[] = "object";
static const char __pyx_k_p_game[] = "p_game";
static const char __pyx_k_payoff[] = "_payoff";
static const char __pyx_k_player[] = "player";
static const char __pyx_k_reduce[] = "reduce";
static const char __pyx_k_regret[] = "_regret";
static const char __pyx_k_remove[] = "remove";
static const char __pyx_k_strict[] = "strict";
static const char __pyx_k_unique[] = "unique";
static const char __pyx_k_xrange[] = "xrange";
static const char __pyx_k_Decimal[] = "Decimal";
static const char __pyx_k_IOError[] = "IOError";
static const char __pyx_k_actions[] = "actions";
static const char __pyx_k_decimal[] = "decimal";
static const char __pyx_k_genexpr[] = "genexpr";
static const char __pyx_k_getitem[] = "__getitem__";
static const char __pyx_k_getprob[] = "_getprob";
static const char __pyx_k_infoset[] = "infoset";
static const char __pyx_k_is_tree[] = "is_tree";
static const char __pyx_k_members[] = "members";
static const char __pyx_k_players[] = "players";
static const char __pyx_k_prepare[] = "__prepare__";
static const char __pyx_k_product[] = "product";
static const char __pyx_k_profile[] = "profile";
static const char __pyx_k_replace[] = "replace";
static const char __pyx_k_setitem[] = "__setitem__";
static const char __pyx_k_setprob[] = "_setprob";
static const char __pyx_k_version[] = "__version__";
static const char __pyx_k_Fraction[] = "Fraction";
static const char __pyx_k_KeyError[] = "KeyError";
static const char __pyx_k_Rational[] = "Rational";
static const char __pyx_k_children[] = "children";
static const char __pyx_k_external[] = "external";
static const char __pyx_k_frac_s_s[] = "$\\frac{%s}{%s}$";
static const char __pyx_k_gameiter[] = "gameiter";
static const char __pyx_k_infosets[] = "infosets";
static const char __pyx_k_is_valid[] = "is_valid";
static const char __pyx_k_issubset[] = "issubset";
static const char __pyx_k_new_tree[] = "new_tree";
static const char __pyx_k_outcomes[] = "outcomes";
static const char __pyx_k_p_lambda[] = "p_lambda";
static const char __pyx_k_payoff_2[] = "payoff";
static const char __pyx_k_qualname[] = "__qualname__";
static const char __pyx_k_rational[] = "rational";
static const char __pyx_k_restrict[] = "restrict";
static const char __pyx_k_strategy[] = "strategy";
static const char __pyx_k_warnings[] = "warnings";
static const char __pyx_k_TypeError[] = "TypeError";
static const char __pyx_k_enumerate[] = "enumerate";
static const char __pyx_k_fillvalue[] = "fillvalue";
static const char __pyx_k_fractions[] = "fractions";
static const char __pyx_k_getaction[] = "_getaction";
static const char __pyx_k_is_chance[] = "is_chance";
static const char __pyx_k_itertools[] = "itertools";
static const char __pyx_k_metaclass[] = "__metaclass__";
static const char __pyx_k_new_table[] = "new_table";
static const char __pyx_k_numerator[] = "numerator";
static const char __pyx_k_p_profile[] = "p_profile";
static const char __pyx_k_read_game[] = "read_game";
static const char __pyx_k_setaction[] = "_setaction";
static const char __pyx_k_setplayer[] = "_setplayer";
static const char __pyx_k_strategy1[] = "strategy1";
static const char __pyx_k_strategy2[] = "strategy2";
static const char __pyx_k_IndexError[] = "IndexError";
static const char __pyx_k_MixedBehav[] = "MixedBehav";
static const char __pyx_k_ValueError[] = "ValueError";
static const char __pyx_k_difference[] = "difference";
static const char __pyx_k_gambit_gte[] = "gambit.gte";
static const char __pyx_k_issuperset[] = "issuperset";
static const char __pyx_k_max_payoff[] = "max_payoff";
static const char __pyx_k_min_payoff[] = "min_payoff";
static const char __pyx_k_p_maxDepth[] = "p_maxDepth";
static const char __pyx_k_parse_game[] = "parse_game";
static const char __pyx_k_repr_latex[] = "_repr_latex_";
static const char __pyx_k_setinfoset[] = "_setinfoset";
static const char __pyx_k_strategies[] = "strategies";
static const char __pyx_k_unrestrict[] = "unrestrict";
static const char __pyx_k_write_game[] = "write_game";
static const char __pyx_k_action_prob[] = "_action_prob";
static const char __pyx_k_denominator[] = "denominator";
static const char __pyx_k_from_arrays[] = "from_arrays";
static const char __pyx_k_num_players[] = "num_players";
static const char __pyx_k_p_maxLambda[] = "p_maxLambda";
static const char __pyx_k_p_stopAfter[] = "p_stopAfter";
static const char __pyx_k_restriction[] = "restriction";
static const char __pyx_k_RuntimeError[] = "RuntimeError";
static const char __pyx_k_infoset_prob[] = "_infoset_prob";
static const char __pyx_k_intersection[] = "intersection";
static const char __pyx_k_is_const_sum[] = "is_const_sum";
static const char __pyx_k_izip_longest[] = "izip_longest";
static const char __pyx_k_Contingencies[] = "Contingencies";
static const char __pyx_k_MismatchError[] = "MismatchError";
static const char __pyx_k_MixedStrategy[] = "MixedStrategy";
static const char __pyx_k_action_payoff[] = "_action_payoff";
static const char __pyx_k_is_defined_at[] = "_is_defined_at";
static const char __pyx_k_resolve_index[] = "_resolve_index";
static const char __pyx_k_infoset_payoff[] = "_infoset_payoff";
static const char __pyx_k_logit_atlambda[] = "logit_atlambda";
static const char __pyx_k_logit_estimate[] = "logit_estimate";
static const char __pyx_k_setprob_player[] = "_setprob_player";
static const char __pyx_k_strategy_value[] = "_strategy_value";
static const char __pyx_k_gambit_gameiter[] = "gambit.gameiter";
static const char __pyx_k_get_contingency[] = "_get_contingency";
static const char __pyx_k_strategy_values[] = "strategy_values";
static const char __pyx_k_gambit_lib_error[] = "gambit.lib.error";
static const char __pyx_k_getprob_strategy[] = "_getprob_strategy";
static const char __pyx_k_setprob_strategy[] = "_setprob_strategy";
static const char __pyx_k_strategy_value_2[] = "strategy_value";
static const char __pyx_k_MixedBehavInfoset[] = "MixedBehavInfoset";
static const char __pyx_k_is_perfect_recall[] = "is_perfect_recall";
static const char __pyx_k_Index_out_of_range[] = "Index out of range";
static const char __pyx_k_Node_d_s_in_game_s[] = "<Node [%d] '%s' in game '%s'>";
static const char __pyx_k_NotImplementedError[] = "NotImplementedError";
static const char __pyx_k_Outcome_s_in_game_s[] = "<Outcome '%s' in game '%s'>";
static const char __pyx_k_no_matching_label_s[] = "no matching label '%s'";
static const char __pyx_k_Player_d_s_in_game_s[] = "<Player [%d] '%s' in game '%s'>";
static const char __pyx_k_Rational__repr_latex[] = "Rational._repr_latex_";
static const char __pyx_k_gambit_lib_libgambit[] = "gambit.lib.libgambit";
static const char __pyx_k_remove_locals_lambda[] = "remove.<locals>.<lambda>";
static const char __pyx_k_strategy_value_deriv[] = "_strategy_value_deriv";
static const char __pyx_k_Outcome_d_s_in_game_s[] = "<Outcome [%d] '%s' in game '%s'>";
static const char __pyx_k_num_strategies_player[] = "num_strategies_player";
static const char __pyx_k_issubset_locals_lambda[] = "issubset.<locals>.<lambda>";
static const char __pyx_k_logit_principal_branch[] = "logit_principal_branch";
static const char __pyx_k_mixed_strategy_profile[] = "mixed_strategy_profile";
static const char __pyx_k_must_support_iteration[] = "must support iteration";
static const char __pyx_k_no_object_with_label_s[] = "no object with label '%s'";
static const char __pyx_k_Player_CHANCE_in_game_s[] = "<Player [CHANCE] in game '%s'>";
static const char __pyx_k_Restriction_from_Game_s[] = "Restriction from Game '%s'";
static const char __pyx_k_UndefinedOperationError[] = "UndefinedOperationError";
static const char __pyx_k_difference_locals_lambda[] = "difference.<locals>.<lambda>";
static const char __pyx_k_invalid_set_of_strategies[] = "invalid set of strategies";
static const char __pyx_k_from_arrays_locals_genexpr[] = "from_arrays.<locals>.genexpr";
static const char __pyx_k_intersection_locals_lambda[] = "intersection.<locals>.<lambda>";
static const char __pyx_k_no_action_matching_label_s[] = "no action matching label '%s'";
static const char __pyx_k_getitem___locals_MixedBehav[] = "__getitem__.<locals>.MixedBehav";
static const char __pyx_k_no_infoset_matching_label_s[] = "no infoset matching label '%s'";
static const char __pyx_k_resolve_index_locals_lambda[] = "_resolve_index.<locals>.<lambda>";
static const char __pyx_k_no_strategy_matching_label_s[] = "no strategy matching label '%s'";
static const char __pyx_k_setprob_player_locals_Filler[] = "_setprob_player.<locals>.Filler";
static const char __pyx_k_getitem___locals_MixedBehav_2[] = "__getitem__.<locals>.MixedBehav.__init__";
static const char __pyx_k_getitem___locals_MixedBehav_3[] = "__getitem__.<locals>.MixedBehav.__eq__";
static const char __pyx_k_getitem___locals_MixedBehav_4[] = "__getitem__.<locals>.MixedBehav.__len__";
static const char __pyx_k_getitem___locals_MixedBehav_5[] = "__getitem__.<locals>.MixedBehav.__repr__";
static const char __pyx_k_getitem___locals_MixedBehav_6[] = "__getitem__.<locals>.MixedBehav.__getitem__";
static const char __pyx_k_getitem___locals_MixedBehav_7[] = "__getitem__.<locals>.MixedBehav.__setitem__";
static const char __pyx_k_append_move_requires_actions_1[] = "append_move requires actions >= 1";
static const char __pyx_k_getitem___locals_MixedBehavInf[] = "__getitem__.<locals>.MixedBehavInfoset._repr_latex_.<locals>.genexpr";
static const char __pyx_k_getitem___locals_MixedBehav__r[] = "__getitem__.<locals>.MixedBehav._repr_latex_.<locals>.genexpr";
static const char __pyx_k_getitem___locals_MixedStrategy[] = "__getitem__.<locals>.MixedStrategy._repr_latex_.<locals>.genexpr";
static const char __pyx_k_insert_move_requires_actions_1[] = "insert_move requires actions >= 1";
static const char __pyx_k_Action_d_s_at_infoset_s_for_pla[] = "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>";
static const char __pyx_k_Infoset_d_s_for_player_s_in_gam[] = "<Infoset [%d] '%s' for player '%s' in game '%s'>";
static const char __pyx_k_Mixed_behavior_profiles_are_not[] = "Mixed behavior profiles are not defined for strategic games";
static const char __pyx_k_Precedes_takes_a_Node_object_as[] = "Precedes takes a Node object as its input";
static const char __pyx_k_Reveal_takes_a_Player_object_as[] = "Reveal takes a Player object as its input";
static const char __pyx_k_Strategy_d_s_for_player_s_in_ga[] = "<Strategy [%d] '%s' for player '%s' in game '%s'>";
static const char __pyx_k_Unable_to_read_game_from_file_s[] = "Unable to read game from file '%s': %s";
static const char __pyx_k_Users_arbiter_git_gambit_src_py[] = "/Users/arbiter/git/gambit/src/python/gambit/lib/mixed.pxi";
static const char __pyx_k_append_move_can_only_be_applied[] = "append_move can only be applied at a terminal node";
static const char __pyx_k_multiple_actions_matching_label[] = "multiple actions matching label '%s'";
static const char __pyx_k_player_index_must_be_int_str_or[] = "player index must be int, str, or Player, not %s";
static const char __pyx_k_profile_indexes_must_be_int_str[] = "profile indexes must be int, str, Player, or Strategy, not %s";
static const char __pyx_k_value_list_length_must_be_s_not[] = "value list length must be %s, not %s";
static const char __pyx_k_Adding_strategies_is_only_applic[] = "Adding strategies is only applicable to games in strategic form";
static const char __pyx_k_All_specified_arrays_must_have_t[] = "All specified arrays must have the same shape";
static const char __pyx_k_Another_outcome_with_an_identica[] = "Another outcome with an identical label exists";
static const char __pyx_k_Another_player_with_an_identical[] = "Another player with an identical label exists";
static const char __pyx_k_Cannot_modify_outcomes_in_a_deri[] = "Cannot modify outcomes in a derived strategic game.";
static const char __pyx_k_Changing_objects_in_a_restrictio[] = "Changing objects in a restriction is not supported";
static const char __pyx_k_Changing_objects_in_a_support_is[] = "Changing objects in a support is not supported";
static const char __pyx_k_Game_must_have_a_tree_representa[] = "Game must have a tree representation to create a mixed behavior profile";
static const char __pyx_k_LogitQREMixedStrategyProfile_lam[] = "LogitQREMixedStrategyProfile(lam=%f,profile=%s)";
static const char __pyx_k_Mixed_strategies_not_supported_f[] = "Mixed strategies not supported for games with imperfect recall.";
static const char __pyx_k_Must_use_a_tuple_of_ints_strateg[] = "Must use a tuple of ints, strategy labels, or strategies";
static const char __pyx_k_Number_of_strategies_is_not_equa[] = "Number of strategies is not equal to the number of players";
static const char __pyx_k_Operation_only_defined_for_games[] = "Operation only defined for games with a tree representation";
static const char __pyx_k_Provided_strategy_index_d_out_of[] = "Provided strategy index %d out of range for player %d";
static const char __pyx_k_Provided_strategy_label_s_not_de[] = "Provided strategy label '%s' not defined";
static const char __pyx_k_Provided_strategy_s_not_availabl[] = "Provided strategy '%s' not available to player";
static const char __pyx_k_The_new_action_should_be_from_th[] = "The new action should be from the same infoset";
static const char __pyx_k_This_player_has_another_strategy[] = "This player has another strategy with an identical label";
static const char __pyx_k_append_move_accepts_either_a_Pla[] = "append_move accepts either a Player or Infoset to specify information";
static const char __pyx_k_append_move_with_a_Player_requir[] = "append_move with a Player requires actions to be specified";
static const char __pyx_k_append_move_with_an_Infoset_cann[] = "append_move with an Infoset cannot specify number of actions";
static const char __pyx_k_cannot_remove_last_strategy_of_a[] = "cannot remove last strategy of a player";
static const char __pyx_k_collection_indexes_must_be_int_o[] = "collection indexes must be int or str, not %s";
static const char __pyx_k_contingency_must_be_a_tuple_like[] = "contingency must be a tuple-like object";
static const char __pyx_k_copy_tree_can_only_be_applied_be[] = "copy_tree can only be applied between                                     objects of the same game";
static const char __pyx_k_copy_tree_takes_a_Node_object_as[] = "copy_tree takes a Node object as its input";
static const char __pyx_k_delete_requires_a_Strategy_objec[] = "delete requires a Strategy object";
static const char __pyx_k_getitem___locals_MixedBehavInf_2[] = "__getitem__.<locals>.MixedBehavInfoset";
static const char __pyx_k_getitem___locals_MixedBehavInf_3[] = "__getitem__.<locals>.MixedBehavInfoset.__init__";
static const char __pyx_k_getitem___locals_MixedBehavInf_4[] = "__getitem__.<locals>.MixedBehavInfoset.__eq__";
static const char __pyx_k_getitem___locals_MixedBehavInf_5[] = "__getitem__.<locals>.MixedBehavInfoset.__len__";
static const char __pyx_k_getitem___locals_MixedBehavInf_6[] = "__getitem__.<locals>.MixedBehavInfoset.__repr__";
static const char __pyx_k_getitem___locals_MixedBehavInf_7[] = "__getitem__.<locals>.MixedBehavInfoset._repr_latex_";
static const char __pyx_k_getitem___locals_MixedBehavInf_8[] = "__getitem__.<locals>.MixedBehavInfoset.__getitem__";
static const char __pyx_k_getitem___locals_MixedBehavInf_9[] = "__getitem__.<locals>.MixedBehavInfoset.__setitem__";
static const char __pyx_k_getitem___locals_MixedBehav__r_2[] = "__getitem__.<locals>.MixedBehav._repr_latex_";
static const char __pyx_k_getitem___locals_MixedStrategy_2[] = "__getitem__.<locals>.MixedStrategy";
static const char __pyx_k_getitem___locals_MixedStrategy_3[] = "__getitem__.<locals>.MixedStrategy.__init__";
static const char __pyx_k_getitem___locals_MixedStrategy_4[] = "__getitem__.<locals>.MixedStrategy.__eq__";
static const char __pyx_k_getitem___locals_MixedStrategy_5[] = "__getitem__.<locals>.MixedStrategy.__len__";
static const char __pyx_k_getitem___locals_MixedStrategy_6[] = "__getitem__.<locals>.MixedStrategy.__repr__";
static const char __pyx_k_getitem___locals_MixedStrategy_7[] = "__getitem__.<locals>.MixedStrategy._repr_latex_";
static const char __pyx_k_getitem___locals_MixedStrategy_8[] = "__getitem__.<locals>.MixedStrategy.__getitem__";
static const char __pyx_k_getitem___locals_MixedStrategy_9[] = "__getitem__.<locals>.MixedStrategy.__setitem__";
static const char __pyx_k_insert_action_takes_an_Action_ob[] = "insert_action takes an Action object as its input";
static const char __pyx_k_insert_move_accepts_either_a_Pla[] = "insert_move accepts either a Player or Infoset to specify information";
static const char __pyx_k_insert_move_with_a_Player_requir[] = "insert_move with a Player requires actions to be specified";
static const char __pyx_k_insert_move_with_an_Infoset_cann[] = "insert_move with an Infoset cannot specify number of actions";
static const char __pyx_k_is_successor_of_takes_a_Node_obj[] = "is_successor_of takes a Node object as its input";
static const char __pyx_k_it_is_not_possible_to_delete_the[] = "it is not possible to delete the                                             last action of an infoset";
static const char __pyx_k_move_tree_takes_a_Node_object_as[] = "move_tree takes a Node object as its input";
static const char __pyx_k_multiple_infosets_matching_label[] = "multiple infosets matching label '%s'";
static const char __pyx_k_multiple_strategies_matching_lab[] = "multiple strategies matching label '%s'";
static const char __pyx_k_must_specify_exactly_one_value_p[] = "must specify exactly one value per strategy";
static const char __pyx_k_no_infoset_or_action_matching_la[] = "no infoset or action matching label '%s'";
static const char __pyx_k_no_player_infoset_or_action_matc[] = "no player, infoset or action matching label '%s'";
static const char __pyx_k_no_player_or_strategy_matching_l[] = "no player or strategy matching label '%s'";
static const char __pyx_k_numeric_argument_required_for_ac[] = "numeric argument required for action probability";
static const char __pyx_k_numeric_argument_required_for_pa[] = "numeric argument required for payoff";
static const char __pyx_k_player_at_an_infoset_must_belong[] = "player at an infoset must belong to the same game";
static const char __pyx_k_profile_action_probability_index[] = "profile action probability index must be str or Action, not %s";
static const char __pyx_k_profile_belief_index_must_be_Nod[] = "profile belief index must be Node or Infoset, not %s";
static const char __pyx_k_profile_infoset_index_must_be_st[] = "profile infoset index must be str or Infoset, not %s";
static const char __pyx_k_profile_payoffs_index_must_be_in[] = "profile payoffs index must be int, str, or Player, not %s";
static const char __pyx_k_profile_probability_index_must_b[] = "profile probability index must be str, Infoset or Action, not %s";
static const char __pyx_k_profile_regret_index_must_be_str[] = "profile regret index must be str or Action, not %s";
static const char __pyx_k_profile_strategy_index_must_be_s[] = "profile strategy index must be str or Strategy, not %s";
static const char __pyx_k_profile_strategy_value_index_mus[] = "profile strategy value index must be str or Strategy, not %s";
static const char __pyx_k_rational_precision_profile_requi[] = "rational precision profile requires int or Fraction probability, not %s";
static const char __pyx_k_strategy_values_index_must_be_st[] = "strategy values index must be str or Player, not %s";
static const char __pyx_k_type_Infoset_required_for_settin[] = "type Infoset required for setting infoset at a node";
static const char __pyx_k_type_Outcome_required_for_settin[] = "type Outcome required for setting outcome at a node";
static const char __pyx_k_type_Player_required_for_setting[] = "type Player required for setting player at an infoset";
static const char __pyx_k_value_vector_must_support_iterat[] = "value vector must support iteration";
static const char __pyx_k_Users_arbiter_git_gambit_src_py_2[] = "/Users/arbiter/git/gambit/src/python/gambit/lib/behav.pxi";
static const char __pyx_k_Users_arbiter_git_gambit_src_py_3[] = "/Users/arbiter/git/gambit/src/python/gambit/lib/libgambit.pyx";
static const char __pyx_k_Users_arbiter_git_gambit_src_py_4[] = "/Users/arbiter/git/gambit/src/python/gambit/lib/nash.pxi";
static const char __pyx_k_append_move_can_only_be_applied_2[] = "append_move can only be applied between objects of the same game";
static const char __pyx_k_profile_indexes_must_be_int_str_2[] = "profile indexes must be int, str, Player, Infoset or Action, not %s";
static const char __pyx_k_Adding_strategies_is_only_applic_2[] = "Adding strategies is only applicableto players in a game, not in a restriction";
static const char __pyx_k_profile_payoffs_index_must_be_in_2[] = "profile payoffs index must be int, str, Player, Infoset or Action, not %s";
static PyObject *__pyx_kp_s_Action_d_s_at_infoset_s_for_pla;
static PyObject *__pyx_kp_s_Adding_strategies_is_only_applic;
static PyObject *__pyx_kp_s_Adding_strategies_is_only_applic_2;
static PyObject *__pyx_kp_s_All_specified_arrays_must_have_t;
static PyObject *__pyx_kp_s_Another_outcome_with_an_identica;
static PyObject *__pyx_kp_s_Another_player_with_an_identical;
static PyObject *__pyx_kp_s_Cannot_modify_outcomes_in_a_deri;
static PyObject *__pyx_kp_s_Changing_objects_in_a_restrictio;
static PyObject *__pyx_kp_s_Changing_objects_in_a_support_is;
static PyObject *__pyx_n_s_Contingencies;
static PyObject *__pyx_n_s_Decimal;
static PyObject *__pyx_n_s_Filler;
static PyObject *__pyx_n_s_Fraction;
static PyObject *__pyx_kp_s_Game_must_have_a_tree_representa;
static PyObject *__pyx_kp_s_Game_s;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_kp_s_Index_out_of_range;
static PyObject *__pyx_kp_s_Infoset_d_s_for_player_s_in_gam;
static PyObject *__pyx_n_s_KeyError;
static PyObject *__pyx_kp_s_LogitQREMixedStrategyProfile_lam;
static PyObject *__pyx_n_s_MismatchError;
static PyObject *__pyx_n_s_MixedBehav;
static PyObject *__pyx_n_s_MixedBehavInfoset;
static PyObject *__pyx_n_s_MixedStrategy;
static PyObject *__pyx_kp_s_Mixed_behavior_profiles_are_not;
static PyObject *__pyx_kp_s_Mixed_strategies_not_supported_f;
static PyObject *__pyx_kp_s_Must_use_a_tuple_of_ints_strateg;
static PyObject *__pyx_kp_s_Node_d_s_in_game_s;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_kp_s_Number_of_strategies_is_not_equa;
static PyObject *__pyx_kp_s_Operation_only_defined_for_games;
static PyObject *__pyx_kp_s_Outcome_d_s_in_game_s;
static PyObject *__pyx_kp_s_Outcome_s_in_game_s;
static PyObject *__pyx_kp_s_Player_CHANCE_in_game_s;
static PyObject *__pyx_kp_s_Player_d_s_in_game_s;
static PyObject *__pyx_kp_s_Precedes_takes_a_Node_object_as;
static PyObject *__pyx_kp_s_Provided_strategy_index_d_out_of;
static PyObject *__pyx_kp_s_Provided_strategy_label_s_not_de;
static PyObject *__pyx_kp_s_Provided_strategy_s_not_availabl;
static PyObject *__pyx_n_s_Rational;
static PyObject *__pyx_n_s_Rational__repr_latex;
static PyObject *__pyx_kp_s_Restriction_from_Game_s;
static PyObject *__pyx_kp_s_Reveal_takes_a_Player_object_as;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Strategy_d_s_for_player_s_in_ga;
static PyObject *__pyx_kp_s_The_new_action_should_be_from_th;
static PyObject *__pyx_kp_s_This_player_has_another_strategy;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unable_to_read_game_from_file_s;
static PyObject *__pyx_n_s_UndefinedOperationError;
static PyObject *__pyx_kp_s_Users_arbiter_git_gambit_src_py;
static PyObject *__pyx_kp_s_Users_arbiter_git_gambit_src_py_2;
static PyObject *__pyx_kp_s_Users_arbiter_git_gambit_src_py_3;
static PyObject *__pyx_kp_s_Users_arbiter_git_gambit_src_py_4;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_kp_s__18;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_kp_s__42;
static PyObject *__pyx_kp_s__8;
static PyObject *__pyx_n_s_acc;
static PyObject *__pyx_n_s_action;
static PyObject *__pyx_n_s_action_payoff;
static PyObject *__pyx_n_s_action_prob;
static PyObject *__pyx_n_s_actions;
static PyObject *__pyx_kp_s_append_move_accepts_either_a_Pla;
static PyObject *__pyx_kp_s_append_move_can_only_be_applied;
static PyObject *__pyx_kp_s_append_move_can_only_be_applied_2;
static PyObject *__pyx_kp_s_append_move_requires_actions_1;
static PyObject *__pyx_kp_s_append_move_with_a_Player_requir;
static PyObject *__pyx_kp_s_append_move_with_an_Infoset_cann;
static PyObject *__pyx_n_s_args;
static PyObject *__pyx_n_s_belief;
static PyObject *__pyx_kp_s_cannot_remove_last_strategy_of_a;
static PyObject *__pyx_n_s_children;
static PyObject *__pyx_n_s_class;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_kp_s_collection_indexes_must_be_int_o;
static PyObject *__pyx_kp_s_contingency_must_be_a_tuple_like;
static PyObject *__pyx_kp_s_copy_tree_can_only_be_applied_be;
static PyObject *__pyx_kp_s_copy_tree_takes_a_Node_object_as;
static PyObject *__pyx_n_s_count;
static PyObject *__pyx_n_s_decimal;
static PyObject *__pyx_kp_s_delete_requires_a_Strategy_objec;
static PyObject *__pyx_n_s_denominator;
static PyObject *__pyx_n_s_difference;
static PyObject *__pyx_n_s_difference_locals_lambda;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_enumerate;
static PyObject *__pyx_n_s_eq;
static PyObject *__pyx_n_s_external;
static PyObject *__pyx_n_s_fillvalue;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_format;
static PyObject *__pyx_kp_s_frac_s_s;
static PyObject *__pyx_n_s_fractions;
static PyObject *__pyx_n_s_from_arrays;
static PyObject *__pyx_n_s_from_arrays_locals_genexpr;
static PyObject *__pyx_n_s_gambit;
static PyObject *__pyx_n_s_gambit_gameiter;
static PyObject *__pyx_n_s_gambit_gte;
static PyObject *__pyx_n_s_gambit_lib_error;
static PyObject *__pyx_n_s_gambit_lib_libgambit;
static PyObject *__pyx_n_s_game;
static PyObject *__pyx_n_s_gameiter;
static PyObject *__pyx_n_s_genexpr;
static PyObject *__pyx_n_s_get_contingency;
static PyObject *__pyx_n_s_getaction;
static PyObject *__pyx_n_s_getitem;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_2;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_3;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_4;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_5;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_6;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_7;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_8;
static PyObject *__pyx_n_s_getitem___locals_MixedBehavInf_9;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_2;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_3;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_4;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_5;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_6;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav_7;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav__r;
static PyObject *__pyx_n_s_getitem___locals_MixedBehav__r_2;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_2;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_3;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_4;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_5;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_6;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_7;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_8;
static PyObject *__pyx_n_s_getitem___locals_MixedStrategy_9;
static PyObject *__pyx_n_s_getprob;
static PyObject *__pyx_n_s_getprob_strategy;
static PyObject *__pyx_n_s_gte;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_infoset;
static PyObject *__pyx_n_s_infoset_payoff;
static PyObject *__pyx_n_s_infoset_prob;
static PyObject *__pyx_n_s_infosets;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_kp_s_insert_action_takes_an_Action_ob;
static PyObject *__pyx_kp_s_insert_move_accepts_either_a_Pla;
static PyObject *__pyx_kp_s_insert_move_requires_actions_1;
static PyObject *__pyx_kp_s_insert_move_with_a_Player_requir;
static PyObject *__pyx_kp_s_insert_move_with_an_Infoset_cann;
static PyObject *__pyx_n_s_intersection;
static PyObject *__pyx_n_s_intersection_locals_lambda;
static PyObject *__pyx_kp_s_invalid_set_of_strategies;
static PyObject *__pyx_n_s_is_chance;
static PyObject *__pyx_n_s_is_const_sum;
static PyObject *__pyx_n_s_is_defined_at;
static PyObject *__pyx_n_s_is_perfect_recall;
static PyObject *__pyx_kp_s_is_successor_of_takes_a_Node_obj;
static PyObject *__pyx_n_s_is_tree;
static PyObject *__pyx_n_s_is_valid;
static PyObject *__pyx_n_s_issubset;
static PyObject *__pyx_n_s_issubset_locals_lambda;
static PyObject *__pyx_n_s_issuperset;
static PyObject *__pyx_kp_s_it_is_not_possible_to_delete_the;
static PyObject *__pyx_n_s_itertools;
static PyObject *__pyx_n_s_izip_longest;
static PyObject *__pyx_n_s_join;
static PyObject *__pyx_n_s_label;
static PyObject *__pyx_n_s_lam;
static PyObject *__pyx_kp_s_left;
static PyObject *__pyx_n_s_len;
static PyObject *__pyx_n_s_logit_atlambda;
static PyObject *__pyx_n_s_logit_estimate;
static PyObject *__pyx_n_s_logit_principal_branch;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_max_payoff;
static PyObject *__pyx_n_s_members;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_min_payoff;
static PyObject *__pyx_n_s_mixed_strategy_profile;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_kp_s_move_tree_takes_a_Node_object_as;
static PyObject *__pyx_kp_s_multiple_actions_matching_label;
static PyObject *__pyx_kp_s_multiple_infosets_matching_label;
static PyObject *__pyx_kp_s_multiple_strategies_matching_lab;
static PyObject *__pyx_kp_s_must_specify_exactly_one_value_p;
static PyObject *__pyx_kp_s_must_support_iteration;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_n_s_native;
static PyObject *__pyx_n_s_new_table;
static PyObject *__pyx_n_s_new_tree;
static PyObject *__pyx_n_s_nfg;
static PyObject *__pyx_kp_s_no_action_matching_label_s;
static PyObject *__pyx_kp_s_no_infoset_matching_label_s;
static PyObject *__pyx_kp_s_no_infoset_or_action_matching_la;
static PyObject *__pyx_kp_s_no_matching_label_s;
static PyObject *__pyx_kp_s_no_object_with_label_s;
static PyObject *__pyx_kp_s_no_player_infoset_or_action_matc;
static PyObject *__pyx_kp_s_no_player_or_strategy_matching_l;
static PyObject *__pyx_kp_s_no_strategy_matching_label_s;
static PyObject *__pyx_n_s_num_players;
static PyObject *__pyx_n_s_num_strategies_player;
static PyObject *__pyx_n_s_number;
static PyObject *__pyx_n_s_numerator;
static PyObject *__pyx_kp_s_numeric_argument_required_for_ac;
static PyObject *__pyx_kp_s_numeric_argument_required_for_pa;
static PyObject *__pyx_n_s_object;
static PyObject *__pyx_n_s_other;
static PyObject *__pyx_n_s_outcomes;
static PyObject *__pyx_n_s_p;
static PyObject *__pyx_n_s_p_game;
static PyObject *__pyx_n_s_p_lambda;
static PyObject *__pyx_n_s_p_maxDepth;
static PyObject *__pyx_n_s_p_maxLambda;
static PyObject *__pyx_n_s_p_profile;
static PyObject *__pyx_n_s_p_stopAfter;
static PyObject *__pyx_n_s_parse_game;
static PyObject *__pyx_n_s_payoff;
static PyObject *__pyx_n_s_payoff_2;
static PyObject *__pyx_n_s_pl;
static PyObject *__pyx_n_s_player;
static PyObject *__pyx_kp_s_player_at_an_infoset_must_belong;
static PyObject *__pyx_kp_s_player_index_must_be_int_str_or;
static PyObject *__pyx_n_s_players;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_product;
static PyObject *__pyx_n_s_profile;
static PyObject *__pyx_kp_s_profile_action_probability_index;
static PyObject *__pyx_kp_s_profile_belief_index_must_be_Nod;
static PyObject *__pyx_kp_s_profile_indexes_must_be_int_str;
static PyObject *__pyx_kp_s_profile_indexes_must_be_int_str_2;
static PyObject *__pyx_kp_s_profile_infoset_index_must_be_st;
static PyObject *__pyx_kp_s_profile_payoffs_index_must_be_in;
static PyObject *__pyx_kp_s_profile_payoffs_index_must_be_in_2;
static PyObject *__pyx_kp_s_profile_probability_index_must_b;
static PyObject *__pyx_kp_s_profile_regret_index_must_be_str;
static PyObject *__pyx_kp_s_profile_strategy_index_must_be_s;
static PyObject *__pyx_kp_s_profile_strategy_value_index_mus;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_rational;
static PyObject *__pyx_kp_s_rational_precision_profile_requi;
static PyObject *__pyx_n_s_read_game;
static PyObject *__pyx_n_s_reduce;
static PyObject *__pyx_n_s_regret;
static PyObject *__pyx_n_s_remove;
static PyObject *__pyx_n_s_remove_locals_lambda;
static PyObject *__pyx_n_s_replace;
static PyObject *__pyx_n_s_repr;
static PyObject *__pyx_n_s_repr_latex;
static PyObject *__pyx_n_s_resolve_index;
static PyObject *__pyx_n_s_resolve_index_locals_lambda;
static PyObject *__pyx_n_s_restrict;
static PyObject *__pyx_n_s_restriction;
static PyObject *__pyx_n_s_ret;
static PyObject *__pyx_kp_s_right;
static PyObject *__pyx_kp_s_s;
static PyObject *__pyx_n_s_s1;
static PyObject *__pyx_n_s_s2;
static PyObject *__pyx_kp_s_s_2;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_send;
static PyObject *__pyx_n_s_setaction;
static PyObject *__pyx_n_s_setinfoset;
static PyObject *__pyx_n_s_setitem;
static PyObject *__pyx_n_s_setplayer;
static PyObject *__pyx_n_s_setprob;
static PyObject *__pyx_n_s_setprob_player;
static PyObject *__pyx_n_s_setprob_player_locals_Filler;
static PyObject *__pyx_n_s_setprob_strategy;
static PyObject *__pyx_n_s_shape;
static PyObject *__pyx_n_s_solns;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_strategies;
static PyObject *__pyx_n_s_strategy;
static PyObject *__pyx_n_s_strategy1;
static PyObject *__pyx_n_s_strategy2;
static PyObject *__pyx_n_s_strategy_value;
static PyObject *__pyx_n_s_strategy_value_2;
static PyObject *__pyx_n_s_strategy_value_deriv;
static PyObject *__pyx_n_s_strategy_values;
static PyObject *__pyx_kp_s_strategy_values_index_must_be_st;
static PyObject *__pyx_n_s_strict;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_throw;
static PyObject *__pyx_n_s_title;
static PyObject *__pyx_kp_s_type_Infoset_required_for_settin;
static PyObject *__pyx_kp_s_type_Outcome_required_for_settin;
static PyObject *__pyx_kp_s_type_Player_required_for_setting;
static PyObject *__pyx_n_s_union;
static PyObject *__pyx_n_s_unique;
static PyObject *__pyx_n_s_unrestrict;
static PyObject *__pyx_n_s_value;
static PyObject *__pyx_kp_s_value_list_length_must_be_s_not;
static PyObject *__pyx_kp_s_value_vector_must_support_iterat;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_warn;
static PyObject *__pyx_n_s_warnings;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_write_game;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_xrange;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_zip;
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Rational__repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Collection___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Collection *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Collection_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Collection *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_6Action_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_6delete(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_8precedes(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_6Action_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_7infoset___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_4prob___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_6Action_4prob_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_7Members___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Members *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Members_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Members *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Actions_add(struct __pyx_obj_6gambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_7Actions_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_Actions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Actions_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_act); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_7Infoset_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_6precedes(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_8reveal(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_7Infoset_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_9is_chance___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_7actions___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_7members___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_6player___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_7Infoset_6player_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_8Strategy_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_8Strategy_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_6player___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_6number___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_6unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_8Infosets___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Infosets_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *__pyx_v_self, PyObject *__pyx_v_iset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Strategies_add(struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_10Strategies_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Strategies_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_add(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_2__init__(struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player, struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_4__len__(struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_6__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, PyObject *__pyx_v_strat); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_6Player_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_6Player_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_6number___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_9is_chance___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_10strategies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_8infosets___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_10min_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_10max_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_6unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_7Outcome_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_6delete(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_7Outcome_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_7Outcome_10__setitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_12unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome___del__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_2__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_4__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_6__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_8__setitem__(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pl, CYTHON_UNUSED PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_10delete(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_2__set__(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED char *__pyx_v_value); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_8Children___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Children *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Children_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Children *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_4Node_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_6is_successor_of(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_8is_subgame_root(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_10append_move(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_12insert_move(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_14leave_infoset(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_16delete_parent(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_18delete_tree(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_20copy_tree(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_22move_tree(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_4Node_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_8children___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_7infoset___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_4Node_7infoset_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_6player___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_6parent___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_12prior_action___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_13prior_sibling___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_12next_sibling___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_11is_terminal___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_7outcome___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_4Node_7outcome_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_outcome); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile___init__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_4__len__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_6__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strat); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_10__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_12__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_14__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_16remove(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategy); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_18difference(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_20intersection(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_22is_valid(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, PyObject *__pyx_v_num_players); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_acc, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_24issubset(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_26issuperset(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_28restrict(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_30undominated(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strict, PyObject *__pyx_v_external); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_32union(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_34unique(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_lst); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes___init__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, PyObject *__pyx_v_outc); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_6add(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies___init__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, PyObject *__pyx_v_strat); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction___init__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_4__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_6__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_8__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_5title___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_7players___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10strategies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_8outcomes___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_7is_tree___get__(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10min_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10max_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10write(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_format); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_12undominated(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_strict); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_14num_strategies_player(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_pl); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_16support_profile(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_18unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_20_get_contingency(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_22__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_24mixed_strategy_profile(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_rational); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_2_repr_latex_(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_4__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_6_resolve_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_10__setitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_12_setprob_player(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_14payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_16strategy_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_18strategy_values(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_20strategy_value_deriv(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_strategy1, PyObject *__pyx_v_strategy2); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4_strategy_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_8_getprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_12_setprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_16_strategy_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_18_strategy_value_deriv(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s2); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_20liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_22copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_24as_behavior(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_26restriction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_28unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_30set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_32normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4_strategy_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_8_getprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_12_setprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_16_strategy_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_18_strategy_value_deriv(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s2); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_20liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_22copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_24as_behavior(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_26restriction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_28unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_30set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_32normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_2_repr_latex_(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_4__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda9(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y); /* proto */
static PyObject *__pyx_lambda_funcdef_lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_6_resolve_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_8_setinfoset(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_10_setplayer(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_12__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14__setitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_16is_defined_at(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_18belief(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_20action_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_22payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_24realiz_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset_or_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_26regret(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4_is_defined_at(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_8_getaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_12_setaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_16_belief(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_18_infoset_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_20_infoset_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_22_action_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_24_action_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_26_regret(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_28copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_30as_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_32liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_34set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_36normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4_is_defined_at(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_8_getaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_12_setaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_16_belief(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_node); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_18_infoset_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_20_infoset_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_22_action_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_24_action_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_26_regret(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_28copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_30as_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_32liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_34set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_36normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_8Outcomes___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Outcomes_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_outc); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Outcomes_4add(struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_7Players___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Players_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_pl); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Players_4add(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_label); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Players_6chance___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_11GameActions___len__(struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_11GameActions_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *__pyx_v_self, PyObject *__pyx_v_action); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_12GameInfosets___len__(struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_12GameInfosets_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *__pyx_v_self, PyObject *__pyx_v_infoset); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_14GameStrategies___len__(struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_14GameStrategies_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *__pyx_v_self, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_new_tree(PyTypeObject *__pyx_v_cls); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_2new_table(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dim); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_11from_arrays_genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_11from_arrays_3genexpr(PyObject *__pyx_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_4from_arrays(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_arrays); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_6read_game(PyTypeObject *__pyx_v_cls, char *__pyx_v_fn); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_8parse_game(PyTypeObject *__pyx_v_cls, char *__pyx_v_s); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10__str__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_12__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_14__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop); /* proto */
static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_4Game_16__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7is_tree___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_5title___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_4Game_5title_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7comment___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_4Game_7comment_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, char *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7actions___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_8infosets___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7players___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10strategies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_8outcomes___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_13contingencies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_4root___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_12is_const_sum___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_17is_perfect_recall___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10min_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10max_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_18_get_contingency(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_args); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_20__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_22mixed_strategy_profile(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_24mixed_behavior_profile(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_26support_profile(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_28num_nodes(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_30unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_32write(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_format); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_p_stopAfter, CYTHON_UNUSED PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game); /* proto */
static int __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile___init__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_game); /* proto */
static void __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_6__len__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam___get__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile___get__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_logit_estimate(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p_profile); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_2logit_atlambda(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_lambda); /* proto */
static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4logit_principal_branch(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_maxLambda); /* proto */
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Collection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Action(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Members(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Actions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Infoset(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Strategy(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Infosets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Strategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_PlayerSupportStrategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Player(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Outcome(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_TreeGameOutcome(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Children(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Node(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_BaseGame(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_StrategySupportProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_RestrictionOutcomes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_RestrictionStrategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_StrategicRestriction(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfileRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfileRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Outcomes(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Players(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_GameActions(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_GameInfosets(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_GameStrategies(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Game(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_EnumPureStrategySolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_EnumPureAgentSolver(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPBehaviorSolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPStrategySolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPStrategySolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPBehaviorSolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPBehaviorSolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPStrategySolverDouble(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPStrategySolverRational(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct__remove(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_2;
static PyObject *__pyx_int_3;
static PyObject *__pyx_int_4;
static PyObject *__pyx_int_5;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__6;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__15;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__22;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__36;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__38;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__41;
static PyObject *__pyx_tuple__43;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__45;
static PyObject *__pyx_tuple__47;
static PyObject *__pyx_tuple__49;
static PyObject *__pyx_tuple__51;
static PyObject *__pyx_tuple__53;
static PyObject *__pyx_tuple__55;
static PyObject *__pyx_tuple__57;
static PyObject *__pyx_tuple__59;
static PyObject *__pyx_tuple__60;
static PyObject *__pyx_tuple__61;
static PyObject *__pyx_tuple__62;
static PyObject *__pyx_tuple__63;
static PyObject *__pyx_tuple__64;
static PyObject *__pyx_tuple__65;
static PyObject *__pyx_tuple__66;
static PyObject *__pyx_tuple__68;
static PyObject *__pyx_tuple__70;
static PyObject *__pyx_tuple__72;
static PyObject *__pyx_tuple__74;
static PyObject *__pyx_tuple__76;
static PyObject *__pyx_tuple__78;
static PyObject *__pyx_tuple__80;
static PyObject *__pyx_tuple__82;
static PyObject *__pyx_tuple__84;
static PyObject *__pyx_tuple__86;
static PyObject *__pyx_tuple__88;
static PyObject *__pyx_tuple__90;
static PyObject *__pyx_tuple__92;
static PyObject *__pyx_tuple__94;
static PyObject *__pyx_tuple__95;
static PyObject *__pyx_tuple__96;
static PyObject *__pyx_tuple__97;
static PyObject *__pyx_tuple__98;
static PyObject *__pyx_tuple__99;
static PyObject *__pyx_tuple__100;
static PyObject *__pyx_tuple__101;
static PyObject *__pyx_tuple__102;
static PyObject *__pyx_tuple__104;
static PyObject *__pyx_tuple__106;
static PyObject *__pyx_tuple__108;
static PyObject *__pyx_codeobj__46;
static PyObject *__pyx_codeobj__48;
static PyObject *__pyx_codeobj__50;
static PyObject *__pyx_codeobj__52;
static PyObject *__pyx_codeobj__54;
static PyObject *__pyx_codeobj__56;
static PyObject *__pyx_codeobj__58;
static PyObject *__pyx_codeobj__67;
static PyObject *__pyx_codeobj__69;
static PyObject *__pyx_codeobj__71;
static PyObject *__pyx_codeobj__73;
static PyObject *__pyx_codeobj__75;
static PyObject *__pyx_codeobj__77;
static PyObject *__pyx_codeobj__79;
static PyObject *__pyx_codeobj__81;
static PyObject *__pyx_codeobj__83;
static PyObject *__pyx_codeobj__85;
static PyObject *__pyx_codeobj__87;
static PyObject *__pyx_codeobj__89;
static PyObject *__pyx_codeobj__91;
static PyObject *__pyx_codeobj__93;
static PyObject *__pyx_codeobj__103;
static PyObject *__pyx_codeobj__105;
static PyObject *__pyx_codeobj__107;
static PyObject *__pyx_codeobj__109;

/* "gambit/lib/libgambit.pyx":32
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Rational_1_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_8Rational_1_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_8Rational_1_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Rational_1_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Rational__repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Rational__repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);

  /* "gambit/lib/libgambit.pyx":33
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):
 *         if self.denominator != 1:             # <<<<<<<<<<<<<<
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_denominator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_NE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(0, 33, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_3) {

    /* "gambit/lib/libgambit.pyx":34
 *     def _repr_latex_(self):
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)             # <<<<<<<<<<<<<<
 *         else:
 *             return r'$%s$' % self.numerator
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_numerator); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_denominator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_1);
    __pyx_t_2 = 0;
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_frac_s_s, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 34, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gambit/lib/libgambit.pyx":33
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):
 *         if self.denominator != 1:             # <<<<<<<<<<<<<<
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 *         else:
 */
  }

  /* "gambit/lib/libgambit.pyx":36
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 *         else:
 *             return r'$%s$' % self.numerator             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "libgambit/libgambit.h":
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_numerator); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_s, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/libgambit.pyx":32
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Rational._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/libgambit.pyx":393
 * cdef class Collection(object):
 *     "Represents a collection of related objects in a game."
 *     def __repr__(self):   return str(list(self))             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, i):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_10Collection___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Collection *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Collection___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Collection *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 393, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Collection.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/libgambit.pyx":395
 *     def __repr__(self):   return str(list(self))
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if isinstance(i, str):
 *             try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Collection_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Collection_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_10Collection_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Collection *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Collection_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Collection *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_v_x = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  Py_ssize_t __pyx_t_9;
  PyObject *(*__pyx_t_10)(PyObject *);
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/libgambit.pyx":396
 * 
 *     def __getitem__(self, i):
 *         if isinstance(i, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self[ [ x.label for x in self ].index(i) ]
 */
  __pyx_t_1 = PyString_Check(__pyx_v_i); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/libgambit.pyx":397
 *     def __getitem__(self, i):
 *         if isinstance(i, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self[ [ x.label for x in self ].index(i) ]
 *             except ValueError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_5);
      /*try:*/ {

        /* "gambit/lib/libgambit.pyx":398
 *         if isinstance(i, str):
 *             try:
 *                 return self[ [ x.label for x in self ].index(i) ]             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 raise IndexError("no object with label '%s'" % i)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_7 = PyList_New(0); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 398, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_7);
        if (likely(PyList_CheckExact(((PyObject *)__pyx_v_self))) || PyTuple_CheckExact(((PyObject *)__pyx_v_self))) {
          __pyx_t_8 = ((PyObject *)__pyx_v_self); __Pyx_INCREF(__pyx_t_8); __pyx_t_9 = 0;
          __pyx_t_10 = NULL;
        } else {
          __pyx_t_9 = -1; __pyx_t_8 = PyObject_GetIter(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 398, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_10)) __PYX_ERR(0, 398, __pyx_L4_error)
        }
        for (;;) {
          if (likely(!__pyx_t_10)) {
            if (likely(PyList_CheckExact(__pyx_t_8))) {
              if (__pyx_t_9 >= PyList_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_11 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 398, __pyx_L4_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 398, __pyx_L4_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            } else {
              if (__pyx_t_9 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_11 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_9); __Pyx_INCREF(__pyx_t_11); __pyx_t_9++; if (unlikely(0 < 0)) __PYX_ERR(0, 398, __pyx_L4_error)
              #else
              __pyx_t_11 = PySequence_ITEM(__pyx_t_8, __pyx_t_9); __pyx_t_9++; if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 398, __pyx_L4_error)
              __Pyx_GOTREF(__pyx_t_11);
              #endif
            }
          } else {
            __pyx_t_11 = __pyx_t_10(__pyx_t_8);
            if (unlikely(!__pyx_t_11)) {
              PyObject* exc_type = PyErr_Occurred();
              if (exc_type) {
                if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                else __PYX_ERR(0, 398, __pyx_L4_error)
              }
              break;
            }
            __Pyx_GOTREF(__pyx_t_11);
          }
          __Pyx_XDECREF_SET(__pyx_v_x, __pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 398, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_11);
          if (unlikely(__Pyx_ListComp_Append(__pyx_t_7, (PyObject*)__pyx_t_11))) __PYX_ERR(0, 398, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 398, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __pyx_t_7 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
          __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
          if (likely(__pyx_t_7)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
            __Pyx_INCREF(__pyx_t_7);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_8, function);
          }
        }
        if (!__pyx_t_7) {
          __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 398, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_6);
        } else {
          __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 398, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_7); __pyx_t_7 = NULL;
          __Pyx_INCREF(__pyx_v_i);
          __Pyx_GIVEREF(__pyx_v_i);
          PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_v_i);
          __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 398, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_6);
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_t_6); if (unlikely(!__pyx_t_8)) __PYX_ERR(0, 398, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_8;
        __pyx_t_8 = 0;
        goto __pyx_L8_try_return;

        /* "gambit/lib/libgambit.pyx":397
 *     def __getitem__(self, i):
 *         if isinstance(i, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self[ [ x.label for x in self ].index(i) ]
 *             except ValueError:
 */
      }
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "gambit/lib/libgambit.pyx":399
 *             try:
 *                 return self[ [ x.label for x in self ].index(i) ]
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no object with label '%s'" % i)
 *         else:
 */
      __pyx_t_12 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("gambit.lib.libgambit.Collection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_6, &__pyx_t_11) < 0) __PYX_ERR(0, 399, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GOTREF(__pyx_t_11);

        /* "gambit/lib/libgambit.pyx":400
 *                 return self[ [ x.label for x in self ].index(i) ]
 *             except ValueError:
 *                 raise IndexError("no object with label '%s'" % i)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %
 */
        __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_no_object_with_label_s, __pyx_v_i); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(0, 400, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_7);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_7);
        __pyx_t_7 = 0;
        __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_13, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(0, 400, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_t_7, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        __PYX_ERR(0, 400, __pyx_L6_except_error)
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "gambit/lib/libgambit.pyx":397
 *     def __getitem__(self, i):
 *         if isinstance(i, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self[ [ x.label for x in self ].index(i) ]
 *             except ValueError:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_XGIVEREF(__pyx_t_5);
      __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
      goto __pyx_L0;
    }

    /* "gambit/lib/libgambit.pyx":396
 * 
 *     def __getitem__(self, i):
 *         if isinstance(i, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self[ [ x.label for x in self ].index(i) ]
 */
  }

  /* "gambit/lib/libgambit.pyx":402
 *                 raise IndexError("no object with label '%s'" % i)
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %             # <<<<<<<<<<<<<<
 *                              i.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "gambit/lib/libgambit.pyx":403
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %
 *                              i.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __pyx_t_11 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_class); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 403, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;

    /* "gambit/lib/libgambit.pyx":402
 *                 raise IndexError("no object with label '%s'" % i)
 *         else:
 *             raise TypeError("collection indexes must be int or str, not %s" %             # <<<<<<<<<<<<<<
 *                              i.__class__.__name__)
 * 
 */
    __pyx_t_11 = __Pyx_PyString_Format(__pyx_kp_s_collection_indexes_must_be_int_o, __pyx_t_6); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_11);
    __pyx_t_11 = 0;
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_11)) __PYX_ERR(0, 402, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_11, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    __PYX_ERR(0, 402, __pyx_L1_error)
  }

  /* "gambit/lib/libgambit.pyx":395
 *     def __repr__(self):   return str(list(self))
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if isinstance(i, str):
 *             try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("gambit.lib.libgambit.Collection.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_x);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":27
 *     cdef c_GameAction action
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameInfosetRep *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  GamePlayerRep *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/action.pxi":28
 * 
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "gambit/lib/action.pxi":29
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 29, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gambit/lib/action.pxi":30
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 30, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 30, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_4->GetLabel().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(5, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "gambit/lib/action.pxi":31
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 31, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 31, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_t_4->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 31, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_t_6->GetLabel().c_str()); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "gambit/lib/action.pxi":32
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Action self, other, whichop):
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 32, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 32, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_t_4->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 32, __pyx_L1_error)
  }
  try {
    __pyx_t_8 = __pyx_t_6->GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 32, __pyx_L1_error)
  }
  __pyx_t_9 = __Pyx_PyBytes_FromString(__pyx_t_8->GetTitle().c_str()); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);

  /* "gambit/lib/action.pxi":29
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetLabel().c_str(),
 */
  __pyx_t_10 = PyTuple_New(5); if (unlikely(!__pyx_t_10)) __PYX_ERR(5, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_10, 3, __pyx_t_7);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_10, 4, __pyx_t_9);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;
  __pyx_t_9 = 0;

  /* "gambit/lib/action.pxi":28
 * 
 *     def __repr__(self):
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.action.deref().GetNumber()-1, self.label,
 *                  self.action.deref().GetInfoset().deref().GetLabel().c_str(),
 */
  __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Action_d_s_at_infoset_s_for_pla, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_r = __pyx_t_9;
  __pyx_t_9 = 0;
  goto __pyx_L0;

  /* "gambit/lib/action.pxi":27
 *     cdef c_GameAction action
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Action [%d] '%s' at infoset '%s' for player '%s' in game '%s'>" % \
 *                 (self.action.deref().GetNumber()-1, self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":34
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Action self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Action):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(5, 34, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "self", 0))) __PYX_ERR(5, 34, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_2__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameActionRep *__pyx_t_4;
  GameActionRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/action.pxi":35
 * 
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/action.pxi":36
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 36, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/action.pxi":37
 *         if isinstance(other, Action):
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.action.deref() != ((<Action>other).action).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(5, 37, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_other)->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(5, 37, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/action.pxi":36
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/action.pxi":38
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() != ((<Action>other).action).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/action.pxi":39
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:
 *                 return self.action.deref() != ((<Action>other).action).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(5, 39, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_other)->action.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(5, 39, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/action.pxi":38
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.action.deref() != ((<Action>other).action).deref()
 *             else:
 */
    }

    /* "gambit/lib/action.pxi":41
 *                 return self.action.deref() != ((<Action>other).action).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(5, 41, __pyx_L1_error)
    }

    /* "gambit/lib/action.pxi":35
 * 
 *     def __richcmp__(Action self, other, whichop):
 *         if isinstance(other, Action):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.action.deref() == ((<Action>other).action).deref()
 */
  }

  /* "gambit/lib/action.pxi":43
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/action.pxi":44
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/action.pxi":43
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/action.pxi":45
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(5, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/action.pxi":46
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/action.pxi":45
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/action.pxi":48
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(5, 48, __pyx_L1_error)
    }
  }

  /* "gambit/lib/action.pxi":34
 *                  self.action.deref().GetInfoset().deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Action self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Action):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":50
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.action.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_6Action_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_6Action_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_4__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_6Action_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/action.pxi":51
 * 
 *     def __hash__(self):
 *         return long(<long>self.action.deref())             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 51, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(5, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/action.pxi":50
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.action.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":53
 *         return long(<long>self.action.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if len(self.infoset.actions) == 1:
 *             raise UndefinedOperationError("it is not possible to delete the \
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_6delete(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_6delete(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  GameActionRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "gambit/lib/action.pxi":54
 * 
 *     def delete(self):
 *         if len(self.infoset.actions) == 1:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("it is not possible to delete the \
 *                                             last action of an infoset")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_actions); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(5, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((__pyx_t_3 == 1) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/action.pxi":55
 *     def delete(self):
 *         if len(self.infoset.actions) == 1:
 *             raise UndefinedOperationError("it is not possible to delete the \             # <<<<<<<<<<<<<<
 *                                             last action of an infoset")
 *         self.action.deref().DeleteAction()
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(5, 55, __pyx_L1_error)

    /* "gambit/lib/action.pxi":54
 * 
 *     def delete(self):
 *         if len(self.infoset.actions) == 1:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("it is not possible to delete the \
 *                                             last action of an infoset")
 */
  }

  /* "gambit/lib/action.pxi":57
 *             raise UndefinedOperationError("it is not possible to delete the \
 *                                             last action of an infoset")
 *         self.action.deref().DeleteAction()             # <<<<<<<<<<<<<<
 * 
 *     def precedes(self, node):
 */
  try {
    __pyx_t_5 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 57, __pyx_L1_error)
  }
  try {
    __pyx_t_5->DeleteAction();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
    __PYX_ERR(5, 57, __pyx_L1_error)
  }

  /* "gambit/lib/action.pxi":53
 *         return long(<long>self.action.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if len(self.infoset.actions) == 1:
 *             raise UndefinedOperationError("it is not possible to delete the \
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":59
 *         self.action.deref().DeleteAction()
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.action.deref().Precedes(((<Node>node).node))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_9precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_9precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("precedes (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_8precedes(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_8precedes(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameActionRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("precedes", 0);

  /* "gambit/lib/action.pxi":60
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_6gambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/action.pxi":61
 *     def precedes(self, node):
 *         if isinstance(node, Node):
 *             return self.action.deref().Precedes(((<Node>node).node))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("Precedes takes a Node object as its input")
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->action.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(5, 61, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3->Precedes(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_node)->node)); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/action.pxi":60
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 */
  }

  /* "gambit/lib/action.pxi":63
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 *             raise TypeError("Precedes takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(5, 63, __pyx_L1_error)
  }

  /* "gambit/lib/action.pxi":59
 *         self.action.deref().DeleteAction()
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.action.deref().Precedes(((<Node>node).node))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.precedes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":66
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.action.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_5label___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/action.pxi":67
 *     property label:
 *         def __get__(self):
 *             return self.action.deref().GetLabel().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 67, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetLabel().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/action.pxi":66
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.action.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":68
 *         def __get__(self):
 *             return self.action.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_6Action_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_6Action_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(5, 68, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_5label_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_6Action_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/action.pxi":70
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.action.deref().SetLabel(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/action.pxi":71
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.action.deref().SetLabel(s)             # <<<<<<<<<<<<<<
 * 
 *     property infoset:
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 71, __pyx_L1_error)
  }
  __pyx_t_1->SetLabel(__pyx_v_s);

  /* "gambit/lib/action.pxi":68
 *         def __get__(self):
 *             return self.action.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":74
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             i = Infoset()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_7infoset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_7infoset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_7infoset___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_7infoset___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameActionRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/action.pxi":76
 *         def __get__(self):
 *             cdef Infoset i
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.action.deref().GetInfoset()
 *             return i
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 76, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/action.pxi":77
 *             cdef Infoset i
 *             i = Infoset()
 *             i.infoset = self.action.deref().GetInfoset()             # <<<<<<<<<<<<<<
 *             return i
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 77, __pyx_L1_error)
  }
  __pyx_v_i->infoset = __pyx_t_2->GetInfoset();

  /* "gambit/lib/action.pxi":78
 *             i = Infoset()
 *             i.infoset = self.action.deref().GetInfoset()
 *             return i             # <<<<<<<<<<<<<<
 * 
 *     property prob:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_i));
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "gambit/lib/action.pxi":74
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             i = Infoset()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.infoset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":81
 * 
 *     property prob:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bytes py_string
 *             cdef cxx_string dummy_str
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_4prob_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Action_4prob_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_4prob___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Action_4prob___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self) {
  PyObject *__pyx_v_py_string = 0;
  string __pyx_v_dummy_str;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameActionRep *__pyx_t_1;
  GameInfosetRep *__pyx_t_2;
  string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/action.pxi":84
 *             cdef bytes py_string
 *             cdef cxx_string dummy_str
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(             # <<<<<<<<<<<<<<
 *                 self.action.deref().GetNumber(), dummy_str).c_str()
 *             if "." in py_string:
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 84, __pyx_L1_error)
  }
  try {
    __pyx_t_2 = __pyx_t_1->GetInfoset().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 84, __pyx_L1_error)
  }

  /* "gambit/lib/action.pxi":85
 *             cdef cxx_string dummy_str
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(
 *                 self.action.deref().GetNumber(), dummy_str).c_str()             # <<<<<<<<<<<<<<
 *             if "." in py_string:
 *                 return decimal.Decimal(py_string)
 */
  try {
    __pyx_t_1 = __pyx_v_self->action.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(5, 85, __pyx_L1_error)
  }

  /* "gambit/lib/action.pxi":84
 *             cdef bytes py_string
 *             cdef cxx_string dummy_str
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(             # <<<<<<<<<<<<<<
 *                 self.action.deref().GetNumber(), dummy_str).c_str()
 *             if "." in py_string:
 */
  try {
    __pyx_t_3 = __pyx_t_2->GetActionProb(__pyx_t_1->GetNumber(), __pyx_v_dummy_str);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(5, 84, __pyx_L1_error)
  }

  /* "gambit/lib/action.pxi":85
 *             cdef cxx_string dummy_str
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(
 *                 self.action.deref().GetNumber(), dummy_str).c_str()             # <<<<<<<<<<<<<<
 *             if "." in py_string:
 *                 return decimal.Decimal(py_string)
 */
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_t_3.c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_py_string = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "gambit/lib/action.pxi":86
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(
 *                 self.action.deref().GetNumber(), dummy_str).c_str()
 *             if "." in py_string:             # <<<<<<<<<<<<<<
 *                 return decimal.Decimal(py_string)
 *             else:
 */
  __pyx_t_5 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s__3, __pyx_v_py_string, Py_EQ)); if (unlikely(__pyx_t_5 < 0)) __PYX_ERR(5, 86, __pyx_L1_error)
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (__pyx_t_6) {

    /* "gambit/lib/action.pxi":87
 *                 self.action.deref().GetNumber(), dummy_str).c_str()
 *             if "." in py_string:
 *                 return decimal.Decimal(py_string)             # <<<<<<<<<<<<<<
 *             else:
 *                 return Rational(py_string)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_7 = __Pyx_GetModuleGlobalName(__pyx_n_s_decimal); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_py_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(5, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_py_string);
      __Pyx_GIVEREF(__pyx_v_py_string);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_py_string);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/action.pxi":86
 *             py_string = self.action.deref().GetInfoset().deref().GetActionProb(
 *                 self.action.deref().GetNumber(), dummy_str).c_str()
 *             if "." in py_string:             # <<<<<<<<<<<<<<
 *                 return decimal.Decimal(py_string)
 *             else:
 */
  }

  /* "gambit/lib/action.pxi":89
 *                 return decimal.Decimal(py_string)
 *             else:
 *                 return Rational(py_string)             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_8)) __PYX_ERR(5, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_py_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(5, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_v_py_string);
      __Pyx_GIVEREF(__pyx_v_py_string);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_v_py_string);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(5, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/action.pxi":81
 * 
 *     property prob:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef bytes py_string
 *             cdef cxx_string dummy_str
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.prob.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/action.pxi":91
 *                 return Rational(py_string)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_6Action_4prob_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_6Action_4prob_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Action_4prob_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_6Action_4prob_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_self, PyObject *__pyx_v_value) {
  string __pyx_v_s;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  char *__pyx_t_7;
  GameActionRep *__pyx_t_8;
  GameInfosetRep *__pyx_t_9;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/action.pxi":93
 *         def __set__(self, value):
 *             cdef cxx_string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *                 v = str(value)
 *                 s.assign(v)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 93, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = PyInt_Check(__pyx_v_value); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  if (!__pyx_t_6) {
  } else {
    __pyx_t_4 = __pyx_t_6;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_6 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_5 = (__pyx_t_6 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_4 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_3); 
  __pyx_t_6 = (__pyx_t_5 != 0);
  __pyx_t_4 = __pyx_t_6;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = (__pyx_t_4 != 0);
  if (__pyx_t_6) {

    /* "gambit/lib/action.pxi":94
 *             cdef cxx_string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 *                 v = str(value)             # <<<<<<<<<<<<<<
 *                 s.assign(v)
 *                 self.action.deref().GetInfoset().deref().SetActionProb(
 */
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_value);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(5, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_v = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "gambit/lib/action.pxi":95
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 *                 v = str(value)
 *                 s.assign(v)             # <<<<<<<<<<<<<<
 *                 self.action.deref().GetInfoset().deref().SetActionProb(
 *                     self.action.deref().GetNumber(), s)
 */
    __pyx_t_7 = __Pyx_PyObject_AsString(__pyx_v_v); if (unlikely((!__pyx_t_7) && PyErr_Occurred())) __PYX_ERR(5, 95, __pyx_L1_error)
    __pyx_v_s.assign(__pyx_t_7);

    /* "gambit/lib/action.pxi":96
 *                 v = str(value)
 *                 s.assign(v)
 *                 self.action.deref().GetInfoset().deref().SetActionProb(             # <<<<<<<<<<<<<<
 *                     self.action.deref().GetNumber(), s)
 *             else:
 */
    try {
      __pyx_t_8 = __pyx_v_self->action.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(5, 96, __pyx_L1_error)
    }
    try {
      __pyx_t_9 = __pyx_t_8->GetInfoset().operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(5, 96, __pyx_L1_error)
    }

    /* "gambit/lib/action.pxi":97
 *                 s.assign(v)
 *                 self.action.deref().GetInfoset().deref().SetActionProb(
 *                     self.action.deref().GetNumber(), s)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError, "numeric argument required for action " \
 */
    try {
      __pyx_t_8 = __pyx_v_self->action.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(5, 97, __pyx_L1_error)
    }

    /* "gambit/lib/action.pxi":96
 *                 v = str(value)
 *                 s.assign(v)
 *                 self.action.deref().GetInfoset().deref().SetActionProb(             # <<<<<<<<<<<<<<
 *                     self.action.deref().GetNumber(), s)
 *             else:
 */
    try {
      __pyx_t_9->SetActionProb(__pyx_t_8->GetNumber(), __pyx_v_s);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(5, 96, __pyx_L1_error)
    }

    /* "gambit/lib/action.pxi":93
 *         def __set__(self, value):
 *             cdef cxx_string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *                 v = str(value)
 *                 s.assign(v)
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/action.pxi":99
 *                     self.action.deref().GetNumber(), s)
 *             else:
 *                 raise TypeError, "numeric argument required for action " \             # <<<<<<<<<<<<<<
 *                                  "probability"
 * 
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_numeric_argument_required_for_ac, 0, 0);
    __PYX_ERR(5, 99, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/action.pxi":91
 *                 return Rational(py_string)
 * 
 *         def __set__(self, value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             if isinstance(value, (int, decimal.Decimal, fractions.Fraction)):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Action.prob.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":27
 *     "Represents a collection of members of an infoset."
 *     cdef c_GameInfoset infoset
 *     def __len__(self):     return self.infoset.deref().NumMembers()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_7Members_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_7Members_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Members___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_Members *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_7Members___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Members *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 27, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumMembers();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Members.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":28
 *     cdef c_GameInfoset infoset
 *     def __len__(self):     return self.infoset.deref().NumMembers()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Members_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Members_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Members_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Members *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Members_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Members *__pyx_v_self, PyObject *__pyx_v_i) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameInfosetRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameNodeRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/infoset.pxi":29
 *     def __len__(self):     return self.infoset.deref().NumMembers()
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)             # <<<<<<<<<<<<<<
 *         cdef Node n
 *         n = Node()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_i); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_i);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/infoset.pxi":31
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 *         n = Node()             # <<<<<<<<<<<<<<
 *         n.node = self.infoset.deref().GetMember(i+1)
 *         return n
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_n = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/infoset.pxi":32
 *         cdef Node n
 *         n = Node()
 *         n.node = self.infoset.deref().GetMember(i+1)             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 32, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetMember(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(6, 32, __pyx_L1_error)
  }
  __pyx_v_n->node = __pyx_t_10;

  /* "gambit/lib/infoset.pxi":33
 *         n = Node()
 *         n.node = self.infoset.deref().GetMember(i+1)
 *         return n             # <<<<<<<<<<<<<<
 * 
 * cdef class Actions(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":28
 *     cdef c_GameInfoset infoset
 *     def __len__(self):     return self.infoset.deref().NumMembers()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Members.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":39
 *     cdef c_GameInfoset infoset
 * 
 *     def add(self, action=None):             # <<<<<<<<<<<<<<
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Actions_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Actions_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_action = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_action,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_action);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(6, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_action = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(6, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Actions.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Actions_add(((struct __pyx_obj_6gambit_3lib_9libgambit_Actions *)__pyx_v_self), __pyx_v_action);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Actions_add(struct __pyx_obj_6gambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameInfosetRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("add", 0);

  /* "gambit/lib/infoset.pxi":40
 * 
 *     def add(self, action=None):
 *         if action is None:             # <<<<<<<<<<<<<<
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 */
  __pyx_t_1 = (__pyx_v_action == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/infoset.pxi":41
 *     def add(self, action=None):
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)             # <<<<<<<<<<<<<<
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 */
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 41, __pyx_L1_error)
    }
    try {
      __pyx_t_3->InsertAction(((GameObjectPtr<GameActionRep>)NULL));
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(6, 41, __pyx_L1_error)
    }

    /* "gambit/lib/infoset.pxi":40
 * 
 *     def add(self, action=None):
 *         if action is None:             # <<<<<<<<<<<<<<
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/infoset.pxi":42
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/infoset.pxi":43
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("The new action should be from the same infoset")
 *             self.infoset.deref().InsertAction((<Action>action).action)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_infoset); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = ((((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_4)->infoset != __pyx_v_self->infoset) != 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "gambit/lib/infoset.pxi":44
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")             # <<<<<<<<<<<<<<
 *             self.infoset.deref().InsertAction((<Action>action).action)
 *         else:
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 44, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 44, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(6, 44, __pyx_L1_error)

      /* "gambit/lib/infoset.pxi":43
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("The new action should be from the same infoset")
 *             self.infoset.deref().InsertAction((<Action>action).action)
 */
    }

    /* "gambit/lib/infoset.pxi":45
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")
 *             self.infoset.deref().InsertAction((<Action>action).action)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("insert_action takes an Action object as its input")
 */
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 45, __pyx_L1_error)
    }
    try {
      __pyx_t_3->InsertAction(((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_action)->action);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(6, 45, __pyx_L1_error)
    }

    /* "gambit/lib/infoset.pxi":42
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 *         elif isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/infoset.pxi":47
 *             self.infoset.deref().InsertAction((<Action>action).action)
 *         else:
 *             raise TypeError("insert_action takes an Action object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(6, 47, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/infoset.pxi":39
 *     cdef c_GameInfoset infoset
 * 
 *     def add(self, action=None):             # <<<<<<<<<<<<<<
 *         if action is None:
 *             self.infoset.deref().InsertAction(<c_GameAction>NULL)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Actions.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":49
 *             raise TypeError("insert_action takes an Action object as its input")
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, act):
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_7Actions_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_7Actions_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Actions_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_Actions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_7Actions_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_Actions *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 49, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumActions();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Actions.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":50
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 *     def __getitem__(self, act):             # <<<<<<<<<<<<<<
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 *         cdef Action a
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Actions_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_act); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Actions_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_act) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Actions_4__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Actions *)__pyx_v_self), ((PyObject *)__pyx_v_act));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Actions_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Actions *__pyx_v_self, PyObject *__pyx_v_act) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameInfosetRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameActionRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/infoset.pxi":51
 *     def __len__(self):     return self.infoset.deref().NumActions()
 *     def __getitem__(self, act):
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)             # <<<<<<<<<<<<<<
 *         cdef Action a
 *         a = Action()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_act); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_act);
    __Pyx_GIVEREF(__pyx_v_act);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_act);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/infoset.pxi":53
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 *         cdef Action a
 *         a = Action()             # <<<<<<<<<<<<<<
 *         a.action = self.infoset.deref().GetAction(act+1)
 *         return a
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Action), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_a = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/infoset.pxi":54
 *         cdef Action a
 *         a = Action()
 *         a.action = self.infoset.deref().GetAction(act+1)             # <<<<<<<<<<<<<<
 *         return a
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 54, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_act, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(6, 54, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetAction(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(6, 54, __pyx_L1_error)
  }
  __pyx_v_a->action = __pyx_t_10;

  /* "gambit/lib/infoset.pxi":55
 *         a = Action()
 *         a.action = self.infoset.deref().GetAction(act+1)
 *         return a             # <<<<<<<<<<<<<<
 * 
 * cdef class Infoset:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  __pyx_r = ((PyObject *)__pyx_v_a);
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":50
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 *     def __getitem__(self, act):             # <<<<<<<<<<<<<<
 *         if not isinstance(act, int):  return Collection.__getitem__(self, act)
 *         cdef Action a
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Actions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":60
 *     cdef c_GameInfoset infoset
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GamePlayerRep *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  GameRep *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/infoset.pxi":61
 * 
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 */
  __Pyx_XDECREF(__pyx_r);

  /* "gambit/lib/infoset.pxi":62
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 62, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gambit/lib/infoset.pxi":63
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),             # <<<<<<<<<<<<<<
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 63, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 63, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_4->GetLabel().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "gambit/lib/infoset.pxi":64
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Infoset self, other, whichop):
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 64, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetPlayer().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 64, __pyx_L1_error)
  }
  try {
    __pyx_t_6 = __pyx_t_4->GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 64, __pyx_L1_error)
  }
  __pyx_t_7 = __Pyx_PyBytes_FromString(__pyx_t_6->GetTitle().c_str()); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);

  /* "gambit/lib/infoset.pxi":62
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,             # <<<<<<<<<<<<<<
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 */
  __pyx_t_8 = PyTuple_New(4); if (unlikely(!__pyx_t_8)) __PYX_ERR(6, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 2, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_8, 3, __pyx_t_7);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_7 = 0;

  /* "gambit/lib/infoset.pxi":61
 * 
 *     def __repr__(self):
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 *                  self.infoset.deref().GetPlayer().deref().GetLabel().c_str(),
 */
  __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_Infoset_d_s_for_player_s_in_gam, __pyx_t_8); if (unlikely(!__pyx_t_7)) __PYX_ERR(6, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":60
 *     cdef c_GameInfoset infoset
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *          return "<Infoset [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.infoset.deref().GetNumber()-1, self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":66
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Infoset self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Infoset):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(6, 66, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_Infoset, 1, "self", 0))) __PYX_ERR(6, 66, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_2__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameInfosetRep *__pyx_t_4;
  GameInfosetRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/infoset.pxi":67
 * 
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/infoset.pxi":68
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 68, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/infoset.pxi":69
 *         if isinstance(other, Infoset):
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 69, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_other)->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 69, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 69, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/infoset.pxi":68
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/infoset.pxi":70
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/infoset.pxi":71
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 71, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_other)->infoset.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(6, 71, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/infoset.pxi":70
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 *             else:
 */
    }

    /* "gambit/lib/infoset.pxi":73
 *                 return self.infoset.deref() != ((<Infoset>other).infoset).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(6, 73, __pyx_L1_error)
    }

    /* "gambit/lib/infoset.pxi":67
 * 
 *     def __richcmp__(Infoset self, other, whichop):
 *         if isinstance(other, Infoset):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.infoset.deref() == ((<Infoset>other).infoset).deref()
 */
  }

  /* "gambit/lib/infoset.pxi":75
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 75, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/infoset.pxi":76
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/infoset.pxi":75
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/infoset.pxi":77
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 77, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/infoset.pxi":78
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/infoset.pxi":77
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/infoset.pxi":80
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(6, 80, __pyx_L1_error)
    }
  }

  /* "gambit/lib/infoset.pxi":66
 *                  self.infoset.deref().GetPlayer().deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Infoset self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Infoset):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":82
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.infoset.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_7Infoset_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_7Infoset_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_4__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_7Infoset_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/infoset.pxi":83
 * 
 *     def __hash__(self):
 *         return long(<long>self.infoset.deref())             # <<<<<<<<<<<<<<
 * 
 *     def precedes(self, node):
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 83, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(6, 83, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":82
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.infoset.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":85
 *         return long(<long>self.infoset.deref())
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_7precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_7precedes(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("precedes (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_6precedes(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_6precedes(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameInfosetRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("precedes", 0);

  /* "gambit/lib/infoset.pxi":86
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_6gambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/infoset.pxi":87
 *     def precedes(self, node):
 *         if isinstance(node, Node):
 *             return self.infoset.deref().Precedes(((<Node>node).node))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError, "Precedes takes a Node object as its input"
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 87, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3->Precedes(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_node)->node)); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/infoset.pxi":86
 * 
 *     def precedes(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 *         else:
 */
  }

  /* "gambit/lib/infoset.pxi":89
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 *         else:
 *             raise TypeError, "Precedes takes a Node object as its input"             # <<<<<<<<<<<<<<
 * 
 *     def reveal(self, player):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Precedes_takes_a_Node_object_as, 0, 0);
    __PYX_ERR(6, 89, __pyx_L1_error)
  }

  /* "gambit/lib/infoset.pxi":85
 *         return long(<long>self.infoset.deref())
 * 
 *     def precedes(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.infoset.deref().Precedes(((<Node>node).node))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.precedes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":91
 *             raise TypeError, "Precedes takes a Node object as its input"
 * 
 *     def reveal(self, player):             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             self.infoset.deref().Reveal((<Player>player).player)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_9reveal(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_9reveal(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("reveal (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_8reveal(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_8reveal(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameInfosetRep *__pyx_t_3;
  __Pyx_RefNannySetupContext("reveal", 0);

  /* "gambit/lib/infoset.pxi":92
 * 
 *     def reveal(self, player):
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             self.infoset.deref().Reveal((<Player>player).player)
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/infoset.pxi":93
 *     def reveal(self, player):
 *         if isinstance(player, Player):
 *             self.infoset.deref().Reveal((<Player>player).player)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError, "Reveal takes a Player object as its input"
 */
    try {
      __pyx_t_3 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 93, __pyx_L1_error)
    }
    __pyx_t_3->Reveal(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player)->player);

    /* "gambit/lib/infoset.pxi":92
 * 
 *     def reveal(self, player):
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             self.infoset.deref().Reveal((<Player>player).player)
 *         else:
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/infoset.pxi":95
 *             self.infoset.deref().Reveal((<Player>player).player)
 *         else:
 *             raise TypeError, "Reveal takes a Player object as its input"             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Reveal_takes_a_Player_object_as, 0, 0);
    __PYX_ERR(6, 95, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/infoset.pxi":91
 *             raise TypeError, "Precedes takes a Node object as its input"
 * 
 *     def reveal(self, player):             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             self.infoset.deref().Reveal((<Player>player).player)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.reveal", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":98
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameInfosetRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/infoset.pxi":100
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.infoset.deref().GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/infoset.pxi":101
 *             cdef Game g
 *             g = Game()
 *             g.game = self.infoset.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 101, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "gambit/lib/infoset.pxi":102
 *             g = Game()
 *             g.game = self.infoset.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":98
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":105
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_5label___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/infoset.pxi":106
 *     property label:
 *         def __get__(self):
 *             return self.infoset.deref().GetLabel().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 106, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetLabel().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":105
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":107
 *         def __get__(self):
 *             return self.infoset.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_7Infoset_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_7Infoset_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(6, 107, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_5label_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_7Infoset_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/infoset.pxi":109
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.infoset.deref().SetLabel(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/infoset.pxi":110
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.infoset.deref().SetLabel(s)             # <<<<<<<<<<<<<<
 * 
 *     property is_chance:
 */
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 110, __pyx_L1_error)
  }
  __pyx_t_1->SetLabel(__pyx_v_s);

  /* "gambit/lib/infoset.pxi":107
 *         def __get__(self):
 *             return self.infoset.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":113
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().IsChanceInfoset()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_9is_chance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_9is_chance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_9is_chance___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_9is_chance___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameInfosetRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/infoset.pxi":114
 *     property is_chance:
 *         def __get__(self):
 *             return self.infoset.deref().IsChanceInfoset()             # <<<<<<<<<<<<<<
 * 
 *     property actions:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 114, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsChanceInfoset()); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":113
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.infoset.deref().IsChanceInfoset()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.is_chance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":117
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Actions a
 *             a = Actions()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_7actions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_7actions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_7actions___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_7actions___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Actions *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameInfosetRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/infoset.pxi":119
 *         def __get__(self):
 *             cdef Actions a
 *             a = Actions()             # <<<<<<<<<<<<<<
 *             a.infoset = self.infoset
 *             return a
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Actions), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_a = ((struct __pyx_obj_6gambit_3lib_9libgambit_Actions *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/infoset.pxi":120
 *             cdef Actions a
 *             a = Actions()
 *             a.infoset = self.infoset             # <<<<<<<<<<<<<<
 *             return a
 * 
 */
  __pyx_t_2 = __pyx_v_self->infoset;
  __pyx_v_a->infoset = __pyx_t_2;

  /* "gambit/lib/infoset.pxi":121
 *             a = Actions()
 *             a.infoset = self.infoset
 *             return a             # <<<<<<<<<<<<<<
 * 
 *     property members:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  __pyx_r = ((PyObject *)__pyx_v_a);
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":117
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Actions a
 *             a = Actions()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.actions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":124
 * 
 *     property members:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Members m
 *             m = Members()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_7members_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_7members_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_7members___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_7members___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Members *__pyx_v_m = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameInfosetRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/infoset.pxi":126
 *         def __get__(self):
 *             cdef Members m
 *             m = Members()             # <<<<<<<<<<<<<<
 *             m.infoset = self.infoset
 *             return m
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Members), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_m = ((struct __pyx_obj_6gambit_3lib_9libgambit_Members *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/infoset.pxi":127
 *             cdef Members m
 *             m = Members()
 *             m.infoset = self.infoset             # <<<<<<<<<<<<<<
 *             return m
 * 
 */
  __pyx_t_2 = __pyx_v_self->infoset;
  __pyx_v_m->infoset = __pyx_t_2;

  /* "gambit/lib/infoset.pxi":128
 *             m = Members()
 *             m.infoset = self.infoset
 *             return m             # <<<<<<<<<<<<<<
 * 
 *     property player:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_m));
  __pyx_r = ((PyObject *)__pyx_v_m);
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":124
 * 
 *     property members:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Members m
 *             m = Members()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.members.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_m);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":131
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_6player_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Infoset_6player_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_6player___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Infoset_6player___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameInfosetRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/infoset.pxi":132
 *     property player:
 *         def __get__(self):
 *             p = Player()             # <<<<<<<<<<<<<<
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Player), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/infoset.pxi":133
 *         def __get__(self):
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()             # <<<<<<<<<<<<<<
 *             return p
 *         def __set__(self, player):
 */
  try {
    __pyx_t_2 = __pyx_v_self->infoset.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(6, 133, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_2->GetPlayer();

  /* "gambit/lib/infoset.pxi":134
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p             # <<<<<<<<<<<<<<
 *         def __set__(self, player):
 *             if not isinstance(player, Player):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "gambit/lib/infoset.pxi":131
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.player = self.infoset.deref().GetPlayer()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.player.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/infoset.pxi":135
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p
 *         def __set__(self, player):             # <<<<<<<<<<<<<<
 *             if not isinstance(player, Player):
 *                 raise TypeError, "type Player required for setting player at an infoset"
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_7Infoset_6player_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_7Infoset_6player_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Infoset_6player_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_7Infoset_6player_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_self, PyObject *__pyx_v_player) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameInfosetRep *__pyx_t_6;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/infoset.pxi":136
 *             return p
 *         def __set__(self, player):
 *             if not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *                 raise TypeError, "type Player required for setting player at an infoset"
 *             elif player.game != self.game:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/infoset.pxi":137
 *         def __set__(self, player):
 *             if not isinstance(player, Player):
 *                 raise TypeError, "type Player required for setting player at an infoset"             # <<<<<<<<<<<<<<
 *             elif player.game != self.game:
 *                 raise MismatchError, "player at an infoset must belong to the same game"
 */
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_type_Player_required_for_setting, 0, 0);
    __PYX_ERR(6, 137, __pyx_L1_error)

    /* "gambit/lib/infoset.pxi":136
 *             return p
 *         def __set__(self, player):
 *             if not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *                 raise TypeError, "type Player required for setting player at an infoset"
 *             elif player.game != self.game:
 */
  }

  /* "gambit/lib/infoset.pxi":138
 *             if not isinstance(player, Player):
 *                 raise TypeError, "type Player required for setting player at an infoset"
 *             elif player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError, "player at an infoset must belong to the same game"
 *             else:
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(6, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(6, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(6, 138, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/infoset.pxi":139
 *                 raise TypeError, "type Player required for setting player at an infoset"
 *             elif player.game != self.game:
 *                 raise MismatchError, "player at an infoset must belong to the same game"             # <<<<<<<<<<<<<<
 *             else:
 *                 self.infoset.deref().SetPlayer((<Player>player).player)
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_5)) __PYX_ERR(6, 139, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_Raise(__pyx_t_5, __pyx_kp_s_player_at_an_infoset_must_belong, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(6, 139, __pyx_L1_error)

    /* "gambit/lib/infoset.pxi":138
 *             if not isinstance(player, Player):
 *                 raise TypeError, "type Player required for setting player at an infoset"
 *             elif player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError, "player at an infoset must belong to the same game"
 *             else:
 */
  }

  /* "gambit/lib/infoset.pxi":141
 *                 raise MismatchError, "player at an infoset must belong to the same game"
 *             else:
 *                 self.infoset.deref().SetPlayer((<Player>player).player)             # <<<<<<<<<<<<<<
 */
  /*else*/ {
    try {
      __pyx_t_6 = __pyx_v_self->infoset.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(6, 141, __pyx_L1_error)
    }
    try {
      __pyx_t_6->SetPlayer(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player)->player);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(6, 141, __pyx_L1_error)
    }
  }

  /* "gambit/lib/infoset.pxi":135
 *             p.player = self.infoset.deref().GetPlayer()
 *             return p
 *         def __set__(self, player):             # <<<<<<<<<<<<<<
 *             if not isinstance(player, Player):
 *                 raise TypeError, "type Player required for setting player at an infoset"
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infoset.player.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":28
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/strategy.pxi":29
 * 
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.number, self.label,
 *                  self.player.label,
 */
  __Pyx_XDECREF(__pyx_r);

  /* "gambit/lib/strategy.pxi":30
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,             # <<<<<<<<<<<<<<
 *                  self.player.label,
 *                  self.player.game.title)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gambit/lib/strategy.pxi":31
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,
 *                  self.player.label,             # <<<<<<<<<<<<<<
 *                  self.player.game.title)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_label); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/strategy.pxi":32
 *                 (self.number, self.label,
 *                  self.player.label,
 *                  self.player.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Strategy self, other, whichop):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_title); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "gambit/lib/strategy.pxi":30
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,             # <<<<<<<<<<<<<<
 *                  self.player.label,
 *                  self.player.game.title)
 */
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_3 = 0;

  /* "gambit/lib/strategy.pxi":29
 * 
 *     def __repr__(self):
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \             # <<<<<<<<<<<<<<
 *                 (self.number, self.label,
 *                  self.player.label,
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Strategy_d_s_for_player_s_in_ga, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/strategy.pxi":28
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Strategy [%d] '%s' for player '%s' in game '%s'>" % \
 *                 (self.number, self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":34
 *                  self.player.game.title)
 * 
 *     def __richcmp__(Strategy self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Strategy):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(7, 34, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "self", 0))) __PYX_ERR(7, 34, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy_2__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameStrategyRep *__pyx_t_4;
  GameStrategyRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/strategy.pxi":35
 * 
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/strategy.pxi":36
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 36, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/strategy.pxi":37
 *         if isinstance(other, Strategy):
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 37, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_other)->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 37, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 37, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/strategy.pxi":36
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/strategy.pxi":38
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 38, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/strategy.pxi":39
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 39, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_other)->strategy.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(7, 39, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 39, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/strategy.pxi":38
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 *             else:
 */
    }

    /* "gambit/lib/strategy.pxi":41
 *                 return self.strategy.deref() != ((<Strategy>other).strategy).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(7, 41, __pyx_L1_error)
    }

    /* "gambit/lib/strategy.pxi":35
 * 
 *     def __richcmp__(Strategy self, other, whichop):
 *         if isinstance(other, Strategy):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.strategy.deref() == ((<Strategy>other).strategy).deref()
 */
  }

  /* "gambit/lib/strategy.pxi":43
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/strategy.pxi":44
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/strategy.pxi":43
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/strategy.pxi":45
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/strategy.pxi":46
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/strategy.pxi":45
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/strategy.pxi":48
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(7, 48, __pyx_L1_error)
    }
  }

  /* "gambit/lib/strategy.pxi":34
 *                  self.player.game.title)
 * 
 *     def __richcmp__(Strategy self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Strategy):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":50
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.strategy.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_8Strategy_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_8Strategy_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy_4__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_8Strategy_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameStrategyRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/strategy.pxi":51
 * 
 *     def __hash__(self):
 *         return long(<long>self.strategy.deref())             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  try {
    __pyx_t_1 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 51, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 51, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(7, 51, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/strategy.pxi":50
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.strategy.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":54
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy_5label___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameStrategyRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/strategy.pxi":55
 *     property label:
 *         def __get__(self):
 *             return self.strategy.deref().GetLabel().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 55, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetLabel().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/strategy.pxi":54
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":56
 *         def __get__(self):
 *             return self.strategy.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_8Strategy_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_8Strategy_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(7, 56, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy_5label_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_8Strategy_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  GameStrategyRep *__pyx_t_9;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/strategy.pxi":57
 *             return self.strategy.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.player.strategies ]:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/strategy.pxi":58
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             if value in [ i.label for i in self.player.strategies ]:
 *                 warnings.warn("This player has another strategy with an identical label")
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__6, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 58, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(7, 58, __pyx_L1_error)

    /* "gambit/lib/strategy.pxi":57
 *             return self.strategy.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.player.strategies ]:
 */
  }

  /* "gambit/lib/strategy.pxi":59
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.player.strategies ]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("This player has another strategy with an identical label")
 *             cdef cxx_string s
 */
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strategies); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(7, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(7, 59, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(7, 59, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 59, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(7, 59, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 59, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(7, 59, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(7, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(7, 59, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(7, 59, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/strategy.pxi":60
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.player.strategies ]:
 *                 warnings.warn("This player has another strategy with an identical label")             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(7, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(7, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/strategy.pxi":59
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.player.strategies ]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("This player has another strategy with an identical label")
 *             cdef cxx_string s
 */
  }

  /* "gambit/lib/strategy.pxi":62
 *                 warnings.warn("This player has another strategy with an identical label")
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.strategy.deref().SetLabel(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/strategy.pxi":63
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.strategy.deref().SetLabel(s)             # <<<<<<<<<<<<<<
 * 
 *     property player:
 */
  try {
    __pyx_t_9 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 63, __pyx_L1_error)
  }
  __pyx_t_9->SetLabel(__pyx_v_s);

  /* "gambit/lib/strategy.pxi":56
 *         def __get__(self):
 *             return self.strategy.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":66
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.restriction = self.restriction
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_6player_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_6player_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy_6player___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_6player___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameStrategyRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/strategy.pxi":67
 *     property player:
 *         def __get__(self):
 *             p = Player()             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *             p.player = self.strategy.deref().GetPlayer()
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Player), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/strategy.pxi":68
 *         def __get__(self):
 *             p = Player()
 *             p.restriction = self.restriction             # <<<<<<<<<<<<<<
 *             p.player = self.strategy.deref().GetPlayer()
 *             return p
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_p->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
  __pyx_v_p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/strategy.pxi":69
 *             p = Player()
 *             p.restriction = self.restriction
 *             p.player = self.strategy.deref().GetPlayer()             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 69, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_2->GetPlayer();

  /* "gambit/lib/strategy.pxi":70
 *             p.restriction = self.restriction
 *             p.player = self.strategy.deref().GetPlayer()
 *             return p             # <<<<<<<<<<<<<<
 * 
 *     property number:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "gambit/lib/strategy.pxi":66
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             p = Player()
 *             p.restriction = self.restriction
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.player.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":73
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetNumber() - 1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_6number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_6number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy_6number___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_6number___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameStrategyRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/strategy.pxi":74
 *     property number:
 *         def __get__(self):
 *             return self.strategy.deref().GetNumber() - 1             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->strategy.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(7, 74, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/strategy.pxi":73
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.strategy.deref().GetNumber() - 1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/strategy.pxi":76
 *             return self.strategy.deref().GetNumber() - 1
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Strategy_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Strategy_6unrestrict(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Strategy_6unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameStrategyRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "gambit/lib/strategy.pxi":78
 *     def unrestrict(self):
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.strategy
 *         return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/strategy.pxi":79
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.strategy             # <<<<<<<<<<<<<<
 *         return s
 */
  __pyx_t_2 = __pyx_v_self->strategy;
  __pyx_v_s->strategy = __pyx_t_2;

  /* "gambit/lib/strategy.pxi":80
 *         s = Strategy()
 *         s.strategy = self.strategy
 *         return s             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/strategy.pxi":76
 *             return self.strategy.deref().GetNumber() - 1
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategy.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":27
 *     "Represents a collection of infosets for a player."
 *     cdef c_GamePlayer player
 *     def __len__(self):    return self.player.deref().NumInfosets()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, iset):
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_8Infosets_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_8Infosets_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Infosets___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_8Infosets___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 27, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumInfosets();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Infosets.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":28
 *     cdef c_GamePlayer player
 *     def __len__(self):    return self.player.deref().NumInfosets()
 *     def __getitem__(self, iset):             # <<<<<<<<<<<<<<
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 *         cdef Infoset s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Infosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_iset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Infosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_iset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Infosets_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *)__pyx_v_self), ((PyObject *)__pyx_v_iset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Infosets_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *__pyx_v_self, PyObject *__pyx_v_iset) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GamePlayerRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameInfosetRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/player.pxi":29
 *     def __len__(self):    return self.player.deref().NumInfosets()
 *     def __getitem__(self, iset):
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)             # <<<<<<<<<<<<<<
 *         cdef Infoset s
 *         s = Infoset()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_iset); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_iset);
    __Pyx_GIVEREF(__pyx_v_iset);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_iset);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/player.pxi":31
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 *         cdef Infoset s
 *         s = Infoset()             # <<<<<<<<<<<<<<
 *         s.infoset = self.player.deref().GetInfoset(iset+1)
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/player.pxi":32
 *         cdef Infoset s
 *         s = Infoset()
 *         s.infoset = self.player.deref().GetInfoset(iset+1)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 32, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_iset, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetInfoset(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(8, 32, __pyx_L1_error)
  }
  __pyx_v_s->infoset = __pyx_t_10;

  /* "gambit/lib/player.pxi":33
 *         s = Infoset()
 *         s.infoset = self.player.deref().GetInfoset(iset+1)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class Strategies(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":28
 *     cdef c_GamePlayer player
 *     def __len__(self):    return self.player.deref().NumInfosets()
 *     def __getitem__(self, iset):             # <<<<<<<<<<<<<<
 *         if not isinstance(iset, int):  return Collection.__getitem__(self, iset)
 *         cdef Infoset s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Infosets.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":39
 *     cdef c_GamePlayer player
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Strategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Strategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(8, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_10Strategies_add(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Strategies_add(struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_label) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("add", 0);

  /* "gambit/lib/player.pxi":41
 *     def add(self, label=""):
 *         cdef Game g
 *         g = Game()             # <<<<<<<<<<<<<<
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/player.pxi":42
 *         cdef Game g
 *         g = Game()
 *         g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *         if g.is_tree:
 *             raise TypeError, "Adding strategies is only applicable to games in strategic form"
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 42, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "gambit/lib/player.pxi":43
 *         g = Game()
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Adding strategies is only applicable to games in strategic form"
 *         cdef Strategy s
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_g), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(8, 43, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "gambit/lib/player.pxi":44
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:
 *             raise TypeError, "Adding strategies is only applicable to games in strategic form"             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_Adding_strategies_is_only_applic, 0, 0);
    __PYX_ERR(8, 44, __pyx_L1_error)

    /* "gambit/lib/player.pxi":43
 *         g = Game()
 *         g.game = self.player.deref().GetGame()
 *         if g.is_tree:             # <<<<<<<<<<<<<<
 *             raise TypeError, "Adding strategies is only applicable to games in strategic form"
 *         cdef Strategy s
 */
  }

  /* "gambit/lib/player.pxi":46
 *             raise TypeError, "Adding strategies is only applicable to games in strategic form"
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.player.deref().NewStrategy()
 *         s.label = str(label)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 46, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/player.pxi":47
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.player.deref().NewStrategy()             # <<<<<<<<<<<<<<
 *         s.label = str(label)
 *         return s
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 47, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_2->NewStrategy();

  /* "gambit/lib/player.pxi":48
 *         s = Strategy()
 *         s.strategy = self.player.deref().NewStrategy()
 *         s.label = str(label)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_label);
  __Pyx_GIVEREF(__pyx_v_label);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_label);
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_s), __pyx_n_s_label, __pyx_t_4) < 0) __PYX_ERR(8, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gambit/lib/player.pxi":49
 *         s.strategy = self.player.deref().NewStrategy()
 *         s.label = str(label)
 *         return s             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":39
 *     cdef c_GamePlayer player
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":51
 *         return s
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_10Strategies_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_10Strategies_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_10Strategies_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_10Strategies_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 51, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumStrategies();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategies.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":52
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Strategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_10Strategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_10Strategies_4__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *)__pyx_v_self), ((PyObject *)__pyx_v_st));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_10Strategies_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *__pyx_v_self, PyObject *__pyx_v_st) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GamePlayerRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameStrategyRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/player.pxi":53
 *     def __len__(self):    return self.player.deref().NumStrategies()
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_st); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_st);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/player.pxi":55
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.player.deref().GetStrategy(st+1)
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/player.pxi":56
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.player.deref().GetStrategy(st+1)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 56, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 56, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetStrategy(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(8, 56, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_10;

  /* "gambit/lib/player.pxi":57
 *         s = Strategy()
 *         s.strategy = self.player.deref().GetStrategy(st+1)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class PlayerSupportStrategies(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":52
 * 
 *     def __len__(self):    return self.player.deref().NumStrategies()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):  return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Strategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":64
 *     cdef StrategicRestriction restriction
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Adding strategies is only applicable"\
 *                                       "to players in a game, not in a restriction")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_1add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_label = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(8, 64, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 64, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.PlayerSupportStrategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_add(((struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_add(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("add", 0);

  /* "gambit/lib/player.pxi":65
 * 
 *     def add(self, label=""):
 *         raise UndefinedOperationError("Adding strategies is only applicable"\             # <<<<<<<<<<<<<<
 *                                       "to players in a game, not in a restriction")
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(8, 65, __pyx_L1_error)

  /* "gambit/lib/player.pxi":64
 *     cdef StrategicRestriction restriction
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Adding strategies is only applicable"\
 *                                       "to players in a game, not in a restriction")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.PlayerSupportStrategies.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":68
 *                                       "to players in a game, not in a restriction")
 * 
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *         self.player = player
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_restriction,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_restriction)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(8, 68, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(8, 68, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_player = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)values[0]);
    __pyx_v_restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(8, 68, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.PlayerSupportStrategies.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_6gambit_3lib_9libgambit_Player, 0, "player", 0))) __PYX_ERR(8, 68, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_restriction), __pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction, 0, "restriction", 0))) __PYX_ERR(8, 68, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_2__init__(((struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self), __pyx_v_player, __pyx_v_restriction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_2__init__(struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player, struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/player.pxi":69
 * 
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):
 *         self.restriction = restriction             # <<<<<<<<<<<<<<
 *         self.player = player
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GOTREF(__pyx_v_self->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->restriction));
  __pyx_v_self->restriction = __pyx_v_restriction;

  /* "gambit/lib/player.pxi":70
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):
 *         self.restriction = restriction
 *         self.player = player             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_player));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_player));
  __Pyx_GOTREF(__pyx_v_self->player);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->player));
  __pyx_v_self->player = __pyx_v_player;

  /* "gambit/lib/player.pxi":68
 *                                       "to players in a game, not in a restriction")
 * 
 *     def __init__(self, Player player not None, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *         self.player = player
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":72
 *         self.player = player
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_4__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_4__len__(struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/player.pxi":73
 * 
 *     def __len__(self):
 *         return self.restriction.num_strategies_player(self.player.number)             # <<<<<<<<<<<<<<
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->restriction), __pyx_n_s_num_strategies_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->player), __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_6 = __Pyx_PyIndex_AsSsize_t(__pyx_t_1); if (unlikely((__pyx_t_6 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(8, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_6;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":72
 *         self.player = player
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.PlayerSupportStrategies.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":74
 *     def __len__(self):
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_6__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_v_self), ((PyObject *)__pyx_v_strat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23PlayerSupportStrategies_6__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_self, PyObject *__pyx_v_strat) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameStrategyRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/player.pxi":75
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Strategy s
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_strat); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/player.pxi":76
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(8, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_strat);
    __Pyx_GIVEREF(__pyx_v_strat);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_strat);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 76, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/player.pxi":75
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Strategy s
 */
  }

  /* "gambit/lib/player.pxi":78
 *             return Collection.__getitem__(self, strat)
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)
 *         s.restriction = self.restriction
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 78, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/player.pxi":79
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)             # <<<<<<<<<<<<<<
 *         s.restriction = self.restriction
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->player), __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_strat, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 79, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_t_10 = __pyx_v_self->restriction->support->GetStrategy(__pyx_t_8, __pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(8, 79, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_10;

  /* "gambit/lib/player.pxi":80
 *         s = Strategy()
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)
 *         s.restriction = self.restriction             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __Pyx_GOTREF(__pyx_v_s->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_s->restriction));
  __pyx_v_s->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "gambit/lib/player.pxi":81
 *         s.strategy = self.restriction.support.GetStrategy(self.player.number+1, strat+1)
 *         s.restriction = self.restriction
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class Player:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":74
 *     def __len__(self):
 *         return self.restriction.num_strategies_player(self.player.number)
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.PlayerSupportStrategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":87
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/player.pxi":88
 * 
 *     def __repr__(self):
 *         if self.is_chance:             # <<<<<<<<<<<<<<
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_chance); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 88, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/player.pxi":89
 *     def __repr__(self):
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title             # <<<<<<<<<<<<<<
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 *                                                     self.label,
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_title); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Player_CHANCE_in_game_s, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gambit/lib/player.pxi":88
 * 
 *     def __repr__(self):
 *         if self.is_chance:             # <<<<<<<<<<<<<<
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 */
  }

  /* "gambit/lib/player.pxi":90
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,             # <<<<<<<<<<<<<<
 *                                                     self.label,
 *                                                     self.game.title)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gambit/lib/player.pxi":91
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 *                                                     self.label,             # <<<<<<<<<<<<<<
 *                                                     self.game.title)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gambit/lib/player.pxi":92
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,
 *                                                     self.label,
 *                                                     self.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Player self, other, whichop):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_title); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gambit/lib/player.pxi":90
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 *         return "<Player [%d] '%s' in game '%s'>" % (self.number,             # <<<<<<<<<<<<<<
 *                                                     self.label,
 *                                                     self.game.title)
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Player_d_s_in_game_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":87
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         if self.is_chance:
 *             return "<Player [CHANCE] in game '%s'>" % self.game.title
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":94
 *                                                     self.game.title)
 * 
 *     def __richcmp__(Player self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Player):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(8, 94, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_Player, 1, "self", 0))) __PYX_ERR(8, 94, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_2__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GamePlayerRep *__pyx_t_4;
  GamePlayerRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/player.pxi":95
 * 
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/player.pxi":96
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/player.pxi":97
 *         if isinstance(other, Player):
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.player.deref() != ((<Player>other).player).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 97, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_other)->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 97, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/player.pxi":96
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/player.pxi":98
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() != ((<Player>other).player).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/player.pxi":99
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:
 *                 return self.player.deref() != ((<Player>other).player).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 99, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_other)->player.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(8, 99, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/player.pxi":98
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.player.deref() != ((<Player>other).player).deref()
 *             else:
 */
    }

    /* "gambit/lib/player.pxi":101
 *                 return self.player.deref() != ((<Player>other).player).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(8, 101, __pyx_L1_error)
    }

    /* "gambit/lib/player.pxi":95
 * 
 *     def __richcmp__(Player self, other, whichop):
 *         if isinstance(other, Player):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.player.deref() == ((<Player>other).player).deref()
 */
  }

  /* "gambit/lib/player.pxi":103
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/player.pxi":104
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/player.pxi":103
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/player.pxi":105
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 105, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 105, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/player.pxi":106
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/player.pxi":105
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/player.pxi":108
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(8, 108, __pyx_L1_error)
    }
  }

  /* "gambit/lib/player.pxi":94
 *                                                     self.game.title)
 * 
 *     def __richcmp__(Player self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Player):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":110
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.player.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_6Player_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_6Player_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_4__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_6Player_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/player.pxi":111
 * 
 *     def __hash__(self):
 *         return long(<long>self.player.deref())             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 111, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(8, 111, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":110
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.player.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":114
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GamePlayerRep *__pyx_t_4;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":116
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/player.pxi":117
 *             cdef Game g
 *             if self.restriction is not None:
 *                 return self.restriction             # <<<<<<<<<<<<<<
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
    __pyx_r = ((PyObject *)__pyx_v_self->restriction);
    goto __pyx_L0;

    /* "gambit/lib/player.pxi":116
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  }

  /* "gambit/lib/player.pxi":118
 *             if self.restriction is not None:
 *                 return self.restriction
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.player.deref().GetGame()
 *             return g
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/player.pxi":119
 *                 return self.restriction
 *             g = Game()
 *             g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 119, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_4->GetGame();

  /* "gambit/lib/player.pxi":120
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":114
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":123
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetLabel().c_str()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_5label___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":124
 *     property label:
 *         def __get__(self):
 *             return self.player.deref().GetLabel().c_str()             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, char *value):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 124, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetLabel().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":123
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetLabel().c_str()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":126
 *             return self.player.deref().GetLabel().c_str()
 * 
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_6Player_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_6Player_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(8, 126, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_5label_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_6Player_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  GamePlayerRep *__pyx_t_9;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/player.pxi":127
 * 
 *         def __set__(self, char *value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/player.pxi":128
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             # check to see if the player's name has been used elsewhere
 *             if value in [ i.label for i in self.game.players ]:
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 128, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(8, 128, __pyx_L1_error)

    /* "gambit/lib/player.pxi":127
 * 
 *         def __set__(self, char *value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 */
  }

  /* "gambit/lib/player.pxi":130
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 *             if value in [ i.label for i in self.game.players ]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another player with an identical label exists")
 *             cdef cxx_string s
 */
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(8, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(8, 130, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(8, 130, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 130, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(8, 130, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 130, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(8, 130, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 130, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(8, 130, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(8, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/player.pxi":131
 *             # check to see if the player's name has been used elsewhere
 *             if value in [ i.label for i in self.game.players ]:
 *                 warnings.warn("Another player with an identical label exists")             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/player.pxi":130
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             # check to see if the player's name has been used elsewhere
 *             if value in [ i.label for i in self.game.players ]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another player with an identical label exists")
 *             cdef cxx_string s
 */
  }

  /* "gambit/lib/player.pxi":133
 *                 warnings.warn("Another player with an identical label exists")
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.player.deref().SetLabel(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/player.pxi":134
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.player.deref().SetLabel(s)             # <<<<<<<<<<<<<<
 * 
 *     property number:
 */
  try {
    __pyx_t_9 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 134, __pyx_L1_error)
  }
  __pyx_t_9->SetLabel(__pyx_v_s);

  /* "gambit/lib/player.pxi":126
 *             return self.player.deref().GetLabel().c_str()
 * 
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":137
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetNumber() - 1
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_6number_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_6number_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_6number___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_6number___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":138
 *     property number:
 *         def __get__(self):
 *             return self.player.deref().GetNumber() - 1             # <<<<<<<<<<<<<<
 * 
 *     property is_chance:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 138, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":137
 * 
 *     property number:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.player.deref().GetNumber() - 1
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.number.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":141
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.player.deref().IsChance() != 0 else False
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_9is_chance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_9is_chance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_9is_chance___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_9is_chance___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":142
 *     property is_chance:
 *         def __get__(self):
 *             return True if self.player.deref().IsChance() != 0 else False             # <<<<<<<<<<<<<<
 * 
 *     property strategies:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 142, __pyx_L1_error)
  }
  if (((__pyx_t_2->IsChance() != 0) != 0)) {
    __Pyx_INCREF(Py_True);
    __pyx_t_1 = Py_True;
  } else {
    __Pyx_INCREF(Py_False);
    __pyx_t_1 = Py_False;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":141
 * 
 *     property is_chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.player.deref().IsChance() != 0 else False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.is_chance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":145
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_10strategies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_10strategies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_10strategies___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_10strategies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *__pyx_v_s = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *__pyx_v_ps = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  GameObjectPtr<GamePlayerRep> __pyx_t_5;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":148
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/player.pxi":149
 *             cdef PlayerSupportStrategies ps
 *             if self.restriction is not None:
 *                 ps = PlayerSupportStrategies(self, self.restriction)             # <<<<<<<<<<<<<<
 *                 return ps
 *             s = Strategies()
 */
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->restriction));
    PyTuple_SET_ITEM(__pyx_t_3, 1, ((PyObject *)__pyx_v_self->restriction));
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_PlayerSupportStrategies), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_v_ps = ((struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/player.pxi":150
 *             if self.restriction is not None:
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps             # <<<<<<<<<<<<<<
 *             s = Strategies()
 *             s.player = self.player
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_ps));
    __pyx_r = ((PyObject *)__pyx_v_ps);
    goto __pyx_L0;

    /* "gambit/lib/player.pxi":148
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps
 */
  }

  /* "gambit/lib/player.pxi":151
 *                 ps = PlayerSupportStrategies(self, self.restriction)
 *                 return ps
 *             s = Strategies()             # <<<<<<<<<<<<<<
 *             s.player = self.player
 *             return s
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategies), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "gambit/lib/player.pxi":152
 *                 return ps
 *             s = Strategies()
 *             s.player = self.player             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_5 = __pyx_v_self->player;
  __pyx_v_s->player = __pyx_t_5;

  /* "gambit/lib/player.pxi":153
 *             s = Strategies()
 *             s.player = self.player
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property infosets:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":145
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Strategies s
 *             cdef PlayerSupportStrategies ps
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.strategies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF((PyObject *)__pyx_v_ps);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":156
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infosets s
 *             s = Infosets()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_8infosets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_8infosets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_8infosets___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_8infosets___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GamePlayerRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":158
 *         def __get__(self):
 *             cdef Infosets s
 *             s = Infosets()             # <<<<<<<<<<<<<<
 *             s.player = self.player
 *             return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infosets), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/player.pxi":159
 *             cdef Infosets s
 *             s = Infosets()
 *             s.player = self.player             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_2 = __pyx_v_self->player;
  __pyx_v_s->player = __pyx_t_2;

  /* "gambit/lib/player.pxi":160
 *             s = Infosets()
 *             s.player = self.player
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property min_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":156
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infosets s
 *             s = Infosets()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.infosets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":163
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             cdef cxx_string s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_10min_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_10min_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_10min_payoff___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_10min_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":166
 *             cdef Game g
 *             cdef cxx_string s
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.player.deref().GetGame()
 *             s = rat_str(g.game.deref().GetMinPayoff(self.number + 1))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/player.pxi":167
 *             cdef cxx_string s
 *             g = Game()
 *             g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *             s = rat_str(g.game.deref().GetMinPayoff(self.number + 1))
 *             return Rational(s.c_str())
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 167, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "gambit/lib/player.pxi":168
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 *             s = rat_str(g.game.deref().GetMinPayoff(self.number + 1))             # <<<<<<<<<<<<<<
 *             return Rational(s.c_str())
 * 
 */
  try {
    __pyx_t_3 = __pyx_v_g->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 168, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 168, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_s = lexical_cast<std::string>(__pyx_t_3->GetMinPayoff(__pyx_t_5));

  /* "gambit/lib/player.pxi":169
 *             g.game = self.player.deref().GetGame()
 *             s = rat_str(g.game.deref().GetMinPayoff(self.number + 1))
 *             return Rational(s.c_str())             # <<<<<<<<<<<<<<
 * 
 *     property max_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_s.c_str()); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 169, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(8, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":163
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             cdef cxx_string s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.min_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":172
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             cdef cxx_string s
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_10max_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_10max_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_10max_payoff___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_10max_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/player.pxi":175
 *             cdef Game g
 *             cdef cxx_string s
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.player.deref().GetGame()
 *             s = rat_str(g.game.deref().GetMaxPayoff(self.number + 1))
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/player.pxi":176
 *             cdef cxx_string s
 *             g = Game()
 *             g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *             s = rat_str(g.game.deref().GetMaxPayoff(self.number + 1))
 *             return Rational(s.c_str())
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 176, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "gambit/lib/player.pxi":177
 *             g = Game()
 *             g.game = self.player.deref().GetGame()
 *             s = rat_str(g.game.deref().GetMaxPayoff(self.number + 1))             # <<<<<<<<<<<<<<
 *             return Rational(s.c_str())
 * 
 */
  try {
    __pyx_t_3 = __pyx_v_g->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 177, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_1, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 177, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(8, 177, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_s = lexical_cast<std::string>(__pyx_t_3->GetMaxPayoff(__pyx_t_5));

  /* "gambit/lib/player.pxi":178
 *             g.game = self.player.deref().GetGame()
 *             s = rat_str(g.game.deref().GetMaxPayoff(self.number + 1))
 *             return Rational(s.c_str())             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = __Pyx_PyBytes_FromString(__pyx_v_s.c_str()); if (unlikely(!__pyx_t_6)) __PYX_ERR(8, 178, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 178, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(8, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":172
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             cdef cxx_string s
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.max_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/player.pxi":180
 *             return Rational(s.c_str())
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_6Player_7unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_6Player_6unrestrict(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_6Player_6unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GamePlayerRep *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "gambit/lib/player.pxi":182
 *     def unrestrict(self):
 *         cdef Game g
 *         g = Game()             # <<<<<<<<<<<<<<
 *         g.game = self.player.deref().GetGame()
 *         return g.players[self.number]
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 182, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/player.pxi":183
 *         cdef Game g
 *         g = Game()
 *         g.game = self.player.deref().GetGame()             # <<<<<<<<<<<<<<
 *         return g.players[self.number]
 */
  try {
    __pyx_t_2 = __pyx_v_self->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(8, 183, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "gambit/lib/player.pxi":184
 *         g = Game()
 *         g.game = self.player.deref().GetGame()
 *         return g.players[self.number]             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_g), __pyx_n_s_players); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(8, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_GetItem(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(8, 184, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "gambit/lib/player.pxi":180
 *             return Rational(s.c_str())
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Player.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":26
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameOutcomeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/outcome.pxi":27
 * 
 *     def __repr__(self):
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,             # <<<<<<<<<<<<<<
 *                                                      self.label,
 *                                                      self.game.title)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 27, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long((__pyx_t_1->GetNumber() - 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gambit/lib/outcome.pxi":28
 *     def __repr__(self):
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,             # <<<<<<<<<<<<<<
 *                                                      self.game.title)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gambit/lib/outcome.pxi":29
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,
 *                                                      self.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Outcome self, other, whichop):
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_title); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gambit/lib/outcome.pxi":27
 * 
 *     def __repr__(self):
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,             # <<<<<<<<<<<<<<
 *                                                      self.label,
 *                                                      self.game.title)
 */
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Outcome_d_s_in_game_s, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":26
 *     cdef StrategicRestriction restriction
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome [%d] '%s' in game '%s'>" % (self.outcome.deref().GetNumber()-1,
 *                                                      self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":31
 *                                                      self.game.title)
 * 
 *     def __richcmp__(Outcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Outcome):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(9, 31, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_Outcome, 1, "self", 0))) __PYX_ERR(9, 31, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_2__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameOutcomeRep *__pyx_t_4;
  GameOutcomeRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/outcome.pxi":32
 * 
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_Outcome); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":33
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":34
 *         if isinstance(other, Outcome):
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 34, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_other)->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 34, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 34, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":33
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/outcome.pxi":35
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 35, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":36
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 36, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_other)->outcome.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(9, 36, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 36, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":35
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 *             else:
 */
    }

    /* "gambit/lib/outcome.pxi":38
 *                 return self.outcome.deref() != ((<Outcome>other).outcome).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(9, 38, __pyx_L1_error)
    }

    /* "gambit/lib/outcome.pxi":32
 * 
 *     def __richcmp__(Outcome self, other, whichop):
 *         if isinstance(other, Outcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.outcome.deref() == ((<Outcome>other).outcome).deref()
 */
  }

  /* "gambit/lib/outcome.pxi":40
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 40, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 40, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":41
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":40
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/outcome.pxi":42
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 42, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":43
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":42
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/outcome.pxi":45
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(9, 45, __pyx_L1_error)
    }
  }

  /* "gambit/lib/outcome.pxi":31
 *                                                      self.game.title)
 * 
 *     def __richcmp__(Outcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Outcome):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":47
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.outcome.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_7Outcome_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_7Outcome_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_4__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_7Outcome_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameOutcomeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/outcome.pxi":48
 * 
 *     def __hash__(self):
 *         return long(<long>self.outcome.deref())             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 48, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(9, 48, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":47
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.outcome.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":50
 *         return long(<long>self.outcome.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_7delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_6delete(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_6delete(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  GameRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "gambit/lib/outcome.pxi":51
 * 
 *     def delete(self):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":52
 *     def delete(self):
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)
 * 
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(9, 52, __pyx_L1_error)

    /* "gambit/lib/outcome.pxi":51
 * 
 *     def delete(self):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)
 */
  }

  /* "gambit/lib/outcome.pxi":53
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 53, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  try {
    __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_4)->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 53, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5->DeleteOutcome(__pyx_v_self->outcome);

  /* "gambit/lib/outcome.pxi":50
 *         return long(<long>self.outcome.deref())
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":56
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameOutcomeRep *__pyx_t_4;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/outcome.pxi":58
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":59
 *             cdef Game g
 *             if self.restriction is not None:
 *                 return self.restriction             # <<<<<<<<<<<<<<
 *             g = Game()
 *             g.game = self.outcome.deref().GetGame()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->restriction));
    __pyx_r = ((PyObject *)__pyx_v_self->restriction);
    goto __pyx_L0;

    /* "gambit/lib/outcome.pxi":58
 *         def __get__(self):
 *             cdef Game g
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 return self.restriction
 *             g = Game()
 */
  }

  /* "gambit/lib/outcome.pxi":60
 *             if self.restriction is not None:
 *                 return self.restriction
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.outcome.deref().GetGame()
 *             return g
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/outcome.pxi":61
 *                 return self.restriction
 *             g = Game()
 *             g.game = self.outcome.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_4 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 61, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_4->GetGame();

  /* "gambit/lib/outcome.pxi":62
 *             g = Game()
 *             g.game = self.outcome.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":56
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             if self.restriction is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":65
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.outcome.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_5label___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameOutcomeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/outcome.pxi":66
 *     property label:
 *         def __get__(self):
 *             return self.outcome.deref().GetLabel().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 66, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetLabel().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":65
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.outcome.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":67
 *         def __get__(self):
 *             return self.outcome.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_7Outcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_7Outcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(9, 67, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_5label_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_7Outcome_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  PyObject *__pyx_v_i = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  GameOutcomeRep *__pyx_t_9;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/outcome.pxi":68
 *             return self.outcome.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.game.outcomes ]:
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":69
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             if value in [ i.label for i in self.game.outcomes ]:
 *                 warnings.warn("Another outcome with an identical label exists")
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 69, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(9, 69, __pyx_L1_error)

    /* "gambit/lib/outcome.pxi":68
 *             return self.outcome.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 *             if self.restriction is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.game.outcomes ]:
 */
  }

  /* "gambit/lib/outcome.pxi":70
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.game.outcomes ]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another outcome with an identical label exists")
 *             cdef cxx_string s
 */
  __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_v_value); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_outcomes); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 70, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
    __pyx_t_5 = __pyx_t_6; __Pyx_INCREF(__pyx_t_5); __pyx_t_7 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_7 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 70, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(9, 70, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      } else {
        if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_7); __Pyx_INCREF(__pyx_t_6); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(9, 70, __pyx_L1_error)
        #else
        __pyx_t_6 = PySequence_ITEM(__pyx_t_5, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 70, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        #endif
      }
    } else {
      __pyx_t_6 = __pyx_t_8(__pyx_t_5);
      if (unlikely(!__pyx_t_6)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(9, 70, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_6);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(9, 70, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_6))) __PYX_ERR(9, 70, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_t_4, __pyx_t_3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 70, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/outcome.pxi":71
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.game.outcomes ]:
 *                 warnings.warn("Another outcome with an identical label exists")             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_warnings); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_warn); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/outcome.pxi":70
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.game.outcomes ]:             # <<<<<<<<<<<<<<
 *                 warnings.warn("Another outcome with an identical label exists")
 *             cdef cxx_string s
 */
  }

  /* "gambit/lib/outcome.pxi":73
 *                 warnings.warn("Another outcome with an identical label exists")
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.outcome.deref().SetLabel(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/outcome.pxi":74
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.outcome.deref().SetLabel(s)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, player):
 */
  try {
    __pyx_t_9 = __pyx_v_self->outcome.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(9, 74, __pyx_L1_error)
  }
  __pyx_t_9->SetLabel(__pyx_v_s);

  /* "gambit/lib/outcome.pxi":67
 *         def __get__(self):
 *             return self.outcome.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":76
 *             self.outcome.deref().SetLabel(s)
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_8__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_v_number = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameOutcomeRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  Number __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/outcome.pxi":78
 *     def __getitem__(self, player):
 *         cdef bytes py_string
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":79
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()             # <<<<<<<<<<<<<<
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 */
    try {
      __pyx_t_3 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(9, 79, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_number); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_4, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 79, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_7 = __pyx_t_3->GetPayoff<Number>(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(9, 79, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_7.operator const string &().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_py_string = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "gambit/lib/outcome.pxi":78
 *     def __getitem__(self, player):
 *         cdef bytes py_string
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/outcome.pxi":80
 *         if isinstance(player, Player):
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/outcome.pxi":81
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(__pyx_t_4, __pyx_v_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_number); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 81, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_v_number = __pyx_t_4;
    __pyx_t_4 = 0;

    /* "gambit/lib/outcome.pxi":82
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()             # <<<<<<<<<<<<<<
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 */
    try {
      __pyx_t_3 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(9, 82, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_number, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 82, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_7 = __pyx_t_3->GetPayoff<Number>(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(9, 82, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_t_7.operator const string &().c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_py_string = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/outcome.pxi":80
 *         if isinstance(player, Player):
 *             py_string = self.outcome.deref().GetPayoffNumber(player.number+1).as_string().c_str()
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/outcome.pxi":83
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string:
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":84
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()             # <<<<<<<<<<<<<<
 *         if "." in py_string:
 *             return decimal.Decimal(py_string)
 */
    try {
      __pyx_t_3 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(9, 84, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_player, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 84, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    try {
      __pyx_t_7 = __pyx_t_3->GetPayoff<Number>(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(9, 84, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_t_7.operator const string &().c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_py_string = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/outcome.pxi":83
 *             number = self.game.players[player].number
 *             py_string = self.outcome.deref().GetPayoffNumber(number+1).as_string().c_str()
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string:
 */
  }
  __pyx_L3:;

  /* "gambit/lib/outcome.pxi":85
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string:             # <<<<<<<<<<<<<<
 *             return decimal.Decimal(py_string)
 *         else:
 */
  if (unlikely(!__pyx_v_py_string)) { __Pyx_RaiseUnboundLocalError("py_string"); __PYX_ERR(9, 85, __pyx_L1_error) }
  __pyx_t_2 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s__3, __pyx_v_py_string, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 85, __pyx_L1_error)
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/outcome.pxi":86
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string:
 *             return decimal.Decimal(py_string)             # <<<<<<<<<<<<<<
 *         else:
 *             return Rational(py_string)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_decimal); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(!__pyx_v_py_string)) { __Pyx_RaiseUnboundLocalError("py_string"); __PYX_ERR(9, 86, __pyx_L1_error) }
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_py_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 86, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(9, 86, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_py_string);
      __Pyx_GIVEREF(__pyx_v_py_string);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_py_string);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 86, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/outcome.pxi":85
 *         elif isinstance(player, int):
 *             py_string = self.outcome.deref().GetPayoffNumber(player+1).as_string().c_str()
 *         if "." in py_string:             # <<<<<<<<<<<<<<
 *             return decimal.Decimal(py_string)
 *         else:
 */
  }

  /* "gambit/lib/outcome.pxi":88
 *             return decimal.Decimal(py_string)
 *         else:
 *             return Rational(py_string)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, pl, value):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(!__pyx_v_py_string)) { __Pyx_RaiseUnboundLocalError("py_string"); __PYX_ERR(9, 88, __pyx_L1_error) }
    __pyx_t_9 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_9) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_py_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_9); __pyx_t_9 = NULL;
      __Pyx_INCREF(__pyx_v_py_string);
      __Pyx_GIVEREF(__pyx_v_py_string);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_py_string);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 88, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/outcome.pxi":76
 *             self.outcome.deref().SetLabel(s)
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XDECREF(__pyx_v_number);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":90
 *             return Rational(py_string)
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_7Outcome_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_7Outcome_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_10__setitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self), ((PyObject *)__pyx_v_pl), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_7Outcome_10__setitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value) {
  string __pyx_v_s;
  PyObject *__pyx_v_v = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  char *__pyx_t_6;
  GameOutcomeRep *__pyx_t_7;
  int __pyx_t_8;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "gambit/lib/outcome.pxi":91
 * 
 *     def __setitem__(self, pl, value):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef cxx_string s
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":92
 *     def __setitem__(self, pl, value):
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a support is not supported")             # <<<<<<<<<<<<<<
 *         cdef cxx_string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__15, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 92, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(9, 92, __pyx_L1_error)

    /* "gambit/lib/outcome.pxi":91
 * 
 *     def __setitem__(self, pl, value):
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef cxx_string s
 */
  }

  /* "gambit/lib/outcome.pxi":94
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef cxx_string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \             # <<<<<<<<<<<<<<
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_1 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_2 = __pyx_t_5;
    goto __pyx_L5_bool_binop_done;
  }
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_decimal); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_3); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(9, 94, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = (__pyx_t_5 != 0);
  if (!__pyx_t_1) {
  } else {
    __pyx_t_2 = __pyx_t_1;
    goto __pyx_L5_bool_binop_done;
  }

  /* "gambit/lib/outcome.pxi":95
 *         cdef cxx_string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \
 *            isinstance(value, fractions.Fraction):             # <<<<<<<<<<<<<<
 *             v = str(value)
 *             s.assign(v)
 */
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_fractions); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_1 = PyObject_IsInstance(__pyx_v_value, __pyx_t_4); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(9, 95, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_5 = (__pyx_t_1 != 0);
  __pyx_t_2 = __pyx_t_5;
  __pyx_L5_bool_binop_done:;

  /* "gambit/lib/outcome.pxi":94
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef cxx_string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \             # <<<<<<<<<<<<<<
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 */
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":96
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)             # <<<<<<<<<<<<<<
 *             s.assign(v)
 *             self.outcome.deref().SetPayoff(pl+1, s)
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_value);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_v = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "gambit/lib/outcome.pxi":97
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 *             s.assign(v)             # <<<<<<<<<<<<<<
 *             self.outcome.deref().SetPayoff(pl+1, s)
 *         else:
 */
    __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_v); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(9, 97, __pyx_L1_error)
    __pyx_v_s.assign(__pyx_t_6);

    /* "gambit/lib/outcome.pxi":98
 *             v = str(value)
 *             s.assign(v)
 *             self.outcome.deref().SetPayoff(pl+1, s)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError, "numeric argument required for payoff"
 */
    try {
      __pyx_t_7 = __pyx_v_self->outcome.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(9, 98, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 98, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    try {
      __pyx_t_7->SetPayoff(__pyx_t_8, __pyx_v_s);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(9, 98, __pyx_L1_error)
    }

    /* "gambit/lib/outcome.pxi":94
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 *         cdef cxx_string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \             # <<<<<<<<<<<<<<
 *            isinstance(value, fractions.Fraction):
 *             v = str(value)
 */
    goto __pyx_L4;
  }

  /* "gambit/lib/outcome.pxi":100
 *             self.outcome.deref().SetPayoff(pl+1, s)
 *         else:
 *             raise TypeError, "numeric argument required for payoff"             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_numeric_argument_required_for_pa, 0, 0);
    __PYX_ERR(9, 100, __pyx_L1_error)
  }
  __pyx_L4:;

  /* "gambit/lib/outcome.pxi":90
 *             return Rational(py_string)
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a support is not supported")
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":102
 *             raise TypeError, "numeric argument required for payoff"
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Outcome o
 *         o = Outcome()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_13unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Outcome_13unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Outcome_12unrestrict(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Outcome_12unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameOutcomeRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "gambit/lib/outcome.pxi":104
 *     def unrestrict(self):
 *         cdef Outcome o
 *         o = Outcome()             # <<<<<<<<<<<<<<
 *         o.outcome = self.outcome
 *         return o
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 104, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_o = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/outcome.pxi":105
 *         cdef Outcome o
 *         o = Outcome()
 *         o.outcome = self.outcome             # <<<<<<<<<<<<<<
 *         return o
 * 
 */
  __pyx_t_2 = __pyx_v_self->outcome;
  __pyx_v_o->outcome = __pyx_t_2;

  /* "gambit/lib/outcome.pxi":106
 *         o = Outcome()
 *         o.outcome = self.outcome
 *         return o             # <<<<<<<<<<<<<<
 * 
 * cdef class TreeGameOutcome:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_o));
  __pyx_r = ((PyObject *)__pyx_v_o);
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":102
 *             raise TypeError, "numeric argument required for payoff"
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Outcome o
 *         o = Outcome()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcome.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":114
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/outcome.pxi":116
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.c_game
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 116, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/outcome.pxi":117
 *             cdef Game g
 *             g = Game()
 *             g.game = self.c_game             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_t_2 = __pyx_v_self->c_game;
  __pyx_v_g->game = __pyx_t_2;

  /* "gambit/lib/outcome.pxi":118
 *             g = Game()
 *             g.game = self.c_game
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     def __del__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":114
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":120
 *             return g
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         del self.psp
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_1__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_1__del__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome___del__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome___del__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__del__", 0);

  /* "gambit/lib/outcome.pxi":121
 * 
 *     def __del__(self):
 *         del self.psp             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  delete __pyx_v_self->psp;

  /* "gambit/lib/outcome.pxi":120
 *             return g
 * 
 *     def __del__(self):             # <<<<<<<<<<<<<<
 *         del self.psp
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":123
 *         del self.psp
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome '%s' in game '%s'>" % (self.label,
 *                                                 self.game.title)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_3__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_3__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_2__repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_2__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/outcome.pxi":124
 * 
 *     def __repr__(self):
 *         return "<Outcome '%s' in game '%s'>" % (self.label,             # <<<<<<<<<<<<<<
 *                                                 self.game.title)
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gambit/lib/outcome.pxi":125
 *     def __repr__(self):
 *         return "<Outcome '%s' in game '%s'>" % (self.label,
 *                                                 self.game.title)             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_title); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/outcome.pxi":124
 * 
 *     def __repr__(self):
 *         return "<Outcome '%s' in game '%s'>" % (self.label,             # <<<<<<<<<<<<<<
 *                                                 self.game.title)
 * 
 */
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_Outcome_s_in_game_s, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":123
 *         del self.psp
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Outcome '%s' in game '%s'>" % (self.label,
 *                                                 self.game.title)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":127
 *                                                 self.game.title)
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(9, 127, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_TreeGameOutcome, 1, "self", 0))) __PYX_ERR(9, 127, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_4__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_4__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/outcome.pxi":128
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_TreeGameOutcome); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":129
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":130
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->psp->operator->() == ((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_other)->psp->operator->())); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 130, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":129
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/outcome.pxi":131
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":132
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_v_self->psp->operator->() != ((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_other)->psp->operator->())); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":131
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 *             else:
 */
    }

    /* "gambit/lib/outcome.pxi":134
 *                 return self.psp.deref() != ((<TreeGameOutcome>other).psp).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(9, 134, __pyx_L1_error)
    }

    /* "gambit/lib/outcome.pxi":128
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):
 *         if isinstance(other, TreeGameOutcome):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.psp.deref() == ((<TreeGameOutcome>other).psp).deref()
 */
  }

  /* "gambit/lib/outcome.pxi":136
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 136, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":137
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":136
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/outcome.pxi":138
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(9, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":139
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/outcome.pxi":138
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/outcome.pxi":141
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, player):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(9, 141, __pyx_L1_error)
    }
  }

  /* "gambit/lib/outcome.pxi":127
 *                                                 self.game.title)
 * 
 *     def __richcmp__(TreeGameOutcome self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, TreeGameOutcome):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":143
 *                 raise NotImplementedError
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_7__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_6__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((PyObject *)__pyx_v_player));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_6__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_v_py_string = 0;
  PyObject *__pyx_v_number = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  GameRep *__pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/outcome.pxi":145
 *     def __getitem__(self, player):
 *         cdef bytes py_string
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             py_string = rat_str(self.psp.deref().GetPayoff(player.number+1)).c_str()
 *         elif isinstance(player, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":146
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 *             py_string = rat_str(self.psp.deref().GetPayoff(player.number+1)).c_str()             # <<<<<<<<<<<<<<
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_t_3, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 146, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->psp->operator->()->GetPayoff(__pyx_t_5)).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_py_string = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/outcome.pxi":145
 *     def __getitem__(self, player):
 *         cdef bytes py_string
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             py_string = rat_str(self.psp.deref().GetPayoff(player.number+1)).c_str()
 *         elif isinstance(player, str):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/outcome.pxi":147
 *         if isinstance(player, Player):
 *             py_string = rat_str(self.psp.deref().GetPayoff(player.number+1)).c_str()
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/outcome.pxi":148
 *             py_string = rat_str(self.psp.deref().GetPayoff(player.number+1)).c_str()
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number             # <<<<<<<<<<<<<<
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()
 *         elif isinstance(player, int):
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetItem(__pyx_t_3, __pyx_v_player); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_number); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_number = __pyx_t_3;
    __pyx_t_3 = 0;

    /* "gambit/lib/outcome.pxi":149
 *         elif isinstance(player, str):
 *             number = self.game.players[player].number
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()             # <<<<<<<<<<<<<<
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 */
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_number, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->psp->operator->()->GetPayoff(__pyx_t_5)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_py_string = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/outcome.pxi":147
 *         if isinstance(player, Player):
 *             py_string = rat_str(self.psp.deref().GetPayoff(player.number+1)).c_str()
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             number = self.game.players[player].number
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/outcome.pxi":150
 *             number = self.game.players[player].number
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError, "Index out of range"
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/outcome.pxi":151
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():             # <<<<<<<<<<<<<<
 *                 raise IndexError, "Index out of range"
 *             py_string = rat_str(self.psp.deref().GetPayoff(player+1)).c_str()
 */
    __pyx_t_3 = PyObject_RichCompare(__pyx_v_player, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 151, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (!__pyx_t_1) {
    } else {
      __pyx_t_2 = __pyx_t_1;
      goto __pyx_L5_bool_binop_done;
    }
    try {
      __pyx_t_6 = __pyx_v_self->c_game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(9, 151, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_6->NumPlayers()); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_player, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(9, 151, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __pyx_t_1;
    __pyx_L5_bool_binop_done:;
    if (__pyx_t_2) {

      /* "gambit/lib/outcome.pxi":152
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError, "Index out of range"             # <<<<<<<<<<<<<<
 *             py_string = rat_str(self.psp.deref().GetPayoff(player+1)).c_str()
 *         return Rational(py_string)
 */
      __Pyx_Raise(__pyx_builtin_IndexError, __pyx_kp_s_Index_out_of_range, 0, 0);
      __PYX_ERR(9, 152, __pyx_L1_error)

      /* "gambit/lib/outcome.pxi":151
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()
 *         elif isinstance(player, int):
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():             # <<<<<<<<<<<<<<
 *                 raise IndexError, "Index out of range"
 *             py_string = rat_str(self.psp.deref().GetPayoff(player+1)).c_str()
 */
    }

    /* "gambit/lib/outcome.pxi":153
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError, "Index out of range"
 *             py_string = rat_str(self.psp.deref().GetPayoff(player+1)).c_str()             # <<<<<<<<<<<<<<
 *         return Rational(py_string)
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_AddObjC(__pyx_v_player, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(9, 153, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->psp->operator->()->GetPayoff(__pyx_t_5)).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_py_string = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/outcome.pxi":150
 *             number = self.game.players[player].number
 *             py_string = rat_str(self.psp.deref().GetPayoff(number+1)).c_str()
 *         elif isinstance(player, int):             # <<<<<<<<<<<<<<
 *             if player < 0 or player >= self.c_game.deref().NumPlayers():
 *                 raise IndexError, "Index out of range"
 */
  }
  __pyx_L3:;

  /* "gambit/lib/outcome.pxi":154
 *                 raise IndexError, "Index out of range"
 *             py_string = rat_str(self.psp.deref().GetPayoff(player+1)).c_str()
 *         return Rational(py_string)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, pl, value):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (unlikely(!__pyx_v_py_string)) { __Pyx_RaiseUnboundLocalError("py_string"); __PYX_ERR(9, 154, __pyx_L1_error) }
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (!__pyx_t_7) {
    __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_v_py_string); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
  } else {
    __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(9, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
    __Pyx_INCREF(__pyx_v_py_string);
    __Pyx_GIVEREF(__pyx_v_py_string);
    PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_py_string);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_8, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(9, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":143
 *                 raise NotImplementedError
 * 
 *     def __getitem__(self, player):             # <<<<<<<<<<<<<<
 *         cdef bytes py_string
 *         if isinstance(player, Player):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_py_string);
  __Pyx_XDECREF(__pyx_v_number);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":156
 *         return Rational(py_string)
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_9__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_8__setitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((PyObject *)__pyx_v_pl), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_8__setitem__(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_pl, CYTHON_UNUSED PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "gambit/lib/outcome.pxi":157
 * 
 *     def __setitem__(self, pl, value):
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(9, 157, __pyx_L1_error)

  /* "gambit/lib/outcome.pxi":156
 *         return Rational(py_string)
 * 
 *     def __setitem__(self, pl, value):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":159
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_11delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_11delete(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_10delete(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_10delete(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("delete", 0);

  /* "gambit/lib/outcome.pxi":160
 * 
 *     def delete(self):
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(9, 160, __pyx_L1_error)

  /* "gambit/lib/outcome.pxi":159
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 *     def delete(self):             # <<<<<<<<<<<<<<
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.delete", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":163
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_5label___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self) {
  PyObject *__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  GameStrategyRep *__pyx_t_6;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/outcome.pxi":164
 *     property label:
 *         def __get__(self):
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(9, 164, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(9, 164, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(9, 164, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 164, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(9, 164, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_player, __pyx_t_3);
    __pyx_t_3 = 0;
    try {
      __pyx_t_6 = __pyx_v_self->psp->operator->()->GetStrategy(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player)->player).operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(9, 164, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyBytes_FromString(__pyx_t_6->GetLabel().c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(9, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(9, 164, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__18, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(9, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_s_2, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 164, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/outcome.pxi":163
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/outcome.pxi":165
 *         def __get__(self):
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  CYTHON_UNUSED char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(9, 165, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_2__set__(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_self, CYTHON_UNUSED char *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/outcome.pxi":166
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(9, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(9, 166, __pyx_L1_error)

  /* "gambit/lib/outcome.pxi":165
 *         def __get__(self):
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.TreeGameOutcome.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":27
 *     "Represents the collection of direct children of a node."
 *     cdef c_GameNode parent
 *     def __len__(self):    return self.parent.deref().NumChildren()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_8Children_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_8Children_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Children___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_Children *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_8Children___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Children *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->parent.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 27, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumChildren();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Children.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":28
 *     cdef c_GameNode parent
 *     def __len__(self):    return self.parent.deref().NumChildren()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Children_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Children_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Children_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Children *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Children_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Children *__pyx_v_self, PyObject *__pyx_v_i) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameNodeRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameNodeRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/node.pxi":29
 *     def __len__(self):    return self.parent.deref().NumChildren()
 *     def __getitem__(self, i):
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)             # <<<<<<<<<<<<<<
 *         cdef Node n
 *         n = Node()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_i); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(10, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_i);
    __Pyx_GIVEREF(__pyx_v_i);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_i);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/node.pxi":31
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 *         n = Node()             # <<<<<<<<<<<<<<
 *         n.node = self.parent.deref().GetChild(i+1)
 *         return n
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_n = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/node.pxi":32
 *         cdef Node n
 *         n = Node()
 *         n.node = self.parent.deref().GetChild(i+1)             # <<<<<<<<<<<<<<
 *         return n
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->parent.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 32, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetChild(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(10, 32, __pyx_L1_error)
  }
  __pyx_v_n->node = __pyx_t_10;

  /* "gambit/lib/node.pxi":33
 *         n = Node()
 *         n.node = self.parent.deref().GetChild(i+1)
 *         return n             # <<<<<<<<<<<<<<
 * 
 * cdef class Node:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_n));
  __pyx_r = ((PyObject *)__pyx_v_n);
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":28
 *     cdef c_GameNode parent
 *     def __len__(self):    return self.parent.deref().NumChildren()
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         if not isinstance(i, int):  return Collection.__getitem__(self, i)
 *         cdef Node n
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Children.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":38
 *     cdef c_GameNode node
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameRep *__pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/node.pxi":39
 * 
 *     def __repr__(self):
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),             # <<<<<<<<<<<<<<
 *                                                   self.label,
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 39, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_1->GetNumber()); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gambit/lib/node.pxi":40
 *     def __repr__(self):
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,             # <<<<<<<<<<<<<<
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_label); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gambit/lib/node.pxi":41
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Node self, other, whichop):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 41, __pyx_L1_error)
  }
  try {
    __pyx_t_4 = __pyx_t_1->GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 41, __pyx_L1_error)
  }
  __pyx_t_5 = __Pyx_PyBytes_FromString(__pyx_t_4->GetTitle().c_str()); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "gambit/lib/node.pxi":39
 * 
 *     def __repr__(self):
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),             # <<<<<<<<<<<<<<
 *                                                   self.label,
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 */
  __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Node_d_s_in_game_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 39, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":38
 *     cdef c_GameNode node
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "<Node [%d] '%s' in game '%s'>" % (self.node.deref().GetNumber(),
 *                                                   self.label,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":43
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Node self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Node):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_3__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(10, 43, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_Node, 1, "self", 0))) __PYX_ERR(10, 43, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_2__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_2__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameNodeRep *__pyx_t_4;
  GameNodeRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/node.pxi":44
 * 
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":45
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/node.pxi":46
 *         if isinstance(other, Node):
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.node.deref() != ((<Node>other).node).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 46, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_other)->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 46, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 46, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/node.pxi":45
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/node.pxi":47
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() != ((<Node>other).node).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 47, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/node.pxi":48
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:
 *                 return self.node.deref() != ((<Node>other).node).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 48, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_other)->node.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(10, 48, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 48, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/node.pxi":47
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.node.deref() != ((<Node>other).node).deref()
 *             else:
 */
    }

    /* "gambit/lib/node.pxi":50
 *                 return self.node.deref() != ((<Node>other).node).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(10, 50, __pyx_L1_error)
    }

    /* "gambit/lib/node.pxi":44
 * 
 *     def __richcmp__(Node self, other, whichop):
 *         if isinstance(other, Node):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.node.deref() == ((<Node>other).node).deref()
 */
  }

  /* "gambit/lib/node.pxi":52
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 52, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/node.pxi":53
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/node.pxi":52
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/node.pxi":54
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 54, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 54, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/node.pxi":55
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/node.pxi":54
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/node.pxi":57
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(10, 57, __pyx_L1_error)
    }
  }

  /* "gambit/lib/node.pxi":43
 *                                                   self.node.deref().GetGame().deref().GetTitle().c_str())
 * 
 *     def __richcmp__(Node self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Node):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":59
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.node.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_4Node_5__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_4Node_5__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_4__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_4Node_4__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/node.pxi":60
 * 
 *     def __hash__(self):
 *         return long(<long>self.node.deref())             # <<<<<<<<<<<<<<
 * 
 *     def is_successor_of(self, node):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 60, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(10, 60, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":59
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.node.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":62
 *         return long(<long>self.node.deref())
 * 
 *     def is_successor_of(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_7is_successor_of(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_7is_successor_of(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_successor_of (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_6is_successor_of(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_6is_successor_of(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameNodeRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("is_successor_of", 0);

  /* "gambit/lib/node.pxi":63
 * 
 *     def is_successor_of(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 *         else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_6gambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":64
 *     def is_successor_of(self, node):
 *         if isinstance(node, Node):
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError, "is_successor_of takes a Node object as its input"
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 64, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBool_FromLong(__pyx_t_3->IsSuccessorOf(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_node)->node)); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":63
 * 
 *     def is_successor_of(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 *         else:
 */
  }

  /* "gambit/lib/node.pxi":66
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 *         else:
 *             raise TypeError, "is_successor_of takes a Node object as its input"             # <<<<<<<<<<<<<<
 * 
 *     def is_subgame_root(self):
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_is_successor_of_takes_a_Node_obj, 0, 0);
    __PYX_ERR(10, 66, __pyx_L1_error)
  }

  /* "gambit/lib/node.pxi":62
 *         return long(<long>self.node.deref())
 * 
 *     def is_successor_of(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self.node.deref().IsSuccessorOf(((<Node>node).node))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.is_successor_of", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":68
 *             raise TypeError, "is_successor_of takes a Node object as its input"
 * 
 *     def is_subgame_root(self):             # <<<<<<<<<<<<<<
 *         return self.node.deref().IsSubgameRoot()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_9is_subgame_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_9is_subgame_root(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_subgame_root (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_8is_subgame_root(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_8is_subgame_root(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("is_subgame_root", 0);

  /* "gambit/lib/node.pxi":69
 * 
 *     def is_subgame_root(self):
 *         return self.node.deref().IsSubgameRoot()             # <<<<<<<<<<<<<<
 * 
 *     def append_move(self, player, actions=None):
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 69, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsSubgameRoot()); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":68
 *             raise TypeError, "is_successor_of takes a Node object as its input"
 * 
 *     def is_subgame_root(self):             # <<<<<<<<<<<<<<
 *         return self.node.deref().IsSubgameRoot()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.is_subgame_root", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":71
 *         return self.node.deref().IsSubgameRoot()
 * 
 *     def append_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if len(self.children) > 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_11append_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_11append_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_actions = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("append_move (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_actions,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_actions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "append_move") < 0)) __PYX_ERR(10, 71, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
    __pyx_v_actions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("append_move", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(10, 71, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.append_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_10append_move(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), __pyx_v_player, __pyx_v_actions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_10append_move(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  GameNodeRep *__pyx_t_7;
  int __pyx_t_8;
  GameObjectPtr<GameInfosetRep> __pyx_t_9;
  __Pyx_RefNannySetupContext("append_move", 0);

  /* "gambit/lib/node.pxi":73
 *     def append_move(self, player, actions=None):
 *         cdef Infoset i
 *         if len(self.children) > 0:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_children); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 73, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(10, 73, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((__pyx_t_2 > 0) != 0);
  if (__pyx_t_3) {

    /* "gambit/lib/node.pxi":74
 *         cdef Infoset i
 *         if len(self.children) > 0:
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             if actions is None:
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 74, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(10, 74, __pyx_L1_error)

    /* "gambit/lib/node.pxi":73
 *     def append_move(self, player, actions=None):
 *         cdef Infoset i
 *         if len(self.children) > 0:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 */
  }

  /* "gambit/lib/node.pxi":75
 *         if len(self.children) > 0:
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "gambit/lib/node.pxi":76
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    __pyx_t_5 = (__pyx_v_actions == Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    if (__pyx_t_3) {

      /* "gambit/lib/node.pxi":77
 *         if isinstance(player, Player):
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")             # <<<<<<<<<<<<<<
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__21, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(10, 77, __pyx_L1_error)

      /* "gambit/lib/node.pxi":76
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    }

    /* "gambit/lib/node.pxi":78
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:
 */
    __pyx_t_1 = PyObject_RichCompare(__pyx_v_actions, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 78, __pyx_L1_error)
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(10, 78, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_3) {

      /* "gambit/lib/node.pxi":79
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__22, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 79, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 79, __pyx_L1_error)

      /* "gambit/lib/node.pxi":78
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:
 */
    }

    /* "gambit/lib/node.pxi":80
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(10, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    if (__pyx_t_3) {

      /* "gambit/lib/node.pxi":81
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 */
      __pyx_t_6 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 81, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_tuple__23, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 81, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(10, 81, __pyx_L1_error)

      /* "gambit/lib/node.pxi":80
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "gambit/lib/node.pxi":82
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gambit/lib/node.pxi":83
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)             # <<<<<<<<<<<<<<
 *             return i
 *         elif isinstance(player, Infoset):
 */
    try {
      __pyx_t_7 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 83, __pyx_L1_error)
    }
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_v_actions); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 83, __pyx_L1_error)
    try {
      __pyx_t_9 = __pyx_t_7->AppendMove(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player)->player, __pyx_t_8);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(10, 83, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_9;

    /* "gambit/lib/node.pxi":84
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i             # <<<<<<<<<<<<<<
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":75
 *         if len(self.children) > 0:
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 */
  }

  /* "gambit/lib/node.pxi":85
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 */
  __pyx_t_3 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_5 = (__pyx_t_3 != 0);
  if (__pyx_t_5) {

    /* "gambit/lib/node.pxi":86
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    __pyx_t_5 = (__pyx_v_actions != Py_None);
    __pyx_t_3 = (__pyx_t_5 != 0);
    if (__pyx_t_3) {

      /* "gambit/lib/node.pxi":87
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__24, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(10, 87, __pyx_L1_error)

      /* "gambit/lib/node.pxi":86
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    }

    /* "gambit/lib/node.pxi":88
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_6)) __PYX_ERR(10, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 88, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_6, __pyx_t_1, Py_NE); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(10, 88, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_3) {

      /* "gambit/lib/node.pxi":89
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__25, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 89, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(10, 89, __pyx_L1_error)

      /* "gambit/lib/node.pxi":88
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "gambit/lib/node.pxi":90
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 *             return i
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gambit/lib/node.pxi":91
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))             # <<<<<<<<<<<<<<
 *             return i
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 */
    try {
      __pyx_t_7 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 91, __pyx_L1_error)
    }
    try {
      __pyx_t_9 = __pyx_t_7->AppendMove(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_player)->infoset);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(10, 91, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_9;

    /* "gambit/lib/node.pxi":92
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 *             return i             # <<<<<<<<<<<<<<
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":85
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 */
  }

  /* "gambit/lib/node.pxi":93
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 *             return i
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"             # <<<<<<<<<<<<<<
 * 
 *     def insert_move(self, player, actions=None):
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_append_move_accepts_either_a_Pla, 0, 0);
  __PYX_ERR(10, 93, __pyx_L1_error)

  /* "gambit/lib/node.pxi":71
 *         return self.node.deref().IsSubgameRoot()
 * 
 *     def append_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if len(self.children) > 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.append_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":95
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 * 
 *     def insert_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if isinstance(player, Player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_13insert_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_13insert_move(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_actions = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("insert_move (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_actions,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_actions);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "insert_move") < 0)) __PYX_ERR(10, 95, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
    __pyx_v_actions = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("insert_move", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(10, 95, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.insert_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_12insert_move(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), __pyx_v_player, __pyx_v_actions);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_12insert_move(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_actions) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameNodeRep *__pyx_t_6;
  int __pyx_t_7;
  GameObjectPtr<GameInfosetRep> __pyx_t_8;
  __Pyx_RefNannySetupContext("insert_move", 0);

  /* "gambit/lib/node.pxi":97
 *     def insert_move(self, player, actions=None):
 *         cdef Infoset i
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":98
 *         cdef Infoset i
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    __pyx_t_2 = (__pyx_v_actions == Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/node.pxi":99
 *         if isinstance(player, Player):
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")             # <<<<<<<<<<<<<<
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__26, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 99, __pyx_L1_error)

      /* "gambit/lib/node.pxi":98
 *         cdef Infoset i
 *         if isinstance(player, Player):
 *             if actions is None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:
 */
    }

    /* "gambit/lib/node.pxi":100
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:
 */
    __pyx_t_4 = PyObject_RichCompare(__pyx_v_actions, __pyx_int_1, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 100, __pyx_L1_error)
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(10, 100, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_1) {

      /* "gambit/lib/node.pxi":101
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__27, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __PYX_ERR(10, 101, __pyx_L1_error)

      /* "gambit/lib/node.pxi":100
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:
 */
    }

    /* "gambit/lib/node.pxi":102
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(10, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_1) {

      /* "gambit/lib/node.pxi":103
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__28, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 103, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 103, __pyx_L1_error)

      /* "gambit/lib/node.pxi":102
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "gambit/lib/node.pxi":104
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 104, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/node.pxi":105
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)             # <<<<<<<<<<<<<<
 *             return i
 *         elif isinstance(player, Infoset):
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 105, __pyx_L1_error)
    }
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_v_actions); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(10, 105, __pyx_L1_error)
    try {
      __pyx_t_8 = __pyx_t_6->InsertMove(((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player)->player, __pyx_t_7);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(10, 105, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_8;

    /* "gambit/lib/node.pxi":106
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i             # <<<<<<<<<<<<<<
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":97
 *     def insert_move(self, player, actions=None):
 *         cdef Infoset i
 *         if isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 */
  }

  /* "gambit/lib/node.pxi":107
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":108
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    __pyx_t_2 = (__pyx_v_actions != Py_None);
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/node.pxi":109
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 109, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(10, 109, __pyx_L1_error)

      /* "gambit/lib/node.pxi":108
 *             return i
 *         elif isinstance(player, Infoset):
 *             if actions is not None:             # <<<<<<<<<<<<<<
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 */
    }

    /* "gambit/lib/node.pxi":110
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_5, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(10, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_1) {

      /* "gambit/lib/node.pxi":111
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 */
      __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 111, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 111, __pyx_L1_error)

      /* "gambit/lib/node.pxi":110
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 */
    }

    /* "gambit/lib/node.pxi":112
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()             # <<<<<<<<<<<<<<
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 *             return i
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/node.pxi":113
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))             # <<<<<<<<<<<<<<
 *             return i
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 113, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = __pyx_t_6->InsertMove(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_player)->infoset);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(10, 113, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_8;

    /* "gambit/lib/node.pxi":114
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 *             return i             # <<<<<<<<<<<<<<
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":107
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 *             return i
 *         elif isinstance(player, Infoset):             # <<<<<<<<<<<<<<
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 */
  }

  /* "gambit/lib/node.pxi":115
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 *             return i
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"             # <<<<<<<<<<<<<<
 * 
 *     def leave_infoset(self):
 */
  __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_insert_move_accepts_either_a_Pla, 0, 0);
  __PYX_ERR(10, 115, __pyx_L1_error)

  /* "gambit/lib/node.pxi":95
 *         raise TypeError, "append_move accepts either a Player or Infoset to specify information"
 * 
 *     def insert_move(self, player, actions=None):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         if isinstance(player, Player):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.insert_move", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":117
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 * 
 *     def leave_infoset(self):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         i = Infoset()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_15leave_infoset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_15leave_infoset(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("leave_infoset (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_14leave_infoset(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_14leave_infoset(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameNodeRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("leave_infoset", 0);

  /* "gambit/lib/node.pxi":119
 *     def leave_infoset(self):
 *         cdef Infoset i
 *         i = Infoset()             # <<<<<<<<<<<<<<
 *         i.infoset = self.node.deref().LeaveInfoset()
 *         return i
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/node.pxi":120
 *         cdef Infoset i
 *         i = Infoset()
 *         i.infoset = self.node.deref().LeaveInfoset()             # <<<<<<<<<<<<<<
 *         return i
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 120, __pyx_L1_error)
  }
  __pyx_v_i->infoset = __pyx_t_2->LeaveInfoset();

  /* "gambit/lib/node.pxi":121
 *         i = Infoset()
 *         i.infoset = self.node.deref().LeaveInfoset()
 *         return i             # <<<<<<<<<<<<<<
 * 
 *     def delete_parent(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_i));
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":117
 *         raise TypeError, "insert_move accepts either a Player or Infoset to specify information"
 * 
 *     def leave_infoset(self):             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         i = Infoset()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.leave_infoset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":123
 *         return i
 * 
 *     def delete_parent(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteParent()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_17delete_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_17delete_parent(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_parent (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_16delete_parent(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_16delete_parent(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("delete_parent", 0);

  /* "gambit/lib/node.pxi":124
 * 
 *     def delete_parent(self):
 *         self.node.deref().DeleteParent()             # <<<<<<<<<<<<<<
 * 
 *     def delete_tree(self):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 124, __pyx_L1_error)
  }
  __pyx_t_1->DeleteParent();

  /* "gambit/lib/node.pxi":123
 *         return i
 * 
 *     def delete_parent(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteParent()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.delete_parent", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":126
 *         self.node.deref().DeleteParent()
 * 
 *     def delete_tree(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteTree()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_19delete_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_19delete_tree(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("delete_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_18delete_tree(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_18delete_tree(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("delete_tree", 0);

  /* "gambit/lib/node.pxi":127
 * 
 *     def delete_tree(self):
 *         self.node.deref().DeleteTree()             # <<<<<<<<<<<<<<
 * 
 *     def copy_tree(self, node):
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 127, __pyx_L1_error)
  }
  __pyx_t_1->DeleteTree();

  /* "gambit/lib/node.pxi":126
 *         self.node.deref().DeleteParent()
 * 
 *     def delete_tree(self):             # <<<<<<<<<<<<<<
 *         self.node.deref().DeleteTree()
 * 
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.delete_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":129
 *         self.node.deref().DeleteTree()
 * 
 *     def copy_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_21copy_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_21copy_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_20copy_tree(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_20copy_tree(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameNodeRep *__pyx_t_6;
  __Pyx_RefNannySetupContext("copy_tree", 0);

  /* "gambit/lib/node.pxi":130
 * 
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_6gambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":131
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/node.pxi":132
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \             # <<<<<<<<<<<<<<
 *                                     objects of the same game")
 *             self.node.deref().CopyTree((<Node>node).node)
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 132, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 132, __pyx_L1_error)

      /* "gambit/lib/node.pxi":131
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    }

    /* "gambit/lib/node.pxi":134
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 *             self.node.deref().CopyTree((<Node>node).node)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("copy_tree takes a Node object as its input")
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 134, __pyx_L1_error)
    }
    try {
      __pyx_t_6->CopyTree(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_node)->node);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(10, 134, __pyx_L1_error)
    }

    /* "gambit/lib/node.pxi":130
 * 
 *     def copy_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/node.pxi":136
 *             self.node.deref().CopyTree((<Node>node).node)
 *         else:
 *             raise TypeError("copy_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def move_tree(self, node):
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(10, 136, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/node.pxi":129
 *         self.node.deref().DeleteTree()
 * 
 *     def copy_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.copy_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":138
 *             raise TypeError("copy_tree takes a Node object as its input")
 * 
 *     def move_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_23move_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_23move_tree(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("move_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_22move_tree(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_22move_tree(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  GameNodeRep *__pyx_t_6;
  __Pyx_RefNannySetupContext("move_tree", 0);

  /* "gambit/lib/node.pxi":139
 * 
 *     def move_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_6gambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":140
 *     def move_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyObject_RichCompare(__pyx_t_3, __pyx_t_4, Py_NE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(10, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/node.pxi":141
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \             # <<<<<<<<<<<<<<
 *                                     objects of the same game")
 *             self.node.deref().MoveTree((<Node>node).node)
 */
      __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MismatchError); if (unlikely(!__pyx_t_5)) __PYX_ERR(10, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __PYX_ERR(10, 141, __pyx_L1_error)

      /* "gambit/lib/node.pxi":140
 *     def move_tree(self, node):
 *         if isinstance(node, Node):
 *             if node.game != self.game:             # <<<<<<<<<<<<<<
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 */
    }

    /* "gambit/lib/node.pxi":143
 *                 raise MismatchError("copy_tree can only be applied between \
 *                                     objects of the same game")
 *             self.node.deref().MoveTree((<Node>node).node)             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("move_tree takes a Node object as its input")
 */
    try {
      __pyx_t_6 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 143, __pyx_L1_error)
    }
    try {
      __pyx_t_6->MoveTree(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_node)->node);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(10, 143, __pyx_L1_error)
    }

    /* "gambit/lib/node.pxi":139
 * 
 *     def move_tree(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/node.pxi":145
 *             self.node.deref().MoveTree((<Node>node).node)
 *         else:
 *             raise TypeError("move_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(10, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(10, 145, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/node.pxi":138
 *             raise TypeError("copy_tree takes a Node object as its input")
 * 
 *     def move_tree(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.move_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":148
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_5label_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_5label_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_5label___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_5label___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":149
 *     property label:
 *         def __get__(self):
 *             return self.node.deref().GetLabel().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 149, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetLabel().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":148
 * 
 *     property label:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().GetLabel().c_str()
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.label.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":150
 *         def __get__(self):
 *             return self.node.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_4Node_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_4Node_5label_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(10, 150, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_5label_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_4Node_5label_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/node.pxi":152
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.node.deref().SetLabel(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/node.pxi":153
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.node.deref().SetLabel(s)             # <<<<<<<<<<<<<<
 * 
 *     property children:
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 153, __pyx_L1_error)
  }
  __pyx_t_1->SetLabel(__pyx_v_s);

  /* "gambit/lib/node.pxi":150
 *         def __get__(self):
 *             return self.node.deref().GetLabel().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.label.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":156
 * 
 *     property children:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Children c
 *             c = Children()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_8children_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_8children_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_8children___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_8children___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Children *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameNodeRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":158
 *         def __get__(self):
 *             cdef Children c
 *             c = Children()             # <<<<<<<<<<<<<<
 *             c.parent = self.node
 *             return c
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Children), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_6gambit_3lib_9libgambit_Children *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/node.pxi":159
 *             cdef Children c
 *             c = Children()
 *             c.parent = self.node             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
  __pyx_t_2 = __pyx_v_self->node;
  __pyx_v_c->parent = __pyx_t_2;

  /* "gambit/lib/node.pxi":160
 *             c = Children()
 *             c.parent = self.node
 *             return c             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":156
 * 
 *     property children:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Children c
 *             c = Children()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.children.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":163
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameNodeRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":165
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.node.deref().GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 165, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/node.pxi":166
 *             cdef Game g
 *             g = Game()
 *             g.game = self.node.deref().GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  try {
    __pyx_t_2 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 166, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2->GetGame();

  /* "gambit/lib/node.pxi":167
 *             g = Game()
 *             g.game = self.node.deref().GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property infoset:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":163
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":170
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_7infoset_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_7infoset_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_7infoset___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_7infoset___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":172
 *         def __get__(self):
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:             # <<<<<<<<<<<<<<
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 172, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetInfoset() != ((GameObjectPtr<GameInfosetRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":173
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 *                 i = Infoset()             # <<<<<<<<<<<<<<
 *                 i.infoset = self.node.deref().GetInfoset()
 *                 return i
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/node.pxi":174
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()             # <<<<<<<<<<<<<<
 *                 return i
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 174, __pyx_L1_error)
    }
    __pyx_v_i->infoset = __pyx_t_1->GetInfoset();

    /* "gambit/lib/node.pxi":175
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()
 *                 return i             # <<<<<<<<<<<<<<
 *             return None
 *         def __set__(self, infoset):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":172
 *         def __get__(self):
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:             # <<<<<<<<<<<<<<
 *                 i = Infoset()
 *                 i.infoset = self.node.deref().GetInfoset()
 */
  }

  /* "gambit/lib/node.pxi":176
 *                 i.infoset = self.node.deref().GetInfoset()
 *                 return i
 *             return None             # <<<<<<<<<<<<<<
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":170
 * 
 *     property infoset:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Infoset i
 *             if self.node.deref().GetInfoset() != <c_GameInfoset>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.infoset.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":177
 *                 return i
 *             return None
 *         def __set__(self, infoset):             # <<<<<<<<<<<<<<
 *             if isinstance(infoset, Infoset):
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_4Node_7infoset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_4Node_7infoset_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_7infoset_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_infoset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_4Node_7infoset_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_infoset) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameNodeRep *__pyx_t_3;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/node.pxi":178
 *             return None
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 *             else:
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":179
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError, "type Infoset required for setting infoset at a node"
 */
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 179, __pyx_L1_error)
    }
    try {
      __pyx_t_3->SetInfoset(((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_infoset)->infoset);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_ValueError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_ValueError); }
      __PYX_ERR(10, 179, __pyx_L1_error)
    }

    /* "gambit/lib/node.pxi":178
 *             return None
 *         def __set__(self, infoset):
 *             if isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 *             else:
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/node.pxi":181
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 *             else:
 *                 raise TypeError, "type Infoset required for setting infoset at a node"             # <<<<<<<<<<<<<<
 * 
 *     property player:
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_type_Infoset_required_for_settin, 0, 0);
    __PYX_ERR(10, 181, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/node.pxi":177
 *                 return i
 *             return None
 *         def __set__(self, infoset):             # <<<<<<<<<<<<<<
 *             if isinstance(infoset, Infoset):
 *                 self.node.deref().SetInfoset((<Infoset>infoset).infoset)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.infoset.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":184
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_6player_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_6player_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_6player___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_6player___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":186
 *         def __get__(self):
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:             # <<<<<<<<<<<<<<
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 186, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetPlayer() != ((GameObjectPtr<GamePlayerRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":187
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 *                 p = Player()             # <<<<<<<<<<<<<<
 *                 p.player = self.node.deref().GetPlayer()
 *                 return p
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Player), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 187, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/node.pxi":188
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()             # <<<<<<<<<<<<<<
 *                 return p
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 188, __pyx_L1_error)
    }
    __pyx_v_p->player = __pyx_t_1->GetPlayer();

    /* "gambit/lib/node.pxi":189
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()
 *                 return p             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_p));
    __pyx_r = ((PyObject *)__pyx_v_p);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":186
 *         def __get__(self):
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:             # <<<<<<<<<<<<<<
 *                 p = Player()
 *                 p.player = self.node.deref().GetPlayer()
 */
  }

  /* "gambit/lib/node.pxi":190
 *                 p.player = self.node.deref().GetPlayer()
 *                 return p
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property parent:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":184
 * 
 *     property player:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             if self.node.deref().GetPlayer() != <c_GamePlayer>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.player.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":193
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_6parent_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_6parent_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_6parent___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_6parent___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":195
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 195, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetParent() != ((GameObjectPtr<GameNodeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":196
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.node.deref().GetParent()
 *                 return n
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_n = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/node.pxi":197
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()             # <<<<<<<<<<<<<<
 *                 return n
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 197, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_1->GetParent();

    /* "gambit/lib/node.pxi":198
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()
 *                 return n             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":195
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetParent()
 */
  }

  /* "gambit/lib/node.pxi":199
 *                 n.node = self.node.deref().GetParent()
 *                 return n
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property prior_action:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":193
 * 
 *     property parent:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetParent() != <c_GameNode>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.parent.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":202
 * 
 *     property prior_action:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_12prior_action_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_12prior_action_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_12prior_action___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_12prior_action___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":204
 *         def __get__(self):
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:             # <<<<<<<<<<<<<<
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 204, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetPriorAction() != ((GameObjectPtr<GameActionRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":205
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 *                 a = Action()             # <<<<<<<<<<<<<<
 *                 a.action = self.node.deref().GetPriorAction()
 *                 return a
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Action), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 205, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_a = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/node.pxi":206
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()             # <<<<<<<<<<<<<<
 *                 return a
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 206, __pyx_L1_error)
    }
    __pyx_v_a->action = __pyx_t_1->GetPriorAction();

    /* "gambit/lib/node.pxi":207
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()
 *                 return a             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_a));
    __pyx_r = ((PyObject *)__pyx_v_a);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":204
 *         def __get__(self):
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:             # <<<<<<<<<<<<<<
 *                 a = Action()
 *                 a.action = self.node.deref().GetPriorAction()
 */
  }

  /* "gambit/lib/node.pxi":208
 *                 a.action = self.node.deref().GetPriorAction()
 *                 return a
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property prior_sibling:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":202
 * 
 *     property prior_action:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Action a
 *             if self.node.deref().GetPriorAction() != <c_GameAction>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.prior_action.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":211
 * 
 *     property prior_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_13prior_sibling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_13prior_sibling_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_13prior_sibling___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_13prior_sibling___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":213
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 213, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetPriorSibling() != ((GameObjectPtr<GameNodeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":214
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.node.deref().GetPriorSibling()
 *                 return n
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_n = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/node.pxi":215
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()             # <<<<<<<<<<<<<<
 *                 return n
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 215, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_1->GetPriorSibling();

    /* "gambit/lib/node.pxi":216
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()
 *                 return n             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":213
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetPriorSibling()
 */
  }

  /* "gambit/lib/node.pxi":217
 *                 n.node = self.node.deref().GetPriorSibling()
 *                 return n
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property next_sibling:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":211
 * 
 *     property prior_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetPriorSibling() != <c_GameNode>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.prior_sibling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":220
 * 
 *     property next_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_12next_sibling_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_12next_sibling_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_12next_sibling___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_12next_sibling___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":222
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 222, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetNextSibling() != ((GameObjectPtr<GameNodeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":223
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.node.deref().GetNextSibling()
 *                 return n
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 223, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_n = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/node.pxi":224
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()             # <<<<<<<<<<<<<<
 *                 return n
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 224, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_1->GetNextSibling();

    /* "gambit/lib/node.pxi":225
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()
 *                 return n             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":222
 *         def __get__(self):
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.node.deref().GetNextSibling()
 */
  }

  /* "gambit/lib/node.pxi":226
 *                 n.node = self.node.deref().GetNextSibling()
 *                 return n
 *             return None             # <<<<<<<<<<<<<<
 * 
 *     property is_terminal:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":220
 * 
 *     property next_sibling:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.node.deref().GetNextSibling() != <c_GameNode>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.next_sibling.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":229
 * 
 *     property is_terminal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsTerminal()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_11is_terminal_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_11is_terminal_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_11is_terminal___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_11is_terminal___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":230
 *     property is_terminal:
 *         def __get__(self):
 *             return self.node.deref().IsTerminal()             # <<<<<<<<<<<<<<
 * 
 *     property outcome:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 230, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsTerminal()); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 230, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":229
 * 
 *     property is_terminal:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.node.deref().IsTerminal()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.is_terminal.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":233
 * 
 *     property outcome:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_7outcome_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Node_7outcome_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_7outcome___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Node_7outcome___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameNodeRep *__pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/node.pxi":235
 *         def __get__(self):
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:             # <<<<<<<<<<<<<<
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()
 */
  try {
    __pyx_t_1 = __pyx_v_self->node.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(10, 235, __pyx_L1_error)
  }
  __pyx_t_2 = ((__pyx_t_1->GetOutcome() != ((GameObjectPtr<GameOutcomeRep>)NULL)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":236
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 *                 o = Outcome()             # <<<<<<<<<<<<<<
 *                 o.outcome = self.node.deref().GetOutcome()
 *                 return o
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(10, 236, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_o = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/node.pxi":237
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()             # <<<<<<<<<<<<<<
 *                 return o
 *             return None
 */
    try {
      __pyx_t_1 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 237, __pyx_L1_error)
    }
    __pyx_v_o->outcome = __pyx_t_1->GetOutcome();

    /* "gambit/lib/node.pxi":238
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()
 *                 return o             # <<<<<<<<<<<<<<
 *             return None
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_o));
    __pyx_r = ((PyObject *)__pyx_v_o);
    goto __pyx_L0;

    /* "gambit/lib/node.pxi":235
 *         def __get__(self):
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:             # <<<<<<<<<<<<<<
 *                 o = Outcome()
 *                 o.outcome = self.node.deref().GetOutcome()
 */
  }

  /* "gambit/lib/node.pxi":239
 *                 o.outcome = self.node.deref().GetOutcome()
 *                 return o
 *             return None             # <<<<<<<<<<<<<<
 * 
 *         def __set__(self, outcome):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_None);
  __pyx_r = Py_None;
  goto __pyx_L0;

  /* "gambit/lib/node.pxi":233
 * 
 *     property outcome:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcome o
 *             if self.node.deref().GetOutcome() != <c_GameOutcome>NULL:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.outcome.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/node.pxi":241
 *             return None
 * 
 *         def __set__(self, outcome):             # <<<<<<<<<<<<<<
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_4Node_7outcome_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_outcome); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_4Node_7outcome_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_outcome) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Node_7outcome_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_self), ((PyObject *)__pyx_v_outcome));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_4Node_7outcome_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_self, PyObject *__pyx_v_outcome) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  GameNodeRep *__pyx_t_3;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/node.pxi":242
 * 
 *         def __set__(self, outcome):
 *             if outcome is None:             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):
 */
  __pyx_t_1 = (__pyx_v_outcome == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/node.pxi":243
 *         def __set__(self, outcome):
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)             # <<<<<<<<<<<<<<
 *             elif isinstance(outcome, Outcome):
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 */
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 243, __pyx_L1_error)
    }
    __pyx_t_3->SetOutcome(((GameObjectPtr<GameOutcomeRep>)NULL));

    /* "gambit/lib/node.pxi":242
 * 
 *         def __set__(self, outcome):
 *             if outcome is None:             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/node.pxi":244
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 *             else:
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_outcome, __pyx_ptype_6gambit_3lib_9libgambit_Outcome); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/node.pxi":245
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError, "type Outcome required for setting outcome at a node"
 */
    try {
      __pyx_t_3 = __pyx_v_self->node.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(10, 245, __pyx_L1_error)
    }
    __pyx_t_3->SetOutcome(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_v_outcome)->outcome);

    /* "gambit/lib/node.pxi":244
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 *             elif isinstance(outcome, Outcome):             # <<<<<<<<<<<<<<
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 *             else:
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/node.pxi":247
 *                 self.node.deref().SetOutcome((<Outcome>outcome).outcome)
 *             else:
 *                 raise TypeError, "type Outcome required for setting outcome at a node"             # <<<<<<<<<<<<<<
 * 
 */
  /*else*/ {
    __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_type_Outcome_required_for_settin, 0, 0);
    __PYX_ERR(10, 247, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/node.pxi":241
 *             return None
 * 
 *         def __set__(self, outcome):             # <<<<<<<<<<<<<<
 *             if outcome is None:
 *                 self.node.deref().SetOutcome(<c_GameOutcome>NULL)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Node.outcome.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":33
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self, strategies, Game game not None):             # <<<<<<<<<<<<<<
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strategies = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategies,&__pyx_n_s_game,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strategies)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_game)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); __PYX_ERR(1, 33, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 33, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategies = values[0];
    __pyx_v_game = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 33, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 0, "game", 0))) __PYX_ERR(1, 33, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile___init__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), __pyx_v_strategies, __pyx_v_game);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile___init__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_temp_restriction = NULL;
  PyObject *__pyx_v_strategy = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  int __pyx_t_9;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/stratspt.pxi":34
 * 
 *     def __init__(self, strategies, Game game not None):
 *        self.support = (<c_StrategySupportProfile *>0)             # <<<<<<<<<<<<<<
 *        if self.is_valid(strategies, len(game.players)):
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 */
  __pyx_v_self->support = ((StrategySupportProfile *)0);

  /* "gambit/lib/stratspt.pxi":35
 *     def __init__(self, strategies, Game game not None):
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):             # <<<<<<<<<<<<<<
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_valid); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_game), __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_5 = NULL;
  __pyx_t_4 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
      __pyx_t_4 = 1;
    }
  }
  __pyx_t_6 = PyTuple_New(2+__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  if (__pyx_t_5) {
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
  }
  __Pyx_INCREF(__pyx_v_strategies);
  __Pyx_GIVEREF(__pyx_v_strategies);
  PyTuple_SET_ITEM(__pyx_t_6, 0+__pyx_t_4, __pyx_v_strategies);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 1+__pyx_t_4, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 35, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_7) {

    /* "gambit/lib/stratspt.pxi":36
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()             # <<<<<<<<<<<<<<
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_game), __pyx_n_s_mixed_strategy_profile); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_3 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_3)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_3);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_3) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 36, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 36, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_restriction); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 36, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_2 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_2)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_2);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (__pyx_t_2) {
      __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 36, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 36, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = __pyx_t_1;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_temp_restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_6);
    __pyx_t_6 = 0;

    /* "gambit/lib/stratspt.pxi":37
 *        if self.is_valid(strategies, len(game.players)):
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))             # <<<<<<<<<<<<<<
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:
 */
    __pyx_v_self->support = new StrategySupportProfile((*__pyx_v_temp_restriction->support));

    /* "gambit/lib/stratspt.pxi":38
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:             # <<<<<<<<<<<<<<
 *                 if strategy not in strategies:
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_game), __pyx_n_s_strategies); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 38, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (likely(PyList_CheckExact(__pyx_t_6)) || PyTuple_CheckExact(__pyx_t_6)) {
      __pyx_t_1 = __pyx_t_6; __Pyx_INCREF(__pyx_t_1); __pyx_t_4 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_4 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_6); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 38, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_8 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 38, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_1))) {
          if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 38, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 38, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        } else {
          if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_6 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_4); __Pyx_INCREF(__pyx_t_6); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 38, __pyx_L1_error)
          #else
          __pyx_t_6 = PySequence_ITEM(__pyx_t_1, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 38, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_6);
          #endif
        }
      } else {
        __pyx_t_6 = __pyx_t_8(__pyx_t_1);
        if (unlikely(!__pyx_t_6)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(1, 38, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_6);
      }
      __Pyx_XDECREF_SET(__pyx_v_strategy, __pyx_t_6);
      __pyx_t_6 = 0;

      /* "gambit/lib/stratspt.pxi":39
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:             # <<<<<<<<<<<<<<
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 */
      __pyx_t_7 = (__Pyx_PySequence_ContainsTF(__pyx_v_strategy, __pyx_v_strategies, Py_NE)); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 39, __pyx_L1_error)
      __pyx_t_9 = (__pyx_t_7 != 0);
      if (__pyx_t_9) {

        /* "gambit/lib/stratspt.pxi":40
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)             # <<<<<<<<<<<<<<
 *        else:
 *             raise ValueError("invalid set of strategies")
 */
        __pyx_v_self->support->RemoveStrategy(((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_strategy)->strategy);

        /* "gambit/lib/stratspt.pxi":39
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:
 *                 if strategy not in strategies:             # <<<<<<<<<<<<<<
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 */
      }

      /* "gambit/lib/stratspt.pxi":38
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 *             for strategy in game.strategies:             # <<<<<<<<<<<<<<
 *                 if strategy not in strategies:
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 */
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "gambit/lib/stratspt.pxi":35
 *     def __init__(self, strategies, Game game not None):
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):             # <<<<<<<<<<<<<<
 *             temp_restriction = <StrategicRestriction>game.mixed_strategy_profile().restriction()
 *             self.support = new c_StrategySupportProfile(deref(temp_restriction.support))
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/stratspt.pxi":42
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 *             raise ValueError("invalid set of strategies")             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__35, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 42, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(1, 42, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/stratspt.pxi":33
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self, strategies, Game game not None):             # <<<<<<<<<<<<<<
 *        self.support = (<c_StrategySupportProfile *>0)
 *        if self.is_valid(strategies, len(game.players)):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_temp_restriction);
  __Pyx_XDECREF(__pyx_v_strategy);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":43
 *        else:
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/stratspt.pxi":44
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 */
  __pyx_t_1 = ((__pyx_v_self->support != ((StrategySupportProfile *)0)) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/stratspt.pxi":45
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support             # <<<<<<<<<<<<<<
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 */
    delete __pyx_v_self->support;

    /* "gambit/lib/stratspt.pxi":44
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 */
  }

  /* "gambit/lib/stratspt.pxi":43
 *        else:
 *             raise ValueError("invalid set of strategies")
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/stratspt.pxi":46
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_5__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_5__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_4__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_4__len__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);
  __pyx_r = __pyx_v_self->support->MixedProfileLength();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":47
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(1, 47, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile, 1, "self", 0))) __PYX_ERR(1, 47, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_6__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_6__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/stratspt.pxi":48
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             if whichop == 1:
 *                 return self.issubset(other)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":49
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:             # <<<<<<<<<<<<<<
 *                 return self.issubset(other)
 *             elif whichop == 2:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 49, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":50
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:
 *                 return self.issubset(other)             # <<<<<<<<<<<<<<
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_issubset); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 50, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_5)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_5);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_5) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 50, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 50, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
        __Pyx_INCREF(__pyx_v_other);
        __Pyx_GIVEREF(__pyx_v_other);
        PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_other);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 50, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":49
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:             # <<<<<<<<<<<<<<
 *                 return self.issubset(other)
 *             elif whichop == 2:
 */
    }

    /* "gambit/lib/stratspt.pxi":51
 *             if whichop == 1:
 *                 return self.issubset(other)
 *             elif whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 51, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":52
 *                 return self.issubset(other)
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) == (*((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 52, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":51
 *             if whichop == 1:
 *                 return self.issubset(other)
 *             elif whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/stratspt.pxi":53
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 53, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":54
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)             # <<<<<<<<<<<<<<
 *             elif whichop == 5:
 *                 return self.issuperset(other)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) != (*((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 54, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":53
 *             elif whichop == 2:
 *                 return deref(self.support) == deref((<StrategySupportProfile>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:
 */
    }

    /* "gambit/lib/stratspt.pxi":55
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:             # <<<<<<<<<<<<<<
 *                 return self.issuperset(other)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_5, 5, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 55, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":56
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:
 *                 return self.issuperset(other)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_issuperset); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 56, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_6 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
      } else {
        __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_v_other);
        __Pyx_GIVEREF(__pyx_v_other);
        PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_other);
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 56, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":55
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategySupportProfile>other).support)
 *             elif whichop == 5:             # <<<<<<<<<<<<<<
 *                 return self.issuperset(other)
 *             else:
 */
    }

    /* "gambit/lib/stratspt.pxi":58
 *                 return self.issuperset(other)
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(1, 58, __pyx_L1_error)
    }

    /* "gambit/lib/stratspt.pxi":48
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             if whichop == 1:
 *                 return self.issubset(other)
 */
  }

  /* "gambit/lib/stratspt.pxi":60
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 60, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":61
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":60
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/stratspt.pxi":62
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 62, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":63
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":62
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/stratspt.pxi":65
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(1, 65, __pyx_L1_error)
    }
  }

  /* "gambit/lib/stratspt.pxi":47
 *             del self.support
 *     def __len__(self):    return self.support.MixedProfileLength()
 *     def __richcmp__(StrategySupportProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             if whichop == 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":66
 *             else:
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_8__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_strat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strat) {
  Array<int>  __pyx_v_num_strategies;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  GameObjectPtr<GameStrategyRep> __pyx_t_11;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_strat);

  /* "gambit/lib/stratspt.pxi":67
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_strat); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":68
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_strat);
    __Pyx_GIVEREF(__pyx_v_strat);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_strat);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/stratspt.pxi":67
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  }

  /* "gambit/lib/stratspt.pxi":71
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 *         num_strategies = self.support.NumStrategies()             # <<<<<<<<<<<<<<
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 */
  __pyx_v_num_strategies = __pyx_v_self->support->NumStrategies();

  /* "gambit/lib/stratspt.pxi":72
 *         cdef Strategy s
 *         num_strategies = self.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):             # <<<<<<<<<<<<<<
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 */
  __pyx_t_8 = (__pyx_v_num_strategies.Length() + 1);
  for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "gambit/lib/stratspt.pxi":73
 *         num_strategies = self.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 */
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 73, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 73, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":74
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()             # <<<<<<<<<<<<<<
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restrict()
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "gambit/lib/stratspt.pxi":75
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)             # <<<<<<<<<<<<<<
 *                 s.restriction = self.restrict()
 *                 return s
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_strat, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 75, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_t_11 = __pyx_v_self->support->GetStrategy(__pyx_v_i, __pyx_t_10);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
        __PYX_ERR(1, 75, __pyx_L1_error)
      }
      __pyx_v_s->strategy = __pyx_t_11;

      /* "gambit/lib/stratspt.pxi":76
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restrict()             # <<<<<<<<<<<<<<
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_restrict); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_4, function);
        }
      }
      if (__pyx_t_7) {
        __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 76, __pyx_L1_error)
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      } else {
        __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 76, __pyx_L1_error)
      }
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction))))) __PYX_ERR(1, 76, __pyx_L1_error)
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_s->restriction);
      __Pyx_DECREF(((PyObject *)__pyx_v_s->restriction));
      __pyx_v_s->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "gambit/lib/stratspt.pxi":77
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restrict()
 *                 return s             # <<<<<<<<<<<<<<
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_s));
      __pyx_r = ((PyObject *)__pyx_v_s);
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":73
 *         num_strategies = self.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.support.GetStrategy(i, strat+1)
 */
    }

    /* "gambit/lib/stratspt.pxi":78
 *                 s.restriction = self.restrict()
 *                 return s
 *             strat = strat - num_strategies.getitem(i)             # <<<<<<<<<<<<<<
 *         raise IndexError("Index out of range")
 *     # Set-like methods
 */
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 78, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_strat, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "gambit/lib/stratspt.pxi":79
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *     # Set-like methods
 *     def __and__(self, other):
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__36, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 79, __pyx_L1_error)

  /* "gambit/lib/stratspt.pxi":66
 *             else:
 *                 raise NotImplementedError
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_strat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":81
 *         raise IndexError("Index out of range")
 *     # Set-like methods
 *     def __and__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_11__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_11__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__and__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_10__and__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_10__and__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__and__", 0);

  /* "gambit/lib/stratspt.pxi":82
 *     # Set-like methods
 *     def __and__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.intersection(other)
 *         raise NotImplementedError
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":83
 *     def __and__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 *     def __or__(self, other):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_intersection); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_other);
      __Pyx_GIVEREF(__pyx_v_other);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_other);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/stratspt.pxi":82
 *     # Set-like methods
 *     def __and__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.intersection(other)
 *         raise NotImplementedError
 */
  }

  /* "gambit/lib/stratspt.pxi":84
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(1, 84, __pyx_L1_error)

  /* "gambit/lib/stratspt.pxi":81
 *         raise IndexError("Index out of range")
 *     # Set-like methods
 *     def __and__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.intersection(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__and__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":85
 *             return self.intersection(other)
 *         raise NotImplementedError
 *     def __or__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_13__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_13__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__or__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_12__or__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_12__or__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__or__", 0);

  /* "gambit/lib/stratspt.pxi":86
 *         raise NotImplementedError
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.union(other)
 *         raise NotImplementedError
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":87
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 *     def __sub__(self, other):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_union); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_other);
      __Pyx_GIVEREF(__pyx_v_other);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_other);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 87, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/stratspt.pxi":86
 *         raise NotImplementedError
 *     def __or__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.union(other)
 *         raise NotImplementedError
 */
  }

  /* "gambit/lib/stratspt.pxi":88
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(1, 88, __pyx_L1_error)

  /* "gambit/lib/stratspt.pxi":85
 *             return self.intersection(other)
 *         raise NotImplementedError
 *     def __or__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.union(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__or__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":89
 *             return self.union(other)
 *         raise NotImplementedError
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_15__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_15__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__sub__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_14__sub__(((PyObject *)__pyx_v_self), ((PyObject *)__pyx_v_other));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_14__sub__(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__sub__", 0);

  /* "gambit/lib/stratspt.pxi":90
 *         raise NotImplementedError
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.difference(other)
 *         raise NotImplementedError
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":91
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)             # <<<<<<<<<<<<<<
 *         raise NotImplementedError
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_difference); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_other);
      __Pyx_GIVEREF(__pyx_v_other);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_other);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/stratspt.pxi":90
 *         raise NotImplementedError
 *     def __sub__(self, other):
 *         if isinstance(other, StrategySupportProfile):             # <<<<<<<<<<<<<<
 *             return self.difference(other)
 *         raise NotImplementedError
 */
  }

  /* "gambit/lib/stratspt.pxi":92
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)
 *         raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def remove(self, strategy):
 */
  __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
  __PYX_ERR(1, 92, __pyx_L1_error)

  /* "gambit/lib/stratspt.pxi":89
 *             return self.union(other)
 *         raise NotImplementedError
 *     def __sub__(self, other):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategySupportProfile):
 *             return self.difference(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.__sub__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":94
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_17remove(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_17remove(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_16remove(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_strategy));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":96
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:             # <<<<<<<<<<<<<<
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda = {"lambda", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_cur_scope;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda", 0);
  __pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_strategy)) { __Pyx_RaiseClosureNameError("strategy"); __PYX_ERR(1, 96, __pyx_L1_error) }
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_strategy, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 96, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.remove.lambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":94
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_16remove(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategy) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_cur_scope;
  PyObject *__pyx_v_strategies = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("remove", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct__remove(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct__remove, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_strategy = __pyx_v_strategy;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_strategy);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_strategy);

  /* "gambit/lib/stratspt.pxi":95
 * 
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 *                 strategies = list(self)[:]
 */
  __pyx_t_1 = __pyx_cur_scope->__pyx_v_strategy;
  __Pyx_INCREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "gambit/lib/stratspt.pxi":96
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:             # <<<<<<<<<<<<<<
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 */
    __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_6remove_lambda, 0, __pyx_n_s_remove_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 1, ((PyObject *)__pyx_v_self));
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_5 == -1)) __PYX_ERR(1, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = ((__pyx_t_5 > 1) != 0);
    if (__pyx_t_3) {

      /* "gambit/lib/stratspt.pxi":97
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 *                 strategies = list(self)[:]             # <<<<<<<<<<<<<<
 *                 strategies.remove(strategy)
 *                 return StrategySupportProfile(strategies, self.game)
 */
      __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyList_GetSlice(__pyx_t_1, 0, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 97, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_strategies = ((PyObject*)__pyx_t_4);
      __pyx_t_4 = 0;

      /* "gambit/lib/stratspt.pxi":98
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)             # <<<<<<<<<<<<<<
 *                 return StrategySupportProfile(strategies, self.game)
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_strategies, __pyx_n_s_remove); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
        __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_1);
        if (likely(__pyx_t_6)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
          __Pyx_INCREF(__pyx_t_6);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_1, function);
        }
      }
      if (!__pyx_t_6) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_cur_scope->__pyx_v_strategy); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
        __Pyx_INCREF(__pyx_cur_scope->__pyx_v_strategy);
        __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_strategy);
        PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_cur_scope->__pyx_v_strategy);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

      /* "gambit/lib/stratspt.pxi":99
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 *                 return StrategySupportProfile(strategies, self.game)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise UndefinedOperationError("cannot remove last strategy"\
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(__pyx_v_strategies);
      __Pyx_GIVEREF(__pyx_v_strategies);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_strategies);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_1, 1, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 99, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_r = __pyx_t_4;
      __pyx_t_4 = 0;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":96
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:             # <<<<<<<<<<<<<<
 *                 strategies = list(self)[:]
 *                 strategies.remove(strategy)
 */
    }

    /* "gambit/lib/stratspt.pxi":101
 *                 return StrategySupportProfile(strategies, self.game)
 *             else:
 *                 raise UndefinedOperationError("cannot remove last strategy"\             # <<<<<<<<<<<<<<
 *                                               " of a player")
 *         raise TypeError("delete requires a Strategy object")
 */
    /*else*/ {
      __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__37, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 101, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_1, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __PYX_ERR(1, 101, __pyx_L1_error)
    }

    /* "gambit/lib/stratspt.pxi":95
 * 
 *     def remove(self, strategy):
 *         if isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 *                 strategies = list(self)[:]
 */
  }

  /* "gambit/lib/stratspt.pxi":103
 *                 raise UndefinedOperationError("cannot remove last strategy"\
 *                                               " of a player")
 *         raise TypeError("delete requires a Strategy object")             # <<<<<<<<<<<<<<
 * 
 *     def difference(self, StrategySupportProfile other):
 */
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__38, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_Raise(__pyx_t_1, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __PYX_ERR(1, 103, __pyx_L1_error)

  /* "gambit/lib/stratspt.pxi":94
 *         raise NotImplementedError
 * 
 *     def remove(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, Strategy):
 *             if len(filter(lambda x: x.player == strategy.player, self)) > 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.remove", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strategies);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":105
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_19difference(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_19difference(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("difference (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_18difference(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":106
 * 
 *     def difference(self, StrategySupportProfile other):
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def intersection(self, StrategySupportProfile other):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1 = {"lambda1", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda1 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda1(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda1(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_cur_scope;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda1", 0);
  __pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_other)) { __Pyx_RaiseClosureNameError("other"); __PYX_ERR(1, 106, __pyx_L1_error) }
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_x, ((PyObject *)__pyx_cur_scope->__pyx_v_other), Py_NE)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 106, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.difference.lambda1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":105
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_18difference(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("difference", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_other = __pyx_v_other;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_other);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_other);

  /* "gambit/lib/stratspt.pxi":106
 * 
 *     def difference(self, StrategySupportProfile other):
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def intersection(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_10difference_lambda1, 0, __pyx_n_s_difference_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":105
 *         raise TypeError("delete requires a Strategy object")
 * 
 *     def difference(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.difference", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":108
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_21intersection(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_21intersection(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("intersection (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(1, 108, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_20intersection(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":109
 * 
 *     def intersection(self, StrategySupportProfile other):
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def is_valid(self, strategies, num_players):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2 = {"lambda2", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda2 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda2(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda2(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_cur_scope;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda2", 0);
  __pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_other)) { __Pyx_RaiseClosureNameError("other"); __PYX_ERR(1, 109, __pyx_L1_error) }
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_x, ((PyObject *)__pyx_cur_scope->__pyx_v_other), Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 109, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.intersection.lambda2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":108
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)
 * 
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_20intersection(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("intersection", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_other = __pyx_v_other;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_other);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_other);

  /* "gambit/lib/stratspt.pxi":109
 * 
 *     def intersection(self, StrategySupportProfile other):
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def is_valid(self, strategies, num_players):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_12intersection_lambda2, 0, __pyx_n_s_intersection_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":108
 *         return StrategySupportProfile(filter(lambda x: x not in other, self), self.game)
 * 
 *     def intersection(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.intersection", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":111
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)
 * 
 *     def is_valid(self, strategies, num_players):             # <<<<<<<<<<<<<<
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_23is_valid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_23is_valid(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strategies = 0;
  PyObject *__pyx_v_num_players = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_valid (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategies,&__pyx_n_s_num_players,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strategies)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_num_players)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("is_valid", 1, 2, 2, 1); __PYX_ERR(1, 111, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "is_valid") < 0)) __PYX_ERR(1, 111, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategies = values[0];
    __pyx_v_num_players = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("is_valid", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 111, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_22is_valid(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), __pyx_v_strategies, __pyx_v_num_players);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_22is_valid(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strategies, PyObject *__pyx_v_num_players) {
  PyObject *__pyx_v_strat = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("is_valid", 0);

  /* "gambit/lib/stratspt.pxi":112
 * 
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \             # <<<<<<<<<<<<<<
 *             & num_players >= 1:
 *             return True
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_strategies)) || PyTuple_CheckExact(__pyx_v_strategies)) {
    __pyx_t_2 = __pyx_v_strategies; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_strategies); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 112, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 112, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 112, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 112, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 112, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_strat, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_strat, __pyx_n_s_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_number); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_6))) __PYX_ERR(1, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySet_New(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PySet_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gambit/lib/stratspt.pxi":113
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:             # <<<<<<<<<<<<<<
 *             return True
 *         return False
 */
  __pyx_t_1 = PyNumber_And(__pyx_v_num_players, __pyx_v_num_players); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_6 = PyObject_RichCompare(__pyx_t_2, __pyx_t_1, Py_EQ); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 112, __pyx_L1_error)
  if (__Pyx_PyObject_IsTrue(__pyx_t_6)) {
    __Pyx_DECREF(__pyx_t_6);
    __pyx_t_6 = PyObject_RichCompare(__pyx_t_1, __pyx_int_1, Py_GE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 113, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":112
 * 
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \             # <<<<<<<<<<<<<<
 *             & num_players >= 1:
 *             return True
 */
  __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 112, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_7) {

    /* "gambit/lib/stratspt.pxi":114
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:
 *             return True             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_True);
    __pyx_r = Py_True;
    goto __pyx_L0;

    /* "gambit/lib/stratspt.pxi":112
 * 
 *     def is_valid(self, strategies, num_players):
 *         if len(set([strat.player.number for strat in strategies])) == num_players \             # <<<<<<<<<<<<<<
 *             & num_players >= 1:
 *             return True
 */
  }

  /* "gambit/lib/stratspt.pxi":115
 *             & num_players >= 1:
 *             return True
 *         return False             # <<<<<<<<<<<<<<
 * 
 *     def issubset(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":111
 *         return StrategySupportProfile(filter(lambda x: x in other, self), self.game)
 * 
 *     def is_valid(self, strategies, num_players):             # <<<<<<<<<<<<<<
 *         if len(set([strat.player.number for strat in strategies])) == num_players \
 *             & num_players >= 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.is_valid", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":117
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_25issubset(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_25issubset(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("issubset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(1, 117, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_24issubset(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":118
 * 
 *     def issubset(self, StrategySupportProfile other):
 *         return reduce(lambda acc,st: acc & (st in other), self, True)             # <<<<<<<<<<<<<<
 * 
 *     def issuperset(self, StrategySupportProfile other):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3 = {"lambda3", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_acc = 0;
  PyObject *__pyx_v_st = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda3 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_acc,&__pyx_n_s_st,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_acc)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_st)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda3", 1, 2, 2, 1); __PYX_ERR(1, 118, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda3") < 0)) __PYX_ERR(1, 118, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_acc = values[0];
    __pyx_v_st = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda3", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 118, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.issubset.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda3(__pyx_self, __pyx_v_acc, __pyx_v_st);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda3(PyObject *__pyx_self, PyObject *__pyx_v_acc, PyObject *__pyx_v_st) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_cur_scope;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("lambda3", 0);
  __pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_v_other)) { __Pyx_RaiseClosureNameError("other"); __PYX_ERR(1, 118, __pyx_L1_error) }
  __pyx_t_1 = (__Pyx_PySequence_ContainsTF(__pyx_v_st, ((PyObject *)__pyx_cur_scope->__pyx_v_other), Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 118, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyNumber_And(__pyx_v_acc, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.issubset.lambda3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":117
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_24issubset(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("issubset", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_other = __pyx_v_other;
  __Pyx_INCREF((PyObject *)__pyx_cur_scope->__pyx_v_other);
  __Pyx_GIVEREF((PyObject *)__pyx_cur_scope->__pyx_v_other);

  /* "gambit/lib/stratspt.pxi":118
 * 
 *     def issubset(self, StrategySupportProfile other):
 *         return reduce(lambda acc,st: acc & (st in other), self, True)             # <<<<<<<<<<<<<<
 * 
 *     def issuperset(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_22StrategySupportProfile_8issubset_lambda3, 0, __pyx_n_s_issubset_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(3); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, ((PyObject *)__pyx_v_self));
  __Pyx_INCREF(Py_True);
  __Pyx_GIVEREF(Py_True);
  PyTuple_SET_ITEM(__pyx_t_2, 2, Py_True);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_reduce, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":117
 *         return False
 * 
 *     def issubset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.issubset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":120
 *         return reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 *     def issuperset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return other.issubset(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_27issuperset(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_27issuperset(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("issuperset (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(1, 120, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_26issuperset(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_26issuperset(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("issuperset", 0);

  /* "gambit/lib/stratspt.pxi":121
 * 
 *     def issuperset(self, StrategySupportProfile other):
 *         return other.issubset(self)             # <<<<<<<<<<<<<<
 * 
 *     def restrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_other), __pyx_n_s_issubset); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 121, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":120
 *         return reduce(lambda acc,st: acc & (st in other), self, True)
 * 
 *     def issuperset(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return other.issubset(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.issuperset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":123
 *         return other.issubset(self)
 * 
 *     def restrict(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_29restrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_29restrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_28restrict(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_28restrict(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("restrict", 0);

  /* "gambit/lib/stratspt.pxi":125
 *     def restrict(self):
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         restriction.support = new c_StrategySupportProfile(deref(self.support))
 *         return restriction
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":126
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(deref(self.support))             # <<<<<<<<<<<<<<
 *         return restriction
 * 
 */
  __pyx_v_restriction->support = new StrategySupportProfile((*__pyx_v_self->support));

  /* "gambit/lib/stratspt.pxi":127
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(deref(self.support))
 *         return restriction             # <<<<<<<<<<<<<<
 * 
 *     def undominated(self, strict=False, external=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __pyx_r = ((PyObject *)__pyx_v_restriction);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":123
 *         return other.issubset(self)
 * 
 *     def restrict(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.restrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_restriction);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":129
 *         return restriction
 * 
 *     def undominated(self, strict=False, external=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_31undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_31undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strict = 0;
  PyObject *__pyx_v_external = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("undominated (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strict,&__pyx_n_s_external,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)Py_False);
    values[1] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strict);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_external);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "undominated") < 0)) __PYX_ERR(1, 129, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strict = values[0];
    __pyx_v_external = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("undominated", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 129, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_30undominated(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), __pyx_v_strict, __pyx_v_external);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_30undominated(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_strict, PyObject *__pyx_v_external) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_new_profile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  bool __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("undominated", 0);

  /* "gambit/lib/stratspt.pxi":131
 *     def undominated(self, strict=False, external=False):
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":132
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))             # <<<<<<<<<<<<<<
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)
 *         return new_profile
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_strict); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) __PYX_ERR(1, 132, __pyx_L1_error)
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_external); if (unlikely((__pyx_t_3 == (bool)-1) && PyErr_Occurred())) __PYX_ERR(1, 132, __pyx_L1_error)
  __pyx_v_restriction->support = new StrategySupportProfile(__pyx_v_self->support->Undominated(__pyx_t_2, __pyx_t_3));

  /* "gambit/lib/stratspt.pxi":133
 *         restriction = StrategicRestriction()
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)             # <<<<<<<<<<<<<<
 *         return new_profile
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_restriction), __pyx_n_s_strategies); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_new_profile = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "gambit/lib/stratspt.pxi":134
 *         restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, external))
 *         new_profile = StrategySupportProfile(restriction.strategies, self.game)
 *         return new_profile             # <<<<<<<<<<<<<<
 * 
 *     def union(self, StrategySupportProfile other):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_profile));
  __pyx_r = ((PyObject *)__pyx_v_new_profile);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":129
 *         return restriction
 * 
 *     def undominated(self, strict=False, external=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction restriction
 *         restriction = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_restriction);
  __Pyx_XDECREF((PyObject *)__pyx_v_new_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":136
 *         return new_profile
 * 
 *     def union(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_33union(PyObject *__pyx_v_self, PyObject *__pyx_v_other); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_33union(PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("union (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other), __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile, 1, "other", 0))) __PYX_ERR(1, 136, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_32union(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_other));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_32union(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("union", 0);

  /* "gambit/lib/stratspt.pxi":137
 * 
 *     def union(self, StrategySupportProfile other):
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)             # <<<<<<<<<<<<<<
 * 
 *     def unique(self, lst):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unique); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_other)); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyNumber_Add(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_5); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":136
 *         return new_profile
 * 
 *     def union(self, StrategySupportProfile other):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.union", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":139
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 *     def unique(self, lst):             # <<<<<<<<<<<<<<
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_35unique(PyObject *__pyx_v_self, PyObject *__pyx_v_lst); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_35unique(PyObject *__pyx_v_self, PyObject *__pyx_v_lst) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unique (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_34unique(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self), ((PyObject *)__pyx_v_lst));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_34unique(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self, PyObject *__pyx_v_lst) {
  PyObject *__pyx_v_uniq = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_t_10;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("unique", 0);

  /* "gambit/lib/stratspt.pxi":140
 * 
 *     def unique(self, lst):
 *         uniq = []             # <<<<<<<<<<<<<<
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 *         return uniq
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_uniq = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":141
 *     def unique(self, lst):
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]             # <<<<<<<<<<<<<<
 *         return uniq
 * 
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (likely(PyList_CheckExact(__pyx_v_lst)) || PyTuple_CheckExact(__pyx_v_lst)) {
    __pyx_t_2 = __pyx_v_lst; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_v_lst); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 141, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 141, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_5); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(1, 141, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 141, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 141, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_uniq, __pyx_n_s_count); if (unlikely(!__pyx_t_6)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_6);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_6, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_i); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(1, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_i);
      __Pyx_GIVEREF(__pyx_v_i);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_i);
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_9 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_9 < 0)) __PYX_ERR(1, 141, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_10 = ((!__pyx_t_9) != 0);
    if (__pyx_t_10) {
      __pyx_t_11 = __Pyx_PyList_Append(__pyx_v_uniq, __pyx_v_i); if (unlikely(__pyx_t_11 == -1)) __PYX_ERR(1, 141, __pyx_L1_error)
      __pyx_t_5 = __Pyx_Owned_Py_None(__pyx_t_11); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 141, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_5))) __PYX_ERR(1, 141, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":142
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 *         return uniq             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_uniq);
  __pyx_r = __pyx_v_uniq;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":139
 *         return StrategySupportProfile(self.unique(list(self) + list(other)), self.game)
 * 
 *     def unique(self, lst):             # <<<<<<<<<<<<<<
 *         uniq = []
 *         [uniq.append(i) for i in lst if not uniq.count(i)]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.unique", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_uniq);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":145
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22StrategySupportProfile_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":147
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.support.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":148
 *             cdef Game g
 *             g = Game()
 *             g.game = self.support.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->support->GetGame();

  /* "gambit/lib/stratspt.pxi":149
 *             g = Game()
 *             g.game = self.support.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 * cdef class RestrictionOutcomes(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":145
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategySupportProfile.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":155
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_restriction,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_restriction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 155, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 155, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.RestrictionOutcomes.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_restriction), __pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction, 0, "restriction", 0))) __PYX_ERR(1, 155, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes___init__(((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self), __pyx_v_restriction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes___init__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/stratspt.pxi":156
 * 
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction             # <<<<<<<<<<<<<<
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GOTREF(__pyx_v_self->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->restriction));
  __pyx_v_self->restriction = __pyx_v_restriction;

  /* "gambit/lib/stratspt.pxi":155
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":157
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameRep *__pyx_t_4;
  __Pyx_RefNannySetupContext("__len__", 0);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->restriction), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 157, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  try {
    __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1)->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(1, 157, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_4->NumOutcomes();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.RestrictionOutcomes.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":158
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_4__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self), ((PyObject *)__pyx_v_outc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, PyObject *__pyx_v_outc) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameOutcomeRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/stratspt.pxi":159
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_outc); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_outc);
    __Pyx_GIVEREF(__pyx_v_outc);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_outc);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/stratspt.pxi":161
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 *         c = Outcome()             # <<<<<<<<<<<<<<
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)
 *         c.restriction = self.restriction
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 161, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_c = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/stratspt.pxi":162
 *         cdef Outcome c
 *         c = Outcome()
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)             # <<<<<<<<<<<<<<
 *         c.restriction = self.restriction
 *         return c
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self->restriction), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_7 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (__pyx_t_7) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 162, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  } else {
    __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 162, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  try {
    __pyx_t_8 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_3)->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(1, 162, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_outc, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 162, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetOutcome(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(1, 162, __pyx_L1_error)
  }
  __pyx_v_c->outcome = __pyx_t_10;

  /* "gambit/lib/stratspt.pxi":163
 *         c = Outcome()
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)
 *         c.restriction = self.restriction             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  __pyx_t_3 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __Pyx_GOTREF(__pyx_v_c->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_c->restriction));
  __pyx_v_c->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/stratspt.pxi":164
 *         c.outcome = (<Game>self.restriction.unrestrict()).game.deref().GetOutcome(outc+1)
 *         c.restriction = self.restriction
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def add(self, label=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":158
 *         self.restriction = restriction
 *     def __len__(self):    return (<Game>self.restriction.unrestrict()).game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.RestrictionOutcomes.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":166
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_7add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_7add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_label = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(1, 166, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 166, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.RestrictionOutcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_6add(((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_19RestrictionOutcomes_6add(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_label) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("add", 0);

  /* "gambit/lib/stratspt.pxi":167
 * 
 *     def add(self, label=""):
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 * 
 * cdef class RestrictionStrategies(Collection):
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_2, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __PYX_ERR(1, 167, __pyx_L1_error)

  /* "gambit/lib/stratspt.pxi":166
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.RestrictionOutcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":173
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_restriction,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_restriction)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(1, 173, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 173, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.RestrictionStrategies.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_restriction), __pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction, 0, "restriction", 0))) __PYX_ERR(1, 173, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies___init__(((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self), __pyx_v_restriction);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies___init__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_restriction) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/stratspt.pxi":174
 * 
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction             # <<<<<<<<<<<<<<
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_restriction));
  __Pyx_GOTREF(__pyx_v_self->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->restriction));
  __pyx_v_self->restriction = __pyx_v_restriction;

  /* "gambit/lib/stratspt.pxi":173
 *     cdef StrategicRestriction restriction
 * 
 *     def __init__(self, StrategicRestriction restriction not None):             # <<<<<<<<<<<<<<
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":175
 *     def __init__(self, StrategicRestriction restriction not None):
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);
  __pyx_r = __pyx_v_self->restriction->support->MixedProfileLength();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":176
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_strat) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies_4__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)__pyx_v_self), ((PyObject *)__pyx_v_strat));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_21RestrictionStrategies_4__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_self, PyObject *__pyx_v_strat) {
  Array<int>  __pyx_v_num_strategies;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  long __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  long __pyx_t_8;
  long __pyx_t_9;
  int __pyx_t_10;
  GameObjectPtr<GameStrategyRep> __pyx_t_11;
  __Pyx_RefNannySetupContext("__getitem__", 0);
  __Pyx_INCREF(__pyx_v_strat);

  /* "gambit/lib/stratspt.pxi":177
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_strat); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":178
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_strat);
    __Pyx_GIVEREF(__pyx_v_strat);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_strat);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/stratspt.pxi":177
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):
 *         if not isinstance(strat, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, strat)
 *         cdef Array[int] num_strategies
 */
  }

  /* "gambit/lib/stratspt.pxi":181
 *         cdef Array[int] num_strategies
 *         cdef Strategy s
 *         num_strategies = self.restriction.support.NumStrategies()             # <<<<<<<<<<<<<<
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 */
  __pyx_v_num_strategies = __pyx_v_self->restriction->support->NumStrategies();

  /* "gambit/lib/stratspt.pxi":182
 *         cdef Strategy s
 *         num_strategies = self.restriction.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):             # <<<<<<<<<<<<<<
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 */
  __pyx_t_8 = (__pyx_v_num_strategies.Length() + 1);
  for (__pyx_t_9 = 1; __pyx_t_9 < __pyx_t_8; __pyx_t_9+=1) {
    __pyx_v_i = __pyx_t_9;

    /* "gambit/lib/stratspt.pxi":183
 *         num_strategies = self.restriction.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 */
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 183, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":184
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()             # <<<<<<<<<<<<<<
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restriction
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "gambit/lib/stratspt.pxi":185
 *             if strat - num_strategies.getitem(i) < 0:
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)             # <<<<<<<<<<<<<<
 *                 s.restriction = self.restriction
 *                 return s
 */
      __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_strat, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 185, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 185, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      try {
        __pyx_t_11 = __pyx_v_self->restriction->support->GetStrategy(__pyx_v_i, __pyx_t_10);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
        __PYX_ERR(1, 185, __pyx_L1_error)
      }
      __pyx_v_s->strategy = __pyx_t_11;

      /* "gambit/lib/stratspt.pxi":186
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restriction             # <<<<<<<<<<<<<<
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 */
      __pyx_t_3 = ((PyObject *)__pyx_v_self->restriction);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_v_s->restriction);
      __Pyx_DECREF(((PyObject *)__pyx_v_s->restriction));
      __pyx_v_s->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
      __pyx_t_3 = 0;

      /* "gambit/lib/stratspt.pxi":187
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 *                 s.restriction = self.restriction
 *                 return s             # <<<<<<<<<<<<<<
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_s));
      __pyx_r = ((PyObject *)__pyx_v_s);
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":183
 *         num_strategies = self.restriction.support.NumStrategies()
 *         for i in range(1,num_strategies.Length()+1):
 *             if strat - num_strategies.getitem(i) < 0:             # <<<<<<<<<<<<<<
 *                 s = Strategy()
 *                 s.strategy = self.restriction.support.GetStrategy(i, strat+1)
 */
    }

    /* "gambit/lib/stratspt.pxi":188
 *                 s.restriction = self.restriction
 *                 return s
 *             strat = strat - num_strategies.getitem(i)             # <<<<<<<<<<<<<<
 *         raise IndexError("Index out of range")
 * 
 */
    try {
      __pyx_t_10 = __pyx_v_num_strategies.operator[](__pyx_v_i);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(1, 188, __pyx_L1_error)
    }
    __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_10); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyNumber_Subtract(__pyx_v_strat, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF_SET(__pyx_v_strat, __pyx_t_4);
    __pyx_t_4 = 0;
  }

  /* "gambit/lib/stratspt.pxi":189
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 * 
 * cdef class StrategicRestriction(BaseGame):
 */
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_tuple__40, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(1, 189, __pyx_L1_error)

  /* "gambit/lib/stratspt.pxi":176
 *         self.restriction = restriction
 *     def __len__(self):    return self.restriction.support.MixedProfileLength()
 *     def __getitem__(self, strat):             # <<<<<<<<<<<<<<
 *         if not isinstance(strat, int):
 *             return Collection.__getitem__(self, strat)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.RestrictionStrategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_strat);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":198
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction___init__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction___init__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/stratspt.pxi":199
 * 
 *     def __init__(self):
 *         self.support = (<c_StrategySupportProfile *>0)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 */
  __pyx_v_self->support = ((StrategySupportProfile *)0);

  /* "gambit/lib/stratspt.pxi":198
 *     cdef c_StrategySupportProfile *support
 * 
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":200
 *     def __init__(self):
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/stratspt.pxi":201
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __repr__(self):
 */
  __pyx_t_1 = ((__pyx_v_self->support != ((StrategySupportProfile *)0)) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/stratspt.pxi":202
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return self.write()
 */
    delete __pyx_v_self->support;

    /* "gambit/lib/stratspt.pxi":201
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):             # <<<<<<<<<<<<<<
 *             del self.support
 *     def __repr__(self):
 */
  }

  /* "gambit/lib/stratspt.pxi":200
 *     def __init__(self):
 *         self.support = (<c_StrategySupportProfile *>0)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/stratspt.pxi":203
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_4__repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_4__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/stratspt.pxi":204
 *             del self.support
 *     def __repr__(self):
 *         return self.write()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 204, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 204, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":203
 *         if self.support != (<c_StrategySupportProfile *>0):
 *             del self.support
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":206
 *         return self.write()
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(1, 206, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction, 1, "self", 0))) __PYX_ERR(1, 206, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_6__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_6__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/stratspt.pxi":207
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":208
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 208, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 208, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":209
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) == (*((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 209, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":208
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/stratspt.pxi":210
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 210, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":211
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_3 = __Pyx_PyBool_FromLong(((*__pyx_v_self->support) != (*((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_other)->support))); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 211, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":210
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 *             else:
 */
    }

    /* "gambit/lib/stratspt.pxi":213
 *                 return deref(self.support) != deref((<StrategicRestriction>other).support)
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(1, 213, __pyx_L1_error)
    }

    /* "gambit/lib/stratspt.pxi":207
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):
 *         if isinstance(other, StrategicRestriction):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return deref(self.support) == deref((<StrategicRestriction>other).support)
 */
  }

  /* "gambit/lib/stratspt.pxi":215
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 215, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 215, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":216
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":215
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/stratspt.pxi":217
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 217, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/stratspt.pxi":218
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/stratspt.pxi":217
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/stratspt.pxi":220
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(1, 220, __pyx_L1_error)
    }
  }

  /* "gambit/lib/stratspt.pxi":206
 *         return self.write()
 * 
 *     def __richcmp__(StrategicRestriction self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, StrategicRestriction):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":222
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>&self.support)
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_9__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_9__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_8__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_8__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_hash_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/stratspt.pxi":223
 * 
 *     def __hash__(self):
 *         return long(<long>&self.support)             # <<<<<<<<<<<<<<
 * 
 *     property title:
 */
  __pyx_t_1 = __Pyx_PyInt_From_long(((long)(&__pyx_v_self->support))); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyInt_AsHash_t(__pyx_t_1); if (unlikely((__pyx_t_3 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(1, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_3;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":222
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>&self.support)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":226
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "Restriction from Game '%s'" % self.unrestrict().title
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_5title_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_5title_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_5title___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_5title___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":227
 *     property title:
 *         def __get__(self):
 *             return "Restriction from Game '%s'" % self.unrestrict().title             # <<<<<<<<<<<<<<
 * 
 *     property players:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_title); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_Restriction_from_Game_s, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":226
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return "Restriction from Game '%s'" % self.unrestrict().title
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.title.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":230
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7players_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7players_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_7players___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_7players___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  GameObjectPtr<GameRep> __pyx_t_4;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":232
 *         def __get__(self):
 *             cdef Players p
 *             p = Players()             # <<<<<<<<<<<<<<
 *             p.game = (<Game>self.unrestrict()).game
 *             p.restriction = self
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Players), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 232, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Players *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":233
 *             cdef Players p
 *             p = Players()
 *             p.game = (<Game>self.unrestrict()).game             # <<<<<<<<<<<<<<
 *             p.restriction = self
 *             return p
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 233, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1)->game;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_p->game = __pyx_t_4;

  /* "gambit/lib/stratspt.pxi":234
 *             p = Players()
 *             p.game = (<Game>self.unrestrict()).game
 *             p.restriction = self             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __Pyx_GOTREF(__pyx_v_p->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
  __pyx_v_p->restriction = __pyx_v_self;

  /* "gambit/lib/stratspt.pxi":235
 *             p.game = (<Game>self.unrestrict()).game
 *             p.restriction = self
 *             return p             # <<<<<<<<<<<<<<
 * 
 *     property strategies:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":230
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.players.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":238
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10strategies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10strategies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10strategies___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10strategies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":240
 *         def __get__(self):
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_RestrictionStrategies), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 240, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/stratspt.pxi":241
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property outcomes:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":238
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionStrategies s
 *             s = RestrictionStrategies(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.strategies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":244
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_8outcomes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_8outcomes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_8outcomes___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_8outcomes___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *__pyx_v_o = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":246
 *         def __get__(self):
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)             # <<<<<<<<<<<<<<
 *             return o
 * 
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_RestrictionOutcomes), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_o = ((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/stratspt.pxi":247
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)
 *             return o             # <<<<<<<<<<<<<<
 * 
 *     property is_tree:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_o));
  __pyx_r = ((PyObject *)__pyx_v_o);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":244
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef RestrictionOutcomes o
 *             o = RestrictionOutcomes(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.outcomes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":250
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Any strategic restriction is automatically not a tree
 *             # representation, even if the parent game does have one.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7is_tree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7is_tree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_7is_tree___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_7is_tree___get__(CYTHON_UNUSED struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":253
 *             # Any strategic restriction is automatically not a tree
 *             # representation, even if the parent game does have one.
 *             return False             # <<<<<<<<<<<<<<
 * 
 *     property is_const_sum:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":250
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             # Any strategic restriction is automatically not a tree
 *             # representation, even if the parent game does have one.
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":256
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_const_sum
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":257
 *     property is_const_sum:
 *         def __get__(self):
 *             return self.unrestrict().is_const_sum             # <<<<<<<<<<<<<<
 * 
 *     property is_perfect_recall:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 257, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_const_sum); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":256
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_const_sum
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.is_const_sum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":260
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_perfect_recall
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":261
 *     property is_perfect_recall:
 *         def __get__(self):
 *             return self.unrestrict().is_perfect_recall             # <<<<<<<<<<<<<<
 * 
 *     property min_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 261, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_perfect_recall); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":260
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().is_perfect_recall
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.is_perfect_recall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":264
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().min_payoff
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10min_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10min_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10min_payoff___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10min_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":265
 *     property min_payoff:
 *         def __get__(self):
 *             return self.unrestrict().min_payoff             # <<<<<<<<<<<<<<
 * 
 *     property max_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 265, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 265, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_min_payoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":264
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().min_payoff
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.min_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":268
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().max_payoff
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10max_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10max_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10max_payoff___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10max_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/stratspt.pxi":269
 *     property max_payoff:
 *         def __get__(self):
 *             return self.unrestrict().max_payoff             # <<<<<<<<<<<<<<
 * 
 *     def write(self, format='native'):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 269, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_max_payoff); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":268
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.unrestrict().max_payoff
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.max_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":271
 *             return self.unrestrict().max_payoff
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         if format != 'native' and format != 'nfg':
 *             raise NotImplementedError
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_11write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_11write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write") < 0)) __PYX_ERR(1, 271, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_format = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 271, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10write(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_format);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_10write(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_format) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("write", 0);

  /* "gambit/lib/stratspt.pxi":272
 * 
 *     def write(self, format='native'):
 *         if format != 'native' and format != 'nfg':             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         else:
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_format, __pyx_n_s_native, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 272, __pyx_L1_error)
  if (__pyx_t_2) {
  } else {
    __pyx_t_1 = __pyx_t_2;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_format, __pyx_n_s_nfg, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(1, 272, __pyx_L1_error)
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  if (__pyx_t_1) {

    /* "gambit/lib/stratspt.pxi":273
 *     def write(self, format='native'):
 *         if format != 'native' and format != 'nfg':
 *             raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             return WriteGame(deref(self.support)).c_str()
 */
    __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
    __PYX_ERR(1, 273, __pyx_L1_error)

    /* "gambit/lib/stratspt.pxi":272
 * 
 *     def write(self, format='native'):
 *         if format != 'native' and format != 'nfg':             # <<<<<<<<<<<<<<
 *             raise NotImplementedError
 *         else:
 */
  }

  /* "gambit/lib/stratspt.pxi":275
 *             raise NotImplementedError
 *         else:
 *             return WriteGame(deref(self.support)).c_str()             # <<<<<<<<<<<<<<
 * 
 *     def undominated(self, strict=False):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = WriteGame((*__pyx_v_self->support));
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IOError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
      __PYX_ERR(1, 275, __pyx_L1_error)
    }
    __pyx_t_4 = __Pyx_PyBytes_FromString(__pyx_t_3.c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(1, 275, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/stratspt.pxi":271
 *             return self.unrestrict().max_payoff
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         if format != 'native' and format != 'nfg':
 *             raise NotImplementedError
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":277
 *             return WriteGame(deref(self.support)).c_str()
 * 
 *     def undominated(self, strict=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_13undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_13undominated(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_strict = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("undominated (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strict,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strict);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "undominated") < 0)) __PYX_ERR(1, 277, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_strict = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("undominated", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 277, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_12undominated(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_strict);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_12undominated(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_strict) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_new_restriction = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  bool __pyx_t_2;
  __Pyx_RefNannySetupContext("undominated", 0);

  /* "gambit/lib/stratspt.pxi":279
 *     def undominated(self, strict=False):
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         new_restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, False))
 *         return new_restriction
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 279, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_new_restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":280
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()
 *         new_restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, False))             # <<<<<<<<<<<<<<
 *         return new_restriction
 * 
 */
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_strict); if (unlikely((__pyx_t_2 == (bool)-1) && PyErr_Occurred())) __PYX_ERR(1, 280, __pyx_L1_error)
  __pyx_v_new_restriction->support = new StrategySupportProfile(__pyx_v_self->support->Undominated(__pyx_t_2, 0));

  /* "gambit/lib/stratspt.pxi":281
 *         new_restriction = StrategicRestriction()
 *         new_restriction.support = new c_StrategySupportProfile(self.support.Undominated(strict, False))
 *         return new_restriction             # <<<<<<<<<<<<<<
 * 
 *     def num_strategies_player(self, pl):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_new_restriction));
  __pyx_r = ((PyObject *)__pyx_v_new_restriction);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":277
 *             return WriteGame(deref(self.support)).c_str()
 * 
 *     def undominated(self, strict=False):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction new_restriction
 *         new_restriction = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.undominated", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_new_restriction);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":283
 *         return new_restriction
 * 
 *     def num_strategies_player(self, pl):             # <<<<<<<<<<<<<<
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_15num_strategies_player(PyObject *__pyx_v_self, PyObject *__pyx_v_pl); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_15num_strategies_player(PyObject *__pyx_v_self, PyObject *__pyx_v_pl) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_strategies_player (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_14num_strategies_player(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), ((PyObject *)__pyx_v_pl));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_14num_strategies_player(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_pl) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  __Pyx_RefNannySetupContext("num_strategies_player", 0);

  /* "gambit/lib/stratspt.pxi":284
 * 
 *     def num_strategies_player(self, pl):
 *         return self.support.NumStrategiesPlayer(pl+1)             # <<<<<<<<<<<<<<
 * 
 *     def support_profile(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  try {
    __pyx_t_3 = __pyx_v_self->support->NumStrategies(__pyx_t_2);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(1, 284, __pyx_L1_error)
  }
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 284, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":283
 *         return new_restriction
 * 
 *     def num_strategies_player(self, pl):             # <<<<<<<<<<<<<<
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.num_strategies_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":286
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_17support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_17support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("support_profile (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_16support_profile(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_16support_profile(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("support_profile", 0);

  /* "gambit/lib/stratspt.pxi":287
 * 
 *     def support_profile(self):
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategies); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_unrestrict); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_3, function);
    }
  }
  if (__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_3, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_1);
  __pyx_t_2 = 0;
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 287, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":286
 *         return self.support.NumStrategiesPlayer(pl+1)
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.support_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":289
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_19unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_19unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_18unrestrict(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_18unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "gambit/lib/stratspt.pxi":291
 *     def unrestrict(self):
 *         cdef Game g
 *         g = Game()             # <<<<<<<<<<<<<<
 *         g.game = self.support.GetGame()
 *         return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 291, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/stratspt.pxi":292
 *         cdef Game g
 *         g = Game()
 *         g.game = self.support.GetGame()             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->support->GetGame();

  /* "gambit/lib/stratspt.pxi":293
 *         g = Game()
 *         g.game = self.support.GetGame()
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     ###
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":289
 *         return StrategySupportProfile(list(self.strategies), self.unrestrict())
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":301
 *     ###
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_21_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_21_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_contingency (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_get_contingency", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_20_get_contingency(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_20_get_contingency(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_args) {
  PureStrategyProfile *__pyx_v_psp;
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_outcome = 0;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  GameObjectPtr<GameStrategyRep> __pyx_t_8;
  __Pyx_RefNannySetupContext("_get_contingency", 0);

  /* "gambit/lib/stratspt.pxi":304
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 *         psp = new c_PureStrategyProfile(deref(self.support).GetGame().deref().NewPureStrategyProfile())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = (*__pyx_v_self->support).GetGame().operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(1, 304, __pyx_L1_error)
  }
  __pyx_v_psp = new PureStrategyProfile(__pyx_t_1->NewPureStrategyProfile());

  /* "gambit/lib/stratspt.pxi":307
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __pyx_v_args; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 307, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "gambit/lib/stratspt.pxi":308
 * 
 *         for (pl, st) in enumerate(args):
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))             # <<<<<<<<<<<<<<
 * 
 *         outcome = Outcome()
 */
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(1, 308, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_8 = (*__pyx_v_self->support).GetStrategy(__pyx_t_6, __pyx_t_7);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(1, 308, __pyx_L1_error)
    }
    __pyx_v_psp->operator->()->SetStrategy(__pyx_t_8);

    /* "gambit/lib/stratspt.pxi":307
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/stratspt.pxi":310
 *             psp.deref().SetStrategy(deref(self.support).GetStrategy(pl+1, st+1))
 * 
 *         outcome = Outcome()             # <<<<<<<<<<<<<<
 *         outcome.outcome = psp.deref().GetOutcome()
 *         del psp
 */
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_outcome = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/stratspt.pxi":311
 * 
 *         outcome = Outcome()
 *         outcome.outcome = psp.deref().GetOutcome()             # <<<<<<<<<<<<<<
 *         del psp
 *         return outcome
 */
  __pyx_v_outcome->outcome = __pyx_v_psp->operator->()->GetOutcome();

  /* "gambit/lib/stratspt.pxi":312
 *         outcome = Outcome()
 *         outcome.outcome = psp.deref().GetOutcome()
 *         del psp             # <<<<<<<<<<<<<<
 *         return outcome
 * 
 */
  delete __pyx_v_psp;

  /* "gambit/lib/stratspt.pxi":313
 *         outcome.outcome = psp.deref().GetOutcome()
 *         del psp
 *         return outcome             # <<<<<<<<<<<<<<
 * 
 *     # As of Cython 0.11.2, cython does not support the * notation for the argument
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_outcome));
  __pyx_r = ((PyObject *)__pyx_v_outcome);
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":301
 *     ###
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction._get_contingency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_outcome);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":318
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_23__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_23__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_22__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_22__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_v_cont = NULL;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/stratspt.pxi":319
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "gambit/lib/stratspt.pxi":320
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_i); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 320, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 320, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 320, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = ((__pyx_t_4 != __pyx_t_6) != 0);
      if (__pyx_t_7) {

        /* "gambit/lib/stratspt.pxi":321
 *         try:
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 */
        __Pyx_Raise(__pyx_builtin_KeyError, __pyx_kp_s_Number_of_strategies_is_not_equa, 0, 0);
        __PYX_ERR(1, 321, __pyx_L3_error)

        /* "gambit/lib/stratspt.pxi":320
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      }

      /* "gambit/lib/stratspt.pxi":319
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/stratspt.pxi":322
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(1, 322, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_10);

      /* "gambit/lib/stratspt.pxi":323
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"             # <<<<<<<<<<<<<<
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 */
      __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_contingency_must_be_a_tuple_like, 0, 0);
      __PYX_ERR(1, 323, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "gambit/lib/stratspt.pxi":319
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "gambit/lib/stratspt.pxi":324
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)             # <<<<<<<<<<<<<<
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyList_SET_ITEM(__pyx_t_10, __pyx_temp, __pyx_int_0);
    }
  }
  __pyx_v_cont = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "gambit/lib/stratspt.pxi":325
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_10 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_i)) || PyTuple_CheckExact(__pyx_v_i)) {
    __pyx_t_9 = __pyx_v_i; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(1, 325, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 325, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(1, 325, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_11(__pyx_t_9);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(1, 325, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_10);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_10, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 325, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10);
    __pyx_t_10 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "gambit/lib/stratspt.pxi":326
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
    __pyx_t_7 = PyInt_Check(__pyx_v_st); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (__pyx_t_12) {

      /* "gambit/lib/stratspt.pxi":327
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_st, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 327, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!__pyx_t_7) {
      } else {
        __pyx_t_12 = __pyx_t_7;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyObject_GetItem(__pyx_t_5, __pyx_v_pl); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_strategies); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_4 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyObject_RichCompare(__pyx_v_st, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(1, 327, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_12 = __pyx_t_7;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_12) {

        /* "gambit/lib/stratspt.pxi":328
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)             # <<<<<<<<<<<<<<
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 */
        __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_v_st);
        __Pyx_GIVEREF(__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_st);
        __Pyx_INCREF(__pyx_v_pl);
        __Pyx_GIVEREF(__pyx_v_pl);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_pl);
        __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_index_d_out_of, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 328, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(1, 328, __pyx_L1_error)

        /* "gambit/lib/stratspt.pxi":327
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      }

      /* "gambit/lib/stratspt.pxi":329
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, str):
 *                 try:
 */
      if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_v_st) < 0)) __PYX_ERR(1, 329, __pyx_L1_error)

      /* "gambit/lib/stratspt.pxi":326
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
      goto __pyx_L16;
    }

    /* "gambit/lib/stratspt.pxi":330
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
    __pyx_t_12 = PyString_Check(__pyx_v_st); 
    __pyx_t_7 = (__pyx_t_12 != 0);
    if (__pyx_t_7) {

      /* "gambit/lib/stratspt.pxi":331
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_1);
        /*try:*/ {

          /* "gambit/lib/stratspt.pxi":332
 *             elif isinstance(st, str):
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 */
          __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 332, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 332, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = PyObject_GetItem(__pyx_t_14, __pyx_v_pl); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 332, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_strategies); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 332, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
            __pyx_t_15 = __pyx_t_14; __Pyx_INCREF(__pyx_t_15); __pyx_t_4 = 0;
            __pyx_t_16 = NULL;
          } else {
            __pyx_t_4 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 332, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(1, 332, __pyx_L20_error)
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          for (;;) {
            if (likely(!__pyx_t_16)) {
              if (likely(PyList_CheckExact(__pyx_t_15))) {
                if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_15)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_14 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 332, __pyx_L20_error)
                #else
                __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 332, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_14);
                #endif
              } else {
                if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(1, 332, __pyx_L20_error)
                #else
                __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 332, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_14);
                #endif
              }
            } else {
              __pyx_t_14 = __pyx_t_16(__pyx_t_15);
              if (unlikely(!__pyx_t_14)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(1, 332, __pyx_L20_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_14);
            }
            __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_14);
            __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_label); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 332, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_14))) __PYX_ERR(1, 332, __pyx_L20_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 332, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          if (!__pyx_t_13) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 332, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 332, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
            __Pyx_INCREF(__pyx_v_st);
            __Pyx_GIVEREF(__pyx_v_st);
            PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_st);
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 332, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_5) < 0)) __PYX_ERR(1, 332, __pyx_L20_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "gambit/lib/stratspt.pxi":331
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L27_try_end;
        __pyx_L20_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "gambit/lib/stratspt.pxi":333
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_15, &__pyx_t_14) < 0) __PYX_ERR(1, 333, __pyx_L22_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_14);

          /* "gambit/lib/stratspt.pxi":334
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, Strategy):
 *                 try:
 */
          __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_label_s_not_de, __pyx_v_st); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 334, __pyx_L22_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_13, 0, 0);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __PYX_ERR(1, 334, __pyx_L22_except_error)
        }
        goto __pyx_L22_except_error;
        __pyx_L22_except_error:;

        /* "gambit/lib/stratspt.pxi":331
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
        goto __pyx_L1_error;
        __pyx_L27_try_end:;
      }

      /* "gambit/lib/stratspt.pxi":330
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
      goto __pyx_L16;
    }

    /* "gambit/lib/stratspt.pxi":335
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
    __pyx_t_7 = __Pyx_TypeCheck(__pyx_v_st, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (__pyx_t_12) {

      /* "gambit/lib/stratspt.pxi":336
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_3);
        /*try:*/ {

          /* "gambit/lib/stratspt.pxi":337
 *             elif isinstance(st, Strategy):
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 337, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_5 = PyObject_GetItem(__pyx_t_15, __pyx_v_pl); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 337, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strategies); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 337, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PySequence_List(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 337, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(1, 337, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          if (!__pyx_t_5) {
            __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 337, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_14);
          } else {
            __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 337, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_INCREF(__pyx_v_st);
            __Pyx_GIVEREF(__pyx_v_st);
            PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_v_st);
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_13, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(1, 337, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_14) < 0)) __PYX_ERR(1, 337, __pyx_L32_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "gambit/lib/stratspt.pxi":336
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L39_try_end;
        __pyx_L32_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "gambit/lib/stratspt.pxi":338
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_13) < 0) __PYX_ERR(1, 338, __pyx_L34_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_13);

          /* "gambit/lib/stratspt.pxi":339
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 */
          __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_s_not_availabl, __pyx_v_st); if (unlikely(!__pyx_t_5)) __PYX_ERR(1, 339, __pyx_L34_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __PYX_ERR(1, 339, __pyx_L34_except_error)
        }
        goto __pyx_L34_except_error;
        __pyx_L34_except_error:;

        /* "gambit/lib/stratspt.pxi":336
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
        goto __pyx_L1_error;
        __pyx_L39_try_end:;
      }

      /* "gambit/lib/stratspt.pxi":335
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
      goto __pyx_L16;
    }

    /* "gambit/lib/stratspt.pxi":341
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")             # <<<<<<<<<<<<<<
 *         return self._get_contingency(*tuple(cont))
 * 
 */
    /*else*/ {
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__41, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 341, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_Raise(__pyx_t_13, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __PYX_ERR(1, 341, __pyx_L1_error)
    }
    __pyx_L16:;

    /* "gambit/lib/stratspt.pxi":325
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "gambit/lib/stratspt.pxi":342
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 *         return self._get_contingency(*tuple(cont))             # <<<<<<<<<<<<<<
 * 
 *     def mixed_strategy_profile(self, rational=False):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_contingency); if (unlikely(!__pyx_t_10)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyList_AsTuple(__pyx_v_cont); if (unlikely(!__pyx_t_9)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(1, 342, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_13;
  __pyx_t_13 = 0;
  goto __pyx_L0;

  /* "gambit/lib/stratspt.pxi":318
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cont);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/stratspt.pxi":344
 *         return self._get_contingency(*tuple(cont))
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_25mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_25mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rational = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mixed_strategy_profile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rational,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rational);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mixed_strategy_profile") < 0)) __PYX_ERR(1, 344, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rational = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mixed_strategy_profile", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(1, 344, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_24mixed_strategy_profile(((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_v_self), __pyx_v_rational);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20StrategicRestriction_24mixed_strategy_profile(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_self, PyObject *__pyx_v_rational) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mspd = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mspr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("mixed_strategy_profile", 0);

  /* "gambit/lib/stratspt.pxi":348
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_rational); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(1, 348, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_1) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/stratspt.pxi":349
 *         cdef c_Rational dummy_rat
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 *             return mspd
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_mspd = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/stratspt.pxi":350
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())             # <<<<<<<<<<<<<<
 *             return mspd
 *         else:
 */
    __pyx_v_mspd->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->support).NewMixedStrategyProfile<double>());

    /* "gambit/lib/stratspt.pxi":351
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 *             return mspd             # <<<<<<<<<<<<<<
 *         else:
 *             mspr = MixedStrategyProfileRational()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspd));
    __pyx_r = ((PyObject *)__pyx_v_mspd);
    goto __pyx_L0;

    /* "gambit/lib/stratspt.pxi":348
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(deref(self.support).NewMixedStrategyProfileDouble())
 */
  }

  /* "gambit/lib/stratspt.pxi":353
 *             return mspd
 *         else:
 *             mspr = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             mspr.profile = new c_MixedStrategyProfileRational(deref(self.support).NewMixedStrategyProfileRational())
 *             return mspr
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(1, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_mspr = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/stratspt.pxi":354
 *         else:
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(deref(self.support).NewMixedStrategyProfileRational())             # <<<<<<<<<<<<<<
 *             return mspr
 */
    __pyx_v_mspr->profile = new MixedStrategyProfile<Rational> ((*__pyx_v_self->support).NewMixedStrategyProfile<Rational>());

    /* "gambit/lib/stratspt.pxi":355
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(deref(self.support).NewMixedStrategyProfileRational())
 *             return mspr             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspr));
    __pyx_r = ((PyObject *)__pyx_v_mspr);
    goto __pyx_L0;
  }

  /* "gambit/lib/stratspt.pxi":344
 *         return self._get_contingency(*tuple(cont))
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.StrategicRestriction.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mspd);
  __Pyx_XDECREF((PyObject *)__pyx_v_mspr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":29
 * 
 * cdef class MixedStrategyProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/mixed.pxi":30
 * cdef class MixedStrategyProfile(object):
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])             # <<<<<<<<<<<<<<
 * 
 *     def _repr_latex_(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 30, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 30, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 30, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 30, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 30, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 30, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_player, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 30, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(2, 30, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 30, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":29
 * 
 * cdef class MixedStrategyProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":32
 *         return str([ self[player] for player in self.game.players ])
 * 
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_2_repr_latex_(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_2_repr_latex_(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);

  /* "gambit/lib/mixed.pxi":33
 * 
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 33, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 33, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 33, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(2, 33, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 33, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 33, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_player, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_player); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 33, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 33, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__43, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(2, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__18, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":32
 *         return str([ self[player] for player in self.game.players ])
 * 
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":35
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(2, 35, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfile, 1, "self", 0))) __PYX_ERR(2, 35, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_4__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_4__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/mixed.pxi":36
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":37
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 *         if whichop == 0:
 *             return list(self) < list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":36
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  }

  /* "gambit/lib/mixed.pxi":38
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":39
 *             return list(self) < list(other)
 *         elif whichop == 1:
 *             return list(self) <= list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 2:
 *             return list(self) == list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":38
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  }

  /* "gambit/lib/mixed.pxi":40
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":41
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 *             return list(self) == list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 3:
 *             return list(self) != list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":40
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  }

  /* "gambit/lib/mixed.pxi":42
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 42, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":43
 *             return list(self) == list(other)
 *         elif whichop == 3:
 *             return list(self) != list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 4:
 *             return list(self) > list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":42
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  }

  /* "gambit/lib/mixed.pxi":44
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(2, 44, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":45
 *             return list(self) != list(other)
 *         elif whichop == 4:
 *             return list(self) > list(other)             # <<<<<<<<<<<<<<
 *         else:
 *             return list(self) >= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 45, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":44
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  }

  /* "gambit/lib/mixed.pxi":47
 *             return list(self) > list(other)
 *         else:
 *             return list(self) >= list(other)             # <<<<<<<<<<<<<<
 * 
 *     def _resolve_index(self, index, players=True):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 47, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/mixed.pxi":35
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":49
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_players = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_resolve_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_players,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_players);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_resolve_index") < 0)) __PYX_ERR(2, 49, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
    __pyx_v_players = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_resolve_index", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 49, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_6_resolve_index(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_players);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":59
 *         else:
 *             # if no player matches, check strategy labels
 *             strategies = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                 [ list(p.strategies)
 *                                   for p in self.game.players ])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4 = {"lambda4", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda4 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda4", 1, 2, 2, 1); __PYX_ERR(2, 59, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda4") < 0)) __PYX_ERR(2, 59, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda4", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 59, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._resolve_index.lambda4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda4(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda4(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda4", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 59, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._resolve_index.lambda4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":62
 *                                 [ list(p.strategies)
 *                                   for p in self.game.players ])
 *             matches = filter(lambda x: x.label==index, strategies)             # <<<<<<<<<<<<<<
 *             if len(matches) == 1:
 *                 return matches[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5 = {"lambda5", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda5 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda5(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda5(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_cur_scope;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda5", 0);
  __pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_index)) { __Pyx_RaiseClosureNameError("index"); __PYX_ERR(2, 62, __pyx_L1_error) }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_index, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 62, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._resolve_index.lambda5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":49
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_6_resolve_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_cur_scope;
  PyObject *__pyx_v_strategies = NULL;
  PyObject *__pyx_v_matches = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  __Pyx_RefNannySetupContext("_resolve_index", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_index = __pyx_v_index;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_index);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_index);

  /* "gambit/lib/mixed.pxi":51
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 51, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":52
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "gambit/lib/mixed.pxi":54
 *             try:
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 54, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 54, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_GetItem(__pyx_t_6, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 54, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8_try_return;

        /* "gambit/lib/mixed.pxi":52
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      }
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "gambit/lib/mixed.pxi":55
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 pass
 *         else:
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_7) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "gambit/lib/mixed.pxi":52
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    }

    /* "gambit/lib/mixed.pxi":51
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":59
 *         else:
 *             # if no player matches, check strategy labels
 *             strategies = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                 [ list(p.strategies)
 *                                   for p in self.game.players ])
 */
  /*else*/ {
    __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_lambda4, 0, __pyx_n_s_resolve_index_locals_lambda, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "gambit/lib/mixed.pxi":60
 *             # if no player matches, check strategy labels
 *             strategies = reduce(lambda x,y: x+y,
 *                                 [ list(p.strategies)             # <<<<<<<<<<<<<<
 *                                   for p in self.game.players ])
 *             matches = filter(lambda x: x.label==index, strategies)
 */
    __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);

    /* "gambit/lib/mixed.pxi":61
 *             strategies = reduce(lambda x,y: x+y,
 *                                 [ list(p.strategies)
 *                                   for p in self.game.players ])             # <<<<<<<<<<<<<<
 *             matches = filter(lambda x: x.label==index, strategies)
 *             if len(matches) == 1:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_players); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 61, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
      __pyx_t_8 = __pyx_t_9; __Pyx_INCREF(__pyx_t_8); __pyx_t_10 = 0;
      __pyx_t_11 = NULL;
    } else {
      __pyx_t_10 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 61, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_11 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(2, 61, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    for (;;) {
      if (likely(!__pyx_t_11)) {
        if (likely(PyList_CheckExact(__pyx_t_8))) {
          if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(2, 61, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 61, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        } else {
          if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(2, 61, __pyx_L1_error)
          #else
          __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 61, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_9);
          #endif
        }
      } else {
        __pyx_t_9 = __pyx_t_11(__pyx_t_8);
        if (unlikely(!__pyx_t_9)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 61, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_9);
      }
      __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_9);
      __pyx_t_9 = 0;

      /* "gambit/lib/mixed.pxi":60
 *             # if no player matches, check strategy labels
 *             strategies = reduce(lambda x,y: x+y,
 *                                 [ list(p.strategies)             # <<<<<<<<<<<<<<
 *                                   for p in self.game.players ])
 *             matches = filter(lambda x: x.label==index, strategies)
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_strategies); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 60, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_12 = PySequence_List(__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(2, 60, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_12))) __PYX_ERR(2, 60, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "gambit/lib/mixed.pxi":61
 *             strategies = reduce(lambda x,y: x+y,
 *                                 [ list(p.strategies)
 *                                   for p in self.game.players ])             # <<<<<<<<<<<<<<
 *             matches = filter(lambda x: x.label==index, strategies)
 *             if len(matches) == 1:
 */
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "gambit/lib/mixed.pxi":59
 *         else:
 *             # if no player matches, check strategy labels
 *             strategies = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                                 [ list(p.strategies)
 *                                   for p in self.game.players ])
 */
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_reduce, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 59, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_strategies = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "gambit/lib/mixed.pxi":62
 *                                 [ list(p.strategies)
 *                                   for p in self.game.players ])
 *             matches = filter(lambda x: x.label==index, strategies)             # <<<<<<<<<<<<<<
 *             if len(matches) == 1:
 *                 return matches[0]
 */
    __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_14_resolve_index_1lambda5, 0, __pyx_n_s_resolve_index_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __Pyx_INCREF(__pyx_v_strategies);
    __Pyx_GIVEREF(__pyx_v_strategies);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_strategies);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_matches = __pyx_t_6;
    __pyx_t_6 = 0;

    /* "gambit/lib/mixed.pxi":63
 *                                   for p in self.game.players ])
 *             matches = filter(lambda x: x.label==index, strategies)
 *             if len(matches) == 1:             # <<<<<<<<<<<<<<
 *                 return matches[0]
 *             elif len(matches) == 0:
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_matches); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(2, 63, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_10 == 1) != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/mixed.pxi":64
 *             matches = filter(lambda x: x.label==index, strategies)
 *             if len(matches) == 1:
 *                 return matches[0]             # <<<<<<<<<<<<<<
 *             elif len(matches) == 0:
 *                 if players:
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_matches, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 64, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "gambit/lib/mixed.pxi":63
 *                                   for p in self.game.players ])
 *             matches = filter(lambda x: x.label==index, strategies)
 *             if len(matches) == 1:             # <<<<<<<<<<<<<<
 *                 return matches[0]
 *             elif len(matches) == 0:
 */
    }

    /* "gambit/lib/mixed.pxi":65
 *             if len(matches) == 1:
 *                 return matches[0]
 *             elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *                 if players:
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 */
    __pyx_t_10 = PyObject_Length(__pyx_v_matches); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(2, 65, __pyx_L1_error)
    __pyx_t_1 = ((__pyx_t_10 == 0) != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/mixed.pxi":66
 *                 return matches[0]
 *             elif len(matches) == 0:
 *                 if players:             # <<<<<<<<<<<<<<
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 *                 else:
 */
      __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(2, 66, __pyx_L1_error)
      if (__pyx_t_1) {

        /* "gambit/lib/mixed.pxi":67
 *             elif len(matches) == 0:
 *                 if players:
 *                     raise IndexError("no player or strategy matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise IndexError("no strategy matching label '%s'" % index)
 */
        __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_no_player_or_strategy_matching_l, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 67, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 67, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 67, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __PYX_ERR(2, 67, __pyx_L1_error)

        /* "gambit/lib/mixed.pxi":66
 *                 return matches[0]
 *             elif len(matches) == 0:
 *                 if players:             # <<<<<<<<<<<<<<
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 *                 else:
 */
      }

      /* "gambit/lib/mixed.pxi":69
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 *                 else:
 *                     raise IndexError("no strategy matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 */
      /*else*/ {
        __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_no_strategy_matching_label_s, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
        __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 69, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_Raise(__pyx_t_6, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __PYX_ERR(2, 69, __pyx_L1_error)
      }

      /* "gambit/lib/mixed.pxi":65
 *             if len(matches) == 1:
 *                 return matches[0]
 *             elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *                 if players:
 *                     raise IndexError("no player or strategy matching label '%s'" % index)
 */
    }

    /* "gambit/lib/mixed.pxi":71
 *                     raise IndexError("no strategy matching label '%s'" % index)
 *             else:
 *                 raise IndexError("multiple strategies matching label '%s'" % index)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, index):
 */
    /*else*/ {
      __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_multiple_strategies_matching_lab, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
      __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 71, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_Raise(__pyx_t_6, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __PYX_ERR(2, 71, __pyx_L1_error)
    }
  }
  __pyx_L3:;

  /* "gambit/lib/mixed.pxi":49
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or strategy object.
 *         if players:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strategies);
  __Pyx_XDECREF(__pyx_v_matches);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":73
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_8__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":80
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__ = {"__init__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_profile = 0;
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_profile,&__pyx_n_s_player,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(2, 80, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(2, 80, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(2, 80, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_profile = values[1];
    __pyx_v_player = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 80, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy___init__(__pyx_self, __pyx_v_self, __pyx_v_profile, __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/mixed.pxi":81
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):
 *                     self.profile = profile             # <<<<<<<<<<<<<<
 *                     self.player = player
 *                 def __eq__(self, other):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_profile, __pyx_v_profile) < 0) __PYX_ERR(2, 81, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":82
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 *                     self.player = player             # <<<<<<<<<<<<<<
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_player, __pyx_v_player) < 0) __PYX_ERR(2, 82, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":80
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":83
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__ = {"__eq__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_other,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, 1); __PYX_ERR(2, 83, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__eq__") < 0)) __PYX_ERR(2, 83, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 83, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_2__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "gambit/lib/mixed.pxi":84
 *                     self.player = player
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)             # <<<<<<<<<<<<<<
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 84, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 84, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":83
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":85
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__ = {"__len__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_4__len__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/mixed.pxi":86
 *                     return list(self) == list(other)
 *                 def __len__(self):
 *                     return len(self.player.strategies)             # <<<<<<<<<<<<<<
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_strategies); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(2, 86, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":85
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":87
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__ = {"__repr__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_6__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/mixed.pxi":88
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))             # <<<<<<<<<<<<<<
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 88, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":87
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":89
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_8_repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gambit/lib/mixed.pxi":91
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_MixedStrategy); if (unlikely(!gen)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy._repr_latex_.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__2generator(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 91, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(2, 91, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_strategies); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 91, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 91, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(2, 91, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 91, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(2, 91, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__44, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(2, 91, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":89
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "gambit/lib/mixed.pxi":90
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 *                     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 90, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "gambit/lib/mixed.pxi":91
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12_repr_latex__genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__18, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 91, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":90
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 *                     else:
 */
  }

  /* "gambit/lib/mixed.pxi":93
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 *                     else:
 *                        return repr(self)             # <<<<<<<<<<<<<<
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_self;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/mixed.pxi":89
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":94
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__ = {"__getitem__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(2, 94, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(2, 94, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 94, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_10__getitem__(__pyx_self, __pyx_v_self, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/mixed.pxi":95
 *                        return repr(self)
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]             # <<<<<<<<<<<<<<
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.strategies[index]] = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strategies); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 95, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":94
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":96
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__ = {"__setitem__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(2, 96, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(2, 96, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(2, 96, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 96, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12__setitem__(__pyx_self, __pyx_v_self, __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "gambit/lib/mixed.pxi":97
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.strategies[index]] = value             # <<<<<<<<<<<<<<
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_strategies); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_2, __pyx_v_value) < 0)) __PYX_ERR(2, 97, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/mixed.pxi":96
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__.MixedStrategy.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":73
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_MixedStrategy = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/mixed.pxi":74
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":75
 *     def __getitem__(self, index):
 *         if isinstance(index, int):
 *             return self._getprob(index+1)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 75, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 75, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 75, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":74
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):
 */
  }

  /* "gambit/lib/mixed.pxi":76
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":77
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getprob_strategy); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 77, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_index);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 77, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":76
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 */
  }

  /* "gambit/lib/mixed.pxi":78
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":79
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_builtin_object);
    __Pyx_GIVEREF(__pyx_builtin_object);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_object);
    __pyx_t_4 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_4, __pyx_t_3, __pyx_n_s_MixedStrategy, __pyx_n_s_getitem___locals_MixedStrategy_2, (PyObject *) NULL, __pyx_n_s_gambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "gambit/lib/mixed.pxi":80
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_1__init__, 0, __pyx_n_s_getitem___locals_MixedStrategy_3, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__46)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init, __pyx_t_7) < 0) __PYX_ERR(2, 80, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":83
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_3__eq__, 0, __pyx_n_s_getitem___locals_MixedStrategy_4, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__48)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 83, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_eq, __pyx_t_7) < 0) __PYX_ERR(2, 83, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":85
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_5__len__, 0, __pyx_n_s_getitem___locals_MixedStrategy_5, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__50)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_len, __pyx_t_7) < 0) __PYX_ERR(2, 85, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":87
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_7__repr__, 0, __pyx_n_s_getitem___locals_MixedStrategy_6, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__52)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 87, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_repr, __pyx_t_7) < 0) __PYX_ERR(2, 87, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":89
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_9_repr_latex_, 0, __pyx_n_s_getitem___locals_MixedStrategy_7, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__54)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 89, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_repr_latex, __pyx_t_7) < 0) __PYX_ERR(2, 89, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":94
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_11__getitem__, 0, __pyx_n_s_getitem___locals_MixedStrategy_8, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__56)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_getitem, __pyx_t_7) < 0) __PYX_ERR(2, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":96
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__getitem___13MixedStrategy_13__setitem__, 0, __pyx_n_s_getitem___locals_MixedStrategy_9, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__58)); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 96, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_setitem, __pyx_t_7) < 0) __PYX_ERR(2, 96, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":79
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_7 = __Pyx_Py3ClassCreate(__pyx_t_4, __pyx_n_s_MixedStrategy, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 79, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_MixedStrategy = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":98
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_index);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_v_MixedStrategy, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":78
 *         elif isinstance(index, Strategy):
 *             return self._getprob_strategy(index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):
 */
  }

  /* "gambit/lib/mixed.pxi":99
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  __pyx_t_2 = PyString_Check(__pyx_v_index); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":100
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_index);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_True) < 0) __PYX_ERR(2, 100, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_3, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":99
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  }

  /* "gambit/lib/mixed.pxi":102
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "gambit/lib/mixed.pxi":103
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, index, value):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/mixed.pxi":102
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_profile_indexes_must_be_int_str, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(2, 102, __pyx_L1_error)
  }

  /* "gambit/lib/mixed.pxi":73
 *                 raise IndexError("multiple strategies matching label '%s'" % index)
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_MixedStrategy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":105
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_10__setitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_10__setitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "gambit/lib/mixed.pxi":106
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":107
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 107, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":106
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":108
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":109
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob_strategy); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_index);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 109, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":108
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Strategy):             # <<<<<<<<<<<<<<
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":110
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":111
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob_player); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_index);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 111, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":110
 *         elif isinstance(index, Strategy):
 *             self._setprob_strategy(index, value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":112
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
  __pyx_t_2 = PyString_Check(__pyx_v_index); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":113
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 113, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_8) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_index);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 113, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_t_3, __pyx_v_value) < 0)) __PYX_ERR(2, 113, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":112
 *         elif isinstance(index, Player):
 *             self._setprob_player(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":115
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "gambit/lib/mixed.pxi":116
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def _setprob_player(self, Player player, value):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":115
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_profile_indexes_must_be_int_str, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 115, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 115, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/mixed.pxi":105
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":118
 *                             index.__class__.__name__)
 * 
 *     def _setprob_player(self, Player player, value):             # <<<<<<<<<<<<<<
 *         class Filler(object): pass
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_13_setprob_player(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_13_setprob_player(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob_player (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob_player", 1, 2, 2, 1); __PYX_ERR(2, 118, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob_player") < 0)) __PYX_ERR(2, 118, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_player = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob_player", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 118, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._setprob_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_6gambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(2, 118, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_12_setprob_player(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_12_setprob_player(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_Filler = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_v_v = NULL;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  Py_ssize_t __pyx_t_8;
  PyObject *(*__pyx_t_9)(PyObject *);
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  int __pyx_t_13;
  int __pyx_t_14;
  int __pyx_t_15;
  __Pyx_RefNannySetupContext("_setprob_player", 0);

  /* "gambit/lib/mixed.pxi":119
 * 
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass             # <<<<<<<<<<<<<<
 *         try:
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_builtin_object);
  __Pyx_GIVEREF(__pyx_builtin_object);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_builtin_object);
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Filler, __pyx_n_s_setprob_player_locals_Filler, (PyObject *) NULL, __pyx_n_s_gambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Filler, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_Filler = __pyx_t_4;
  __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":120
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass
 *         try:             # <<<<<<<<<<<<<<
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "gambit/lib/mixed.pxi":121
 *         class Filler(object): pass
 *         try:
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):             # <<<<<<<<<<<<<<
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")
 */
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_itertools); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_izip_longest); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_player), __pyx_n_s_strategies); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
      __Pyx_INCREF(__pyx_v_value);
      __Pyx_GIVEREF(__pyx_v_value);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_value);
      __pyx_t_1 = 0;
      __pyx_t_1 = PyDict_New(); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_CallNoArg(__pyx_v_Filler); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      if (PyDict_SetItem(__pyx_t_1, __pyx_n_s_fillvalue, __pyx_t_4) < 0) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 121, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
        __pyx_t_1 = __pyx_t_4; __Pyx_INCREF(__pyx_t_1); __pyx_t_8 = 0;
        __pyx_t_9 = NULL;
      } else {
        __pyx_t_8 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 121, __pyx_L3_error)
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_9 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 121, __pyx_L3_error)
      }
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      for (;;) {
        if (likely(!__pyx_t_9)) {
          if (likely(PyList_CheckExact(__pyx_t_1))) {
            if (__pyx_t_8 >= PyList_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 121, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 121, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          } else {
            if (__pyx_t_8 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
            #if CYTHON_COMPILING_IN_CPYTHON
            __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_8); __Pyx_INCREF(__pyx_t_4); __pyx_t_8++; if (unlikely(0 < 0)) __PYX_ERR(2, 121, __pyx_L3_error)
            #else
            __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_8); __pyx_t_8++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 121, __pyx_L3_error)
            __Pyx_GOTREF(__pyx_t_4);
            #endif
          }
        } else {
          __pyx_t_4 = __pyx_t_9(__pyx_t_1);
          if (unlikely(!__pyx_t_4)) {
            PyObject* exc_type = PyErr_Occurred();
            if (exc_type) {
              if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
              else __PYX_ERR(2, 121, __pyx_L3_error)
            }
            break;
          }
          __Pyx_GOTREF(__pyx_t_4);
        }
        if ((likely(PyTuple_CheckExact(__pyx_t_4))) || (PyList_CheckExact(__pyx_t_4))) {
          PyObject* sequence = __pyx_t_4;
          #if CYTHON_COMPILING_IN_CPYTHON
          Py_ssize_t size = Py_SIZE(sequence);
          #else
          Py_ssize_t size = PySequence_Size(sequence);
          #endif
          if (unlikely(size != 2)) {
            if (size > 2) __Pyx_RaiseTooManyValuesError(2);
            else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
            __PYX_ERR(2, 121, __pyx_L3_error)
          }
          #if CYTHON_COMPILING_IN_CPYTHON
          if (likely(PyTuple_CheckExact(sequence))) {
            __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
            __pyx_t_2 = PyTuple_GET_ITEM(sequence, 1); 
          } else {
            __pyx_t_3 = PyList_GET_ITEM(sequence, 0); 
            __pyx_t_2 = PyList_GET_ITEM(sequence, 1); 
          }
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(__pyx_t_2);
          #else
          __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 121, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_2 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 121, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_2);
          #endif
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        } else {
          Py_ssize_t index = -1;
          __pyx_t_10 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 121, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_11 = Py_TYPE(__pyx_t_10)->tp_iternext;
          index = 0; __pyx_t_3 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_3)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_3);
          index = 1; __pyx_t_2 = __pyx_t_11(__pyx_t_10); if (unlikely(!__pyx_t_2)) goto __pyx_L13_unpacking_failed;
          __Pyx_GOTREF(__pyx_t_2);
          if (__Pyx_IternextUnpackEndCheck(__pyx_t_11(__pyx_t_10), 2) < 0) __PYX_ERR(2, 121, __pyx_L3_error)
          __pyx_t_11 = NULL;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L14_unpacking_done;
          __pyx_L13_unpacking_failed:;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_11 = NULL;
          if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
          __PYX_ERR(2, 121, __pyx_L3_error)
          __pyx_L14_unpacking_done:;
        }
        __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_3);
        __pyx_t_3 = 0;
        __Pyx_XDECREF_SET(__pyx_v_v, __pyx_t_2);
        __pyx_t_2 = 0;

        /* "gambit/lib/mixed.pxi":122
 *         try:
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):             # <<<<<<<<<<<<<<
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v
 */
        __pyx_t_13 = PyObject_IsInstance(__pyx_v_s, __pyx_v_Filler); if (unlikely(__pyx_t_13 == -1)) __PYX_ERR(2, 122, __pyx_L3_error)
        __pyx_t_14 = (__pyx_t_13 != 0);
        if (!__pyx_t_14) {
        } else {
          __pyx_t_12 = __pyx_t_14;
          goto __pyx_L16_bool_binop_done;
        }
        __pyx_t_14 = PyObject_IsInstance(__pyx_v_v, __pyx_v_Filler); if (unlikely(__pyx_t_14 == -1)) __PYX_ERR(2, 122, __pyx_L3_error)
        __pyx_t_13 = (__pyx_t_14 != 0);
        __pyx_t_12 = __pyx_t_13;
        __pyx_L16_bool_binop_done:;
        if (__pyx_t_12) {

          /* "gambit/lib/mixed.pxi":123
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")             # <<<<<<<<<<<<<<
 *                 self[s] = v
 *         except TypeError as e:
 */
          __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__59, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 123, __pyx_L3_error)
          __Pyx_GOTREF(__pyx_t_4);
          __Pyx_Raise(__pyx_t_4, 0, 0, 0);
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __PYX_ERR(2, 123, __pyx_L3_error)

          /* "gambit/lib/mixed.pxi":122
 *         try:
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):             # <<<<<<<<<<<<<<
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v
 */
        }

        /* "gambit/lib/mixed.pxi":124
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v             # <<<<<<<<<<<<<<
 *         except TypeError as e:
 *             if "must support iteration" in str(e):
 */
        if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_v_s, __pyx_v_v) < 0)) __PYX_ERR(2, 124, __pyx_L3_error)

        /* "gambit/lib/mixed.pxi":121
 *         class Filler(object): pass
 *         try:
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):             # <<<<<<<<<<<<<<
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")
 */
      }
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "gambit/lib/mixed.pxi":120
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass
 *         try:             # <<<<<<<<<<<<<<
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 */
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "gambit/lib/mixed.pxi":125
 *                      raise ValueError("must specify exactly one value per strategy")
 *                 self[s] = v
 *         except TypeError as e:             # <<<<<<<<<<<<<<
 *             if "must support iteration" in str(e):
 *                 raise TypeError("value vector must support iteration")
 */
    __pyx_t_15 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_15) {
      __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._setprob_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_4, &__pyx_t_2) < 0) __PYX_ERR(2, 125, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __pyx_v_e = __pyx_t_4;

      /* "gambit/lib/mixed.pxi":126
 *                 self[s] = v
 *         except TypeError as e:
 *             if "must support iteration" in str(e):             # <<<<<<<<<<<<<<
 *                 raise TypeError("value vector must support iteration")
 *             else:
 */
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 126, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_e);
      __Pyx_GIVEREF(__pyx_v_e);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_e);
      __pyx_t_10 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 126, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_12 = (__Pyx_PySequence_ContainsTF(__pyx_kp_s_must_support_iteration, __pyx_t_10, Py_EQ)); if (unlikely(__pyx_t_12 < 0)) __PYX_ERR(2, 126, __pyx_L5_except_error)
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_13 = (__pyx_t_12 != 0);
      if (__pyx_t_13) {

        /* "gambit/lib/mixed.pxi":127
 *         except TypeError as e:
 *             if "must support iteration" in str(e):
 *                 raise TypeError("value vector must support iteration")             # <<<<<<<<<<<<<<
 *             else:
 *                 raise e
 */
        __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__60, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 127, __pyx_L5_except_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_Raise(__pyx_t_10, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __PYX_ERR(2, 127, __pyx_L5_except_error)

        /* "gambit/lib/mixed.pxi":126
 *                 self[s] = v
 *         except TypeError as e:
 *             if "must support iteration" in str(e):             # <<<<<<<<<<<<<<
 *                 raise TypeError("value vector must support iteration")
 *             else:
 */
      }

      /* "gambit/lib/mixed.pxi":129
 *                 raise TypeError("value vector must support iteration")
 *             else:
 *                 raise e             # <<<<<<<<<<<<<<
 * 
 *     def payoff(self, player=None):
 */
      /*else*/ {
        __Pyx_Raise(__pyx_v_e, 0, 0, 0);
        __PYX_ERR(2, 129, __pyx_L5_except_error)
      }
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "gambit/lib/mixed.pxi":120
 *     def _setprob_player(self, Player player, value):
 *         class Filler(object): pass
 *         try:             # <<<<<<<<<<<<<<
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "gambit/lib/mixed.pxi":118
 *                             index.__class__.__name__)
 * 
 *     def _setprob_player(self, Player player, value):             # <<<<<<<<<<<<<<
 *         class Filler(object): pass
 *         try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile._setprob_player", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_Filler);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XDECREF(__pyx_v_v);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":131
 *                 raise e
 * 
 *     def payoff(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [ self._payoff(player) for player in self.game.players ]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_15payoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_15payoff(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("payoff (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "payoff") < 0)) __PYX_ERR(2, 131, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("payoff", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 131, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_14payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_14payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  __Pyx_RefNannySetupContext("payoff", 0);
  __Pyx_INCREF(__pyx_v_player);

  /* "gambit/lib/mixed.pxi":132
 * 
 *     def payoff(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [ self._payoff(player) for player in self.game.players ]
 *         elif isinstance(player, Player):
 */
  __pyx_t_1 = (__pyx_v_player == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":133
 *     def payoff(self, player=None):
 *         if player is None:
 *             return [ self._payoff(player) for player in self.game.players ]             # <<<<<<<<<<<<<<
 *         elif isinstance(player, Player):
 *             return self._payoff(player)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 133, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 133, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 133, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 133, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 133, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 133, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_DECREF_SET(__pyx_v_player, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 133, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_INCREF(__pyx_v_player);
        __Pyx_GIVEREF(__pyx_v_player);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_player);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 133, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 133, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":132
 * 
 *     def payoff(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [ self._payoff(player) for player in self.game.players ]
 *         elif isinstance(player, Player):
 */
  }

  /* "gambit/lib/mixed.pxi":134
 *         if player is None:
 *             return [ self._payoff(player) for player in self.game.players ]
 *         elif isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":135
 *             return [ self._payoff(player) for player in self.game.players ]
 *         elif isinstance(player, Player):
 *             return self._payoff(player)             # <<<<<<<<<<<<<<
 *         elif isinstance(player, (int, str)):
 *             return self.payoff(self.game.players[player])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_player);
      __Pyx_GIVEREF(__pyx_v_player);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_player);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 135, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":134
 *         if player is None:
 *             return [ self._payoff(player) for player in self.game.players ]
 *         elif isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):
 */
  }

  /* "gambit/lib/mixed.pxi":136
 *         elif isinstance(player, Player):
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("profile payoffs index must be int, str, or Player, not %s" %
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_player); 
  __pyx_t_11 = (__pyx_t_2 != 0);
  if (!__pyx_t_11) {
  } else {
    __pyx_t_1 = __pyx_t_11;
    goto __pyx_L6_bool_binop_done;
  }
  __pyx_t_11 = PyString_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_11 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L6_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":137
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):
 *             return self.payoff(self.game.players[player])             # <<<<<<<<<<<<<<
 *         raise TypeError("profile payoffs index must be int, str, or Player, not %s" %
 *                         player.__class__.__name__)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyObject_GetItem(__pyx_t_5, __pyx_v_player); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_8); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 137, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 137, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":136
 *         elif isinstance(player, Player):
 *             return self._payoff(player)
 *         elif isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("profile payoffs index must be int, str, or Player, not %s" %
 */
  }

  /* "gambit/lib/mixed.pxi":139
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("profile payoffs index must be int, str, or Player, not %s" %
 *                         player.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def strategy_value(self, strategy):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/mixed.pxi":138
 *         elif isinstance(player, (int, str)):
 *             return self.payoff(self.game.players[player])
 *         raise TypeError("profile payoffs index must be int, str, or Player, not %s" %             # <<<<<<<<<<<<<<
 *                         player.__class__.__name__)
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_profile_payoffs_index_must_be_in, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(2, 138, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":131
 *                 raise e
 * 
 *     def payoff(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [ self._payoff(player) for player in self.game.players ]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":141
 *                         player.__class__.__name__)
 * 
 *     def strategy_value(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_17strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_17strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strategy_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_16strategy_value(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), ((PyObject *)__pyx_v_strategy));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_16strategy_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("strategy_value", 0);
  __Pyx_INCREF(__pyx_v_strategy);

  /* "gambit/lib/mixed.pxi":142
 * 
 *     def strategy_value(self, strategy):
 *         if isinstance(strategy, str):             # <<<<<<<<<<<<<<
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_strategy); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":143
 *     def strategy_value(self, strategy):
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)             # <<<<<<<<<<<<<<
 *         elif not isinstance(strategy, Strategy):
 *             raise TypeError("profile strategy value index must be str or Strategy, not %s" %
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_strategy);
    __Pyx_GIVEREF(__pyx_v_strategy);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_strategy);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(2, 143, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 143, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_strategy, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "gambit/lib/mixed.pxi":142
 * 
 *     def strategy_value(self, strategy):
 *         if isinstance(strategy, str):             # <<<<<<<<<<<<<<
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":144
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy value index must be str or Strategy, not %s" %
 *                             strategy.__class__.__name__)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_strategy, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":146
 *         elif not isinstance(strategy, Strategy):
 *             raise TypeError("profile strategy value index must be str or Strategy, not %s" %
 *                             strategy.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._strategy_value(strategy)
 * 
 */
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_strategy, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "gambit/lib/mixed.pxi":145
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):
 *             raise TypeError("profile strategy value index must be str or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             strategy.__class__.__name__)
 *         return self._strategy_value(strategy)
 */
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_profile_strategy_value_index_mus, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 145, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(2, 145, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":144
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 *         elif not isinstance(strategy, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy value index must be str or Strategy, not %s" %
 *                             strategy.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "gambit/lib/mixed.pxi":147
 *             raise TypeError("profile strategy value index must be str or Strategy, not %s" %
 *                             strategy.__class__.__name__)
 *         return self._strategy_value(strategy)             # <<<<<<<<<<<<<<
 * 
 *     def strategy_values(self, player=None):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_value); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_strategy); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_strategy);
    __Pyx_GIVEREF(__pyx_v_strategy);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_strategy);
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_6;
  __pyx_t_6 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":141
 *                         player.__class__.__name__)
 * 
 *     def strategy_value(self, strategy):             # <<<<<<<<<<<<<<
 *         if isinstance(strategy, str):
 *             strategy = self._resolve_index(strategy, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.strategy_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_strategy);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":149
 *         return self._strategy_value(strategy)
 * 
 *     def strategy_values(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [ self.strategy_values(player) for player in self.game.players ]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_19strategy_values(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_19strategy_values(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strategy_values (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "strategy_values") < 0)) __PYX_ERR(2, 149, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_player = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("strategy_values", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 149, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.strategy_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_18strategy_values(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_18strategy_values(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_v_item = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("strategy_values", 0);
  __Pyx_INCREF(__pyx_v_player);

  /* "gambit/lib/mixed.pxi":150
 * 
 *     def strategy_values(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [ self.strategy_values(player) for player in self.game.players ]
 *         elif isinstance(player, str):
 */
  __pyx_t_1 = (__pyx_v_player == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":151
 *     def strategy_values(self, player=None):
 *         if player is None:
 *             return [ self.strategy_values(player) for player in self.game.players ]             # <<<<<<<<<<<<<<
 *         elif isinstance(player, str):
 *             player = self.game.players[player]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (likely(PyList_CheckExact(__pyx_t_5)) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_4 = __pyx_t_5; __Pyx_INCREF(__pyx_t_4); __pyx_t_6 = 0;
      __pyx_t_7 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_7 = Py_TYPE(__pyx_t_4)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 151, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (likely(!__pyx_t_7)) {
        if (likely(PyList_CheckExact(__pyx_t_4))) {
          if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 151, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 151, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        } else {
          if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 151, __pyx_L1_error)
          #else
          __pyx_t_5 = PySequence_ITEM(__pyx_t_4, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 151, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_5);
          #endif
        }
      } else {
        __pyx_t_5 = __pyx_t_7(__pyx_t_4);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(2, 151, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_DECREF_SET(__pyx_v_player, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_values); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_player); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
      } else {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_INCREF(__pyx_v_player);
        __Pyx_GIVEREF(__pyx_v_player);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_player);
        __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_10, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 151, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_5))) __PYX_ERR(2, 151, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/mixed.pxi":150
 * 
 *     def strategy_values(self, player=None):
 *         if player is None:             # <<<<<<<<<<<<<<
 *             return [ self.strategy_values(player) for player in self.game.players ]
 *         elif isinstance(player, str):
 */
  }

  /* "gambit/lib/mixed.pxi":152
 *         if player is None:
 *             return [ self.strategy_values(player) for player in self.game.players ]
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":153
 *             return [ self.strategy_values(player) for player in self.game.players ]
 *         elif isinstance(player, str):
 *             player = self.game.players[player]             # <<<<<<<<<<<<<<
 *         elif not isinstance(player, Player):
 *             raise TypeError("strategy values index must be str or Player, not %s" %
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_players); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(__pyx_t_4, __pyx_v_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_player, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":152
 *         if player is None:
 *             return [ self.strategy_values(player) for player in self.game.players ]
 *         elif isinstance(player, str):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":154
 *         elif isinstance(player, str):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("strategy values index must be str or Player, not %s" %
 *                             player.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":156
 *         elif not isinstance(player, Player):
 *             raise TypeError("strategy values index must be str or Player, not %s" %
 *                             player.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return [self.strategy_value(item) for item in player.strategies]
 * 
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/mixed.pxi":155
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 *             raise TypeError("strategy values index must be str or Player, not %s" %             # <<<<<<<<<<<<<<
 *                             player.__class__.__name__)
 *         return [self.strategy_value(item) for item in player.strategies]
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_strategy_values_index_must_be_st, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(2, 155, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":154
 *         elif isinstance(player, str):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("strategy values index must be str or Player, not %s" %
 *                             player.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "gambit/lib/mixed.pxi":157
 *             raise TypeError("strategy values index must be str or Player, not %s" %
 *                             player.__class__.__name__)
 *         return [self.strategy_value(item) for item in player.strategies]             # <<<<<<<<<<<<<<
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_strategies); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
    __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 157, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  for (;;) {
    if (likely(!__pyx_t_7)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 157, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 157, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(2, 157, __pyx_L1_error)
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 157, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_7(__pyx_t_5);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(2, 157, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_value_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(2, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_10 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_v_item); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
    } else {
      __pyx_t_9 = PyTuple_New(1+1); if (unlikely(!__pyx_t_9)) __PYX_ERR(2, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_INCREF(__pyx_v_item);
      __Pyx_GIVEREF(__pyx_v_item);
      PyTuple_SET_ITEM(__pyx_t_9, 0+1, __pyx_v_item);
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 157, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(2, 157, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":149
 *         return self._strategy_value(strategy)
 * 
 *     def strategy_values(self, player=None):             # <<<<<<<<<<<<<<
 *         if player is None:
 *             return [ self.strategy_values(player) for player in self.game.players ]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.strategy_values", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":159
 *         return [self.strategy_value(item) for item in player.strategies]
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):             # <<<<<<<<<<<<<<
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_21strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_21strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_v_strategy1 = 0;
  PyObject *__pyx_v_strategy2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("strategy_value_deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_player,&__pyx_n_s_strategy1,&__pyx_n_s_strategy2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strategy1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strategy_value_deriv", 1, 3, 3, 1); __PYX_ERR(2, 159, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strategy2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("strategy_value_deriv", 1, 3, 3, 2); __PYX_ERR(2, 159, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "strategy_value_deriv") < 0)) __PYX_ERR(2, 159, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_player = values[0];
    __pyx_v_strategy1 = values[1];
    __pyx_v_strategy2 = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("strategy_value_deriv", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 159, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_20strategy_value_deriv(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *)__pyx_v_self), __pyx_v_player, __pyx_v_strategy1, __pyx_v_strategy2);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedStrategyProfile_20strategy_value_deriv(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_player, PyObject *__pyx_v_strategy1, PyObject *__pyx_v_strategy2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  GamePlayerRep *__pyx_t_8;
  Py_ssize_t __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("strategy_value_deriv", 0);
  __Pyx_INCREF(__pyx_v_player);
  __Pyx_INCREF(__pyx_v_strategy1);
  __Pyx_INCREF(__pyx_v_strategy2);

  /* "gambit/lib/mixed.pxi":160
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 *         if isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
  __pyx_t_2 = PyInt_Check(__pyx_v_player); 
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (!__pyx_t_3) {
  } else {
    __pyx_t_1 = __pyx_t_3;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_3 = PyString_Check(__pyx_v_player); 
  __pyx_t_2 = (__pyx_t_3 != 0);
  __pyx_t_1 = __pyx_t_2;
  __pyx_L4_bool_binop_done:;
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":161
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]             # <<<<<<<<<<<<<<
 *         elif not isinstance(player, Player):
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_GetItem(__pyx_t_5, __pyx_v_player); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_player, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/mixed.pxi":160
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):
 *         if isinstance(player, (int, str)):             # <<<<<<<<<<<<<<
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/mixed.pxi":162
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_player, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":164
 *         elif not isinstance(player, Player):
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)             # <<<<<<<<<<<<<<
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_player, __pyx_n_s_class); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 164, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gambit/lib/mixed.pxi":163
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):
 *             raise TypeError("player index must be int, str, or Player, not %s" %             # <<<<<<<<<<<<<<
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_player_index_must_be_int_str_or, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 163, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 163, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":162
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 *         elif not isinstance(player, Player):             # <<<<<<<<<<<<<<
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "gambit/lib/mixed.pxi":165
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):             # <<<<<<<<<<<<<<
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_strategy1); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":166
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)             # <<<<<<<<<<<<<<
 *         elif not isinstance(strategy1, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_INCREF(__pyx_v_strategy1);
    __Pyx_GIVEREF(__pyx_v_strategy1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_strategy1);
    __pyx_t_6 = PyDict_New(); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    if (PyDict_SetItem(__pyx_t_6, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(2, 166, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF_SET(__pyx_v_strategy1, __pyx_t_7);
    __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":165
 *             raise TypeError("player index must be int, str, or Player, not %s" %
 *                             player.__class__.__name__)
 *         if isinstance(strategy1, str):             # <<<<<<<<<<<<<<
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):
 */
    goto __pyx_L6;
  }

  /* "gambit/lib/mixed.pxi":167
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_strategy1, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":169
 *         elif not isinstance(strategy1, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)             # <<<<<<<<<<<<<<
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_strategy1, __pyx_n_s_class); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_7, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 169, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/mixed.pxi":168
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):
 */
    __pyx_t_7 = __Pyx_PyString_Format(__pyx_kp_s_profile_strategy_index_must_be_s, __pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_7);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_7);
    __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 168, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_7, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __PYX_ERR(2, 168, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":167
 *         if isinstance(strategy1, str):
 *             strategy1 = self._resolve_index(strategy1, players=False)
 *         elif not isinstance(strategy1, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 */
  }
  __pyx_L6:;

  /* "gambit/lib/mixed.pxi":170
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):             # <<<<<<<<<<<<<<
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_strategy2); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/mixed.pxi":171
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)             # <<<<<<<<<<<<<<
 *         elif not isinstance(strategy2, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 */
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_7)) __PYX_ERR(2, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_INCREF(__pyx_v_strategy2);
    __Pyx_GIVEREF(__pyx_v_strategy2);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_v_strategy2);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(2, 171, __pyx_L1_error)
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_6, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_strategy2, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/mixed.pxi":170
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy1.__class__.__name__)
 *         if isinstance(strategy2, str):             # <<<<<<<<<<<<<<
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):
 */
    goto __pyx_L7;
  }

  /* "gambit/lib/mixed.pxi":172
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_strategy2, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
  __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/mixed.pxi":174
 *         elif not isinstance(strategy2, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)
 * 
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_strategy2, __pyx_n_s_class); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 174, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gambit/lib/mixed.pxi":173
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %             # <<<<<<<<<<<<<<
 *                             strategy2.__class__.__name__)
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)
 */
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_profile_strategy_index_must_be_s, __pyx_t_5); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 173, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(2, 173, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":172
 *         if isinstance(strategy2, str):
 *             strategy2 = self._resolve_index(strategy2, players=False)
 *         elif not isinstance(strategy2, Strategy):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)
 */
  }
  __pyx_L7:;

  /* "gambit/lib/mixed.pxi":175
 *             raise TypeError("profile strategy index must be str or Strategy, not %s" %
 *                             strategy2.__class__.__name__)
 *         return self._strategy_value_deriv((<Player>player).player.deref().GetNumber(), strategy1, strategy2)             # <<<<<<<<<<<<<<
 * 
 * cdef class MixedStrategyProfileDouble(MixedStrategyProfile):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategy_value_deriv); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  try {
    __pyx_t_8 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player)->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(2, 175, __pyx_L1_error)
  }
  __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_t_8->GetNumber()); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = NULL;
  __pyx_t_9 = 0;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
    __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_5);
    if (likely(__pyx_t_7)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
      __Pyx_INCREF(__pyx_t_7);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_5, function);
      __pyx_t_9 = 1;
    }
  }
  __pyx_t_10 = PyTuple_New(3+__pyx_t_9); if (unlikely(!__pyx_t_10)) __PYX_ERR(2, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  if (__pyx_t_7) {
    __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_7); __pyx_t_7 = NULL;
  }
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_9, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_strategy1);
  __Pyx_GIVEREF(__pyx_v_strategy1);
  PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_9, __pyx_v_strategy1);
  __Pyx_INCREF(__pyx_v_strategy2);
  __Pyx_GIVEREF(__pyx_v_strategy2);
  PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_9, __pyx_v_strategy2);
  __pyx_t_6 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 175, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":159
 *         return [self.strategy_value(item) for item in player.strategies]
 * 
 *     def strategy_value_deriv(self, player, strategy1, strategy2):             # <<<<<<<<<<<<<<
 *         if isinstance(player, (int, str)):
 *             player = self.game.players[player]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfile.strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XDECREF(__pyx_v_strategy1);
  __Pyx_XDECREF(__pyx_v_strategy2);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":180
 *     cdef c_MixedStrategyProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble___dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/mixed.pxi":181
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()
 */
  delete __pyx_v_self->profile;

  /* "gambit/lib/mixed.pxi":180
 *     cdef c_MixedStrategyProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/mixed.pxi":182
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/mixed.pxi":183
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()             # <<<<<<<<<<<<<<
 * 
 *     def _strategy_index(self, Strategy st):
 */
  __pyx_r = __pyx_v_self->profile->MixedProfileLength();
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":182
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":185
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_index (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_st), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "st", 0))) __PYX_ERR(2, 185, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4_strategy_index(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_st));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4_strategy_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_strategy_index", 0);

  /* "gambit/lib/mixed.pxi":186
 * 
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->profile->GetSupport().GetIndex(__pyx_v_st->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 186, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":185
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._strategy_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":187
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 187, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_6_getprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "gambit/lib/mixed.pxi":188
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)             # <<<<<<<<<<<<<<
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(2, 188, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 188, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":187
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":189
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob_strategy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(2, 189, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_8_getprob_strategy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_8_getprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_getprob_strategy", 0);

  /* "gambit/lib/mixed.pxi":190
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_strategy->strategy);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(2, 190, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":189
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._getprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":191
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(2, 191, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(2, 191, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 191, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 191, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_10_setprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "gambit/lib/mixed.pxi":192
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)             # <<<<<<<<<<<<<<
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 192, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index, __pyx_t_1);

  /* "gambit/lib/mixed.pxi":191
 *     def _getprob_strategy(self, Strategy strategy):
 *         return self.profile.getitem_strategy(strategy.strategy)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":193
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob_strategy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategy,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strategy)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, 1); __PYX_ERR(2, 193, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob_strategy") < 0)) __PYX_ERR(2, 193, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategy = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 193, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(2, 193, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_12_setprob_strategy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), __pyx_v_strategy, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_12_setprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("_setprob_strategy", 0);

  /* "gambit/lib/mixed.pxi":194
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(2, 194, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_strategy->strategy, __pyx_t_1);

  /* "gambit/lib/mixed.pxi":193
 *     def _setprob(self, int index, value):
 *         setitem_mspd_int(self.profile, index, value)
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":195
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_6gambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(2, 195, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_14_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "gambit/lib/mixed.pxi":196
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)             # <<<<<<<<<<<<<<
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_player->player)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 196, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":195
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         setitem_mspd_strategy(self.profile, strategy.strategy, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":197
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(2, 197, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_16_strategy_value(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_16_strategy_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_strategy_value", 0);

  /* "gambit/lib/mixed.pxi":198
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)             # <<<<<<<<<<<<<<
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_strategy->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":197
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player)
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._strategy_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":199
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_pl;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s1 = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value_deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pl,&__pyx_n_s_s1,&__pyx_n_s_s2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 1); __PYX_ERR(2, 199, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 2); __PYX_ERR(2, 199, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_strategy_value_deriv") < 0)) __PYX_ERR(2, 199, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pl = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_pl == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 199, __pyx_L3_error)
    __pyx_v_s1 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)values[1]);
    __pyx_v_s2 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 199, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s1), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "s1", 0))) __PYX_ERR(2, 200, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s2), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "s2", 0))) __PYX_ERR(2, 200, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_18_strategy_value_deriv(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self), __pyx_v_pl, __pyx_v_s1, __pyx_v_s2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_18_strategy_value_deriv(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_strategy_value_deriv", 0);

  /* "gambit/lib/mixed.pxi":201
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)             # <<<<<<<<<<<<<<
 * 
 *     def liap_value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoffDeriv(__pyx_v_pl, __pyx_v_s1->strategy, __pyx_v_s2->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 201, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":199
 *     def _strategy_value(self, Strategy strategy):
 *         return self.profile.GetPayoff(strategy.strategy)
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":203
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def copy(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_20liap_value(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_20liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "gambit/lib/mixed.pxi":204
 * 
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()             # <<<<<<<<<<<<<<
 *     def copy(self):
 *         cdef MixedStrategyProfileDouble mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetLiapValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 204, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":203
 *         return self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def copy(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":205
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_22copy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_22copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "gambit/lib/mixed.pxi":207
 *     def copy(self):
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 207, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":208
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return mixed
 *     def as_behavior(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->profile));

  /* "gambit/lib/mixed.pxi":209
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed             # <<<<<<<<<<<<<<
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileDouble behav
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":205
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":210
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_behavior (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_24as_behavior(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_24as_behavior(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  MixedBehaviorProfile<double>  *__pyx_t_5;
  __Pyx_RefNannySetupContext("as_behavior", 0);

  /* "gambit/lib/mixed.pxi":212
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 212, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 212, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/mixed.pxi":213
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\             # <<<<<<<<<<<<<<
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileDouble()
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__61, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 213, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 213, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":212
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 */
  }

  /* "gambit/lib/mixed.pxi":215
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 215, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_behav = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":216
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def restriction(self):
 */
  try {
    __pyx_t_5 = new MixedBehaviorProfile<double> ((*__pyx_v_self->profile));
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_NotImplementedError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_NotImplementedError); }
    __PYX_ERR(2, 216, __pyx_L1_error)
  }
  __pyx_v_behav->profile = __pyx_t_5;

  /* "gambit/lib/mixed.pxi":217
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def restriction(self):
 *         cdef StrategicRestriction s
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":210
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble.as_behavior", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":218
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restriction (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_26restriction(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_26restriction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("restriction", 0);

  /* "gambit/lib/mixed.pxi":220
 *     def restriction(self):
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 220, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":221
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())             # <<<<<<<<<<<<<<
 *         return s
 *     def unrestrict(self):
 */
  __pyx_v_s->support = new StrategySupportProfile(__pyx_v_self->profile->GetSupport());

  /* "gambit/lib/mixed.pxi":222
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s             # <<<<<<<<<<<<<<
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileDouble()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":218
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble.restriction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":223
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_28unrestrict(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_28unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_profile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "gambit/lib/mixed.pxi":224
 *         return s
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 *         return profile
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_profile = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":225
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())             # <<<<<<<<<<<<<<
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 */
  __pyx_v_profile->profile = new MixedStrategyProfile<double> (__pyx_v_self->profile->ToFullSupport());

  /* "gambit/lib/mixed.pxi":226
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 *         return profile             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_profile));
  __pyx_r = ((PyObject *)__pyx_v_profile);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":223
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileDouble()
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":227
 *         profile.profile = new c_MixedStrategyProfileDouble(self.profile.ToFullSupport())
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_30set_centroid(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_30set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":228
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_32normalize(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_32normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":231
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/mixed.pxi":233
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":234
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "gambit/lib/mixed.pxi":235
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":231
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileDouble.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":241
 *     cdef c_MixedStrategyProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational___dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/mixed.pxi":242
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()
 */
  delete __pyx_v_self->profile;

  /* "gambit/lib/mixed.pxi":241
 *     cdef c_MixedStrategyProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/mixed.pxi":243
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/mixed.pxi":244
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.MixedProfileLength()             # <<<<<<<<<<<<<<
 * 
 *     def _strategy_index(self, Strategy st):
 */
  __pyx_r = __pyx_v_self->profile->MixedProfileLength();
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":243
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.MixedProfileLength()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":246
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_5_strategy_index(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_index (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_st), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "st", 0))) __PYX_ERR(2, 246, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4_strategy_index(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_st));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4_strategy_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_strategy_index", 0);

  /* "gambit/lib/mixed.pxi":247
 * 
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->profile->GetSupport().GetIndex(__pyx_v_st->strategy)); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":246
 *         return self.profile.MixedProfileLength()
 * 
 *     def _strategy_index(self, Strategy st):             # <<<<<<<<<<<<<<
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._strategy_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":248
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getprob_strategy(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 248, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_6_getprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Rational __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "gambit/lib/mixed.pxi":249
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())             # <<<<<<<<<<<<<<
 *     def _getprob_strategy(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.getitem_strategy(strategy.strategy)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(2, 249, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_t_3).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 249, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":248
 *     def _strategy_index(self, Strategy st):
 *         return self.profile.GetSupport().GetIndex(st.strategy)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getprob_strategy(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":250
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getitem_strategy(strategy.strategy)).c_str())
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_9_getprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob_strategy (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(2, 250, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_8_getprob_strategy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_8_getprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Rational __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_getprob_strategy", 0);

  /* "gambit/lib/mixed.pxi":251
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getprob_strategy(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.getitem_strategy(strategy.strategy)).c_str())             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         cdef char *s
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_self->profile->operator[](__pyx_v_strategy->strategy);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(2, 251, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_t_3).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(2, 251, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 251, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":250
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getprob_strategy(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getitem_strategy(strategy.strategy)).c_str())
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._getprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":252
 *     def _getprob_strategy(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.getitem_strategy(strategy.strategy)).c_str())
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(2, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(2, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 252, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_10_setprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_s;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "gambit/lib/mixed.pxi":254
 *     def _setprob(self, int index, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 254, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/mixed.pxi":256
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)             # <<<<<<<<<<<<<<
 *         t = str(value)
 *         s = t
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 256, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "gambit/lib/mixed.pxi":255
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %             # <<<<<<<<<<<<<<
 *                             value.__class__.__name__)
 *         t = str(value)
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_rational_precision_profile_requi, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 255, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 255, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":254
 *     def _setprob(self, int index, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  }

  /* "gambit/lib/mixed.pxi":257
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 *         t = str(value)             # <<<<<<<<<<<<<<
 *         s = t
 *         setitem_mspr_int(self.profile, index, to_rational(s))
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_value);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":258
 *                             value.__class__.__name__)
 *         t = str(value)
 *         s = t             # <<<<<<<<<<<<<<
 *         setitem_mspr_int(self.profile, index, to_rational(s))
 *     def _setprob_strategy(self, Strategy strategy, value):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_t); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(2, 258, __pyx_L1_error)
  __pyx_v_s = __pyx_t_6;

  /* "gambit/lib/mixed.pxi":259
 *         t = str(value)
 *         s = t
 *         setitem_mspr_int(self.profile, index, to_rational(s))             # <<<<<<<<<<<<<<
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         cdef char *s
 */
  setitem(__pyx_v_self->profile, __pyx_v_index, to_rational(__pyx_v_s));

  /* "gambit/lib/mixed.pxi":252
 *     def _getprob_strategy(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.getitem_strategy(strategy.strategy)).c_str())
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":260
 *         s = t
 *         setitem_mspr_int(self.profile, index, to_rational(s))
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_13_setprob_strategy(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob_strategy (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_strategy,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_strategy)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, 1); __PYX_ERR(2, 260, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob_strategy") < 0)) __PYX_ERR(2, 260, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_strategy = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob_strategy", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 260, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(2, 260, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_12_setprob_strategy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), __pyx_v_strategy, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_12_setprob_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy, PyObject *__pyx_v_value) {
  char *__pyx_v_s;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("_setprob_strategy", 0);

  /* "gambit/lib/mixed.pxi":262
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 262, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/mixed.pxi":264
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)             # <<<<<<<<<<<<<<
 *         t = str(value)
 *         s = t
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 264, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "gambit/lib/mixed.pxi":263
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %             # <<<<<<<<<<<<<<
 *                             value.__class__.__name__)
 *         t = str(value)
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_rational_precision_profile_requi, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(2, 263, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":262
 *     def _setprob_strategy(self, Strategy strategy, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  }

  /* "gambit/lib/mixed.pxi":265
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 *         t = str(value)             # <<<<<<<<<<<<<<
 *         s = t
 *         setitem_mspr_strategy(self.profile, strategy.strategy, to_rational(s))
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_value);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":266
 *                             value.__class__.__name__)
 *         t = str(value)
 *         s = t             # <<<<<<<<<<<<<<
 *         setitem_mspr_strategy(self.profile, strategy.strategy, to_rational(s))
 *     def _payoff(self, Player player):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_t); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(2, 266, __pyx_L1_error)
  __pyx_v_s = __pyx_t_6;

  /* "gambit/lib/mixed.pxi":267
 *         t = str(value)
 *         s = t
 *         setitem_mspr_strategy(self.profile, strategy.strategy, to_rational(s))             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player)).c_str())
 */
  setitem(__pyx_v_self->profile, __pyx_v_strategy->strategy, to_rational(__pyx_v_s));

  /* "gambit/lib/mixed.pxi":260
 *         s = t
 *         setitem_mspr_int(self.profile, index, to_rational(s))
 *     def _setprob_strategy(self, Strategy strategy, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._setprob_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":268
 *         s = t
 *         setitem_mspr_strategy(self.profile, strategy.strategy, to_rational(s))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(player.player)).c_str())
 *     def _strategy_value(self, Strategy strategy):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_6gambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(2, 268, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_14_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "gambit/lib/mixed.pxi":269
 *         setitem_mspr_strategy(self.profile, strategy.strategy, to_rational(s))
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player)).c_str())             # <<<<<<<<<<<<<<
 *     def _strategy_value(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.GetPayoff(strategy.strategy)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetPayoff(__pyx_v_player->player)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 269, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 269, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":268
 *         s = t
 *         setitem_mspr_strategy(self.profile, strategy.strategy, to_rational(s))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(player.player)).c_str())
 *     def _strategy_value(self, Strategy strategy):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":270
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player)).c_str())
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(strategy.strategy)).c_str())
 *     def _strategy_value_deriv(self, int pl,
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_17_strategy_value(PyObject *__pyx_v_self, PyObject *__pyx_v_strategy) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_strategy), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "strategy", 0))) __PYX_ERR(2, 270, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_16_strategy_value(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_v_strategy));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_16_strategy_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_strategy) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_strategy_value", 0);

  /* "gambit/lib/mixed.pxi":271
 *         return Rational(rat_str(self.profile.GetPayoff(player.player)).c_str())
 *     def _strategy_value(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.GetPayoff(strategy.strategy)).c_str())             # <<<<<<<<<<<<<<
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetPayoff(__pyx_v_strategy->strategy)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 271, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 271, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":270
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player)).c_str())
 *     def _strategy_value(self, Strategy strategy):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(strategy.strategy)).c_str())
 *     def _strategy_value_deriv(self, int pl,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._strategy_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":272
 *     def _strategy_value(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.GetPayoff(strategy.strategy)).c_str())
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return Rational(rat_str(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)).c_str())
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_19_strategy_value_deriv(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_pl;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s1 = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s2 = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_strategy_value_deriv (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_pl,&__pyx_n_s_s1,&__pyx_n_s_s2,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_pl)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s1)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 1); __PYX_ERR(2, 272, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_s2)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, 2); __PYX_ERR(2, 272, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_strategy_value_deriv") < 0)) __PYX_ERR(2, 272, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_pl = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_pl == (int)-1) && PyErr_Occurred())) __PYX_ERR(2, 272, __pyx_L3_error)
    __pyx_v_s1 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)values[1]);
    __pyx_v_s2 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)values[2]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_strategy_value_deriv", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(2, 272, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s1), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "s1", 0))) __PYX_ERR(2, 273, __pyx_L1_error)
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_s2), __pyx_ptype_6gambit_3lib_9libgambit_Strategy, 1, "s2", 0))) __PYX_ERR(2, 273, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_18_strategy_value_deriv(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self), __pyx_v_pl, __pyx_v_s1, __pyx_v_s2);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_18_strategy_value_deriv(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self, int __pyx_v_pl, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s1, struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s2) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_strategy_value_deriv", 0);

  /* "gambit/lib/mixed.pxi":274
 *     def _strategy_value_deriv(self, int pl,
 *                               Strategy s1, Strategy s2):
 *         return Rational(rat_str(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)).c_str())             # <<<<<<<<<<<<<<
 * 
 *     def liap_value(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetPayoffDeriv(__pyx_v_pl, __pyx_v_s1->strategy, __pyx_v_s2->strategy)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 274, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 274, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 274, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":272
 *     def _strategy_value(self, Strategy strategy):
 *         return Rational(rat_str(self.profile.GetPayoff(strategy.strategy)).c_str())
 *     def _strategy_value_deriv(self, int pl,             # <<<<<<<<<<<<<<
 *                               Strategy s1, Strategy s2):
 *         return Rational(rat_str(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)).c_str())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational._strategy_value_deriv", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":276
 *         return Rational(rat_str(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)).c_str())
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def copy(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_21liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_20liap_value(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_20liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "gambit/lib/mixed.pxi":277
 * 
 *     def liap_value(self):
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())             # <<<<<<<<<<<<<<
 *     def copy(self):
 *         cdef MixedStrategyProfileRational mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetLiapValue()).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(2, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 277, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(2, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 277, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":276
 *         return Rational(rat_str(self.profile.GetPayoffDeriv(pl, s1.strategy, s2.strategy)).c_str())
 * 
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def copy(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":278
 *     def liap_value(self):
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_23copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_22copy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_22copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "gambit/lib/mixed.pxi":280
 *     def copy(self):
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":281
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return mixed
 *     def as_behavior(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<Rational> ((*__pyx_v_self->profile));

  /* "gambit/lib/mixed.pxi":282
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed             # <<<<<<<<<<<<<<
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileRational behav
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":278
 *     def liap_value(self):
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":283
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_25as_behavior(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_behavior (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_24as_behavior(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_24as_behavior(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  MixedBehaviorProfile<Rational>  *__pyx_t_5;
  __Pyx_RefNannySetupContext("as_behavior", 0);

  /* "gambit/lib/mixed.pxi":285
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_is_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(2, 285, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!__pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/mixed.pxi":286
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\             # <<<<<<<<<<<<<<
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileRational()
 */
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__62, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 286, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(2, 286, __pyx_L1_error)

    /* "gambit/lib/mixed.pxi":285
 *     def as_behavior(self):
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 */
  }

  /* "gambit/lib/mixed.pxi":288
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_behav = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":289
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def restriction(self):
 */
  try {
    __pyx_t_5 = new MixedBehaviorProfile<Rational> ((*__pyx_v_self->profile));
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_NotImplementedError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_NotImplementedError); }
    __PYX_ERR(2, 289, __pyx_L1_error)
  }
  __pyx_v_behav->profile = __pyx_t_5;

  /* "gambit/lib/mixed.pxi":290
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def restriction(self):
 *         cdef StrategicRestriction s
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":283
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile))
 *         return mixed
 *     def as_behavior(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational.as_behavior", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":291
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_27restriction(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("restriction (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_26restriction(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_26restriction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("restriction", 0);

  /* "gambit/lib/mixed.pxi":293
 *     def restriction(self):
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()             # <<<<<<<<<<<<<<
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 293, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":294
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())             # <<<<<<<<<<<<<<
 *         return s
 *     def unrestrict(self):
 */
  __pyx_v_s->support = new StrategySupportProfile(__pyx_v_self->profile->GetSupport());

  /* "gambit/lib/mixed.pxi":295
 *         s = StrategicRestriction()
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s             # <<<<<<<<<<<<<<
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileRational()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":291
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def restriction(self):             # <<<<<<<<<<<<<<
 *         cdef StrategicRestriction s
 *         s = StrategicRestriction()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational.restriction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":296
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_29unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_28unrestrict(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_28unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_profile = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "gambit/lib/mixed.pxi":297
 *         return s
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 *         return profile
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 297, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_profile = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":298
 *     def unrestrict(self):
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())             # <<<<<<<<<<<<<<
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 */
  __pyx_v_profile->profile = new MixedStrategyProfile<Rational> (__pyx_v_self->profile->ToFullSupport());

  /* "gambit/lib/mixed.pxi":299
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 *         return profile             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_profile));
  __pyx_r = ((PyObject *)__pyx_v_profile);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":296
 *         s.support = new c_StrategySupportProfile(self.profile.GetSupport())
 *         return s
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         profile = MixedStrategyProfileRational()
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational.unrestrict", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":300
 *         profile.profile = new c_MixedStrategyProfileRational(self.profile.ToFullSupport())
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_31set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_30set_centroid(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_30set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":301
 *         return profile
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_33normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_32normalize(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_32normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/mixed.pxi":304
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/mixed.pxi":306
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":307
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "gambit/lib/mixed.pxi":308
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/mixed.pxi":304
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedStrategyProfileRational.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":26
 * 
 * cdef class MixedBehaviorProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile___repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile___repr__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self) {
  PyObject *__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/behav.pxi":27
 * cdef class MixedBehaviorProfile(object):
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])             # <<<<<<<<<<<<<<
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 27, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 27, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 27, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 27, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 27, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 27, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_player, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_player); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 27, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(3, 27, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 27, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":26
 * 
 * cdef class MixedBehaviorProfile(object):
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":28
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_3_repr_latex_(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_2_repr_latex_(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_2_repr_latex_(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self) {
  PyObject *__pyx_v_player = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);

  /* "gambit/lib/behav.pxi":29
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_players); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_3)) || PyTuple_CheckExact(__pyx_t_3)) {
    __pyx_t_2 = __pyx_t_3; __Pyx_INCREF(__pyx_t_2); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 29, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 29, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_4); __Pyx_INCREF(__pyx_t_3); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(3, 29, __pyx_L1_error)
        #else
        __pyx_t_3 = PySequence_ITEM(__pyx_t_2, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        #endif
      }
    } else {
      __pyx_t_3 = __pyx_t_5(__pyx_t_2);
      if (unlikely(!__pyx_t_3)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 29, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_3);
    }
    __Pyx_XDECREF_SET(__pyx_v_player, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_6 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_v_player); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_7))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_7);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_7, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_7, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_CallNoArg(__pyx_t_7); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_replace); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__63, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 29, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_3))) __PYX_ERR(3, 29, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Join(__pyx_kp_s__18, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":28
 *     def __repr__(self):
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_player);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":31
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_5__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(3, 31, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfile, 1, "self", 0))) __PYX_ERR(3, 31, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_4__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_4__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/behav.pxi":32
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_0, 0, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":33
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 *         if whichop == 0:
 *             return list(self) < list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 33, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":32
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 *         if whichop == 0:             # <<<<<<<<<<<<<<
 *             return list(self) < list(other)
 *         elif whichop == 1:
 */
  }

  /* "gambit/lib/behav.pxi":34
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 34, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":35
 *             return list(self) < list(other)
 *         elif whichop == 1:
 *             return list(self) <= list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 2:
 *             return list(self) == list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 35, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_LE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 35, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":34
 *         if whichop == 0:
 *             return list(self) < list(other)
 *         elif whichop == 1:             # <<<<<<<<<<<<<<
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 */
  }

  /* "gambit/lib/behav.pxi":36
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":37
 *             return list(self) <= list(other)
 *         elif whichop == 2:
 *             return list(self) == list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 3:
 *             return list(self) != list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 37, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":36
 *         elif whichop == 1:
 *             return list(self) <= list(other)
 *         elif whichop == 2:             # <<<<<<<<<<<<<<
 *             return list(self) == list(other)
 *         elif whichop == 3:
 */
  }

  /* "gambit/lib/behav.pxi":38
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  __pyx_t_4 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 38, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":39
 *             return list(self) == list(other)
 *         elif whichop == 3:
 *             return list(self) != list(other)             # <<<<<<<<<<<<<<
 *         elif whichop == 4:
 *             return list(self) > list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 39, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 39, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":38
 *         elif whichop == 2:
 *             return list(self) == list(other)
 *         elif whichop == 3:             # <<<<<<<<<<<<<<
 *             return list(self) != list(other)
 *         elif whichop == 4:
 */
  }

  /* "gambit/lib/behav.pxi":40
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  __pyx_t_1 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_4, 4, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(3, 40, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":41
 *             return list(self) != list(other)
 *         elif whichop == 4:
 *             return list(self) > list(other)             # <<<<<<<<<<<<<<
 *         else:
 *             return list(self) >= list(other)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 41, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_3, Py_GT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 41, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":40
 *         elif whichop == 3:
 *             return list(self) != list(other)
 *         elif whichop == 4:             # <<<<<<<<<<<<<<
 *             return list(self) > list(other)
 *         else:
 */
  }

  /* "gambit/lib/behav.pxi":43
 *             return list(self) > list(other)
 *         else:
 *             return list(self) >= list(other)             # <<<<<<<<<<<<<<
 * 
 *     def _resolve_index(self, index, players=True):
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PySequence_List(((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = PyObject_RichCompare(__pyx_t_4, __pyx_t_3, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/behav.pxi":31
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):             # <<<<<<<<<<<<<<
 *         if whichop == 0:
 *             return list(self) < list(other)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":45
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_7_resolve_index(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_players = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_resolve_index (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_players,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject *)Py_True);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_players);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_resolve_index") < 0)) __PYX_ERR(3, 45, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_index = values[0];
    __pyx_v_players = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_resolve_index", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 45, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_6_resolve_index(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_players);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":55
 * 
 *         # if no player matches, check infoset labels
 *         infosets = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                             [ list(p.infosets)
 *                               for p in self.game.players ])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7 = {"lambda7", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda7 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda7", 1, 2, 2, 1); __PYX_ERR(3, 55, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda7") < 0)) __PYX_ERR(3, 55, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda7", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 55, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda7(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda7(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda7", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda7", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":58
 *                             [ list(p.infosets)
 *                               for p in self.game.players ])
 *         matches = filter(lambda x: x.label==index, infosets)             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8 = {"lambda8", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda8 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda8(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda8(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_cur_scope;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda8", 0);
  __pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_index)) { __Pyx_RaiseClosureNameError("index"); __PYX_ERR(3, 58, __pyx_L1_error) }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_index, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda8", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":65
 * 
 *         # if no infoset matches, check action labels
 *         actions = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                             [ list(i.actions)
 *                               for p in self.game.players
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9 = {"lambda9", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_x = 0;
  PyObject *__pyx_v_y = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda9 (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_x,&__pyx_n_s_y,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_y)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("lambda9", 1, 2, 2, 1); __PYX_ERR(3, 65, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "lambda9") < 0)) __PYX_ERR(3, 65, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_x = values[0];
    __pyx_v_y = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("lambda9", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 65, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_lambda_funcdef_lambda9(__pyx_self, __pyx_v_x, __pyx_v_y);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda9(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_x, PyObject *__pyx_v_y) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("lambda9", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyNumber_Add(__pyx_v_x, __pyx_v_y); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda9", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":69
 *                               for p in self.game.players
 *                               for i in p.infosets ])
 *         matches = filter(lambda x: x.label==index, actions)             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10 = {"lambda10", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("lambda10 (wrapper)", 0);
  __pyx_r = __pyx_lambda_funcdef_lambda10(__pyx_self, ((PyObject *)__pyx_v_x));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_lambda_funcdef_lambda10(PyObject *__pyx_self, PyObject *__pyx_v_x) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_cur_scope;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_outer_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("lambda10", 0);
  __pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *) __Pyx_CyFunction_GetClosure(__pyx_self);
  __pyx_cur_scope = __pyx_outer_scope;
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_x, __pyx_n_s_label); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (unlikely(!__pyx_cur_scope->__pyx_v_index)) { __Pyx_RaiseClosureNameError("index"); __PYX_ERR(3, 69, __pyx_L1_error) }
  __pyx_t_2 = PyObject_RichCompare(__pyx_t_1, __pyx_cur_scope->__pyx_v_index, Py_EQ); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index.lambda10", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":45
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_6_resolve_index(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_players) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_cur_scope;
  PyObject *__pyx_v_infosets = NULL;
  PyObject *__pyx_v_matches = NULL;
  PyObject *__pyx_v_actions = NULL;
  PyObject *__pyx_v_p = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  Py_ssize_t __pyx_t_10;
  PyObject *(*__pyx_t_11)(PyObject *);
  PyObject *__pyx_t_12 = NULL;
  Py_ssize_t __pyx_t_13;
  PyObject *(*__pyx_t_14)(PyObject *);
  PyObject *__pyx_t_15 = NULL;
  __Pyx_RefNannySetupContext("_resolve_index", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_index = __pyx_v_index;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_index);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_index);

  /* "gambit/lib/behav.pxi":47
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or action object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
  __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 47, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":48
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
      __Pyx_XGOTREF(__pyx_t_2);
      __Pyx_XGOTREF(__pyx_t_3);
      __Pyx_XGOTREF(__pyx_t_4);
      /*try:*/ {

        /* "gambit/lib/behav.pxi":50
 *             try:
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 pass
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 50, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 50, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyObject_GetItem(__pyx_t_6, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 50, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_r = __pyx_t_5;
        __pyx_t_5 = 0;
        goto __pyx_L8_try_return;

        /* "gambit/lib/behav.pxi":48
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      }
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "gambit/lib/behav.pxi":51
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 pass
 * 
 */
      __pyx_t_7 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_7) {
        __Pyx_ErrRestore(0,0,0);
        goto __pyx_L5_exception_handled;
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "gambit/lib/behav.pxi":48
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 *             try:             # <<<<<<<<<<<<<<
 *                 # first check to see if string is referring to a player
 *                 return self.game.players[index]
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
      goto __pyx_L0;
      __pyx_L5_exception_handled:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_2);
      __Pyx_XGIVEREF(__pyx_t_3);
      __Pyx_XGIVEREF(__pyx_t_4);
      __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    }

    /* "gambit/lib/behav.pxi":47
 *     def _resolve_index(self, index, players=True):
 *         # Given a string index, resolve into a player or action object.
 *         if players:             # <<<<<<<<<<<<<<
 *             try:
 *                 # first check to see if string is referring to a player
 */
  }

  /* "gambit/lib/behav.pxi":55
 * 
 *         # if no player matches, check infoset labels
 *         infosets = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                             [ list(p.infosets)
 *                               for p in self.game.players ])
 */
  __pyx_t_5 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_lambda7, 0, __pyx_n_s_resolve_index_locals_lambda, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);

  /* "gambit/lib/behav.pxi":56
 *         # if no player matches, check infoset labels
 *         infosets = reduce(lambda x,y: x+y,
 *                             [ list(p.infosets)             # <<<<<<<<<<<<<<
 *                               for p in self.game.players ])
 *         matches = filter(lambda x: x.label==index, infosets)
 */
  __pyx_t_6 = PyList_New(0); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 56, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "gambit/lib/behav.pxi":57
 *         infosets = reduce(lambda x,y: x+y,
 *                             [ list(p.infosets)
 *                               for p in self.game.players ])             # <<<<<<<<<<<<<<
 *         matches = filter(lambda x: x.label==index, infosets)
 *         if len(matches) == 1:
 */
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_players); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 57, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (likely(PyList_CheckExact(__pyx_t_9)) || PyTuple_CheckExact(__pyx_t_9)) {
    __pyx_t_8 = __pyx_t_9; __Pyx_INCREF(__pyx_t_8); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_9); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 57, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = Py_TYPE(__pyx_t_8)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 57, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_8))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(3, 57, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_9 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_10); __Pyx_INCREF(__pyx_t_9); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(3, 57, __pyx_L1_error)
        #else
        __pyx_t_9 = PySequence_ITEM(__pyx_t_8, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 57, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        #endif
      }
    } else {
      __pyx_t_9 = __pyx_t_11(__pyx_t_8);
      if (unlikely(!__pyx_t_9)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 57, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_9);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_9);
    __pyx_t_9 = 0;

    /* "gambit/lib/behav.pxi":56
 *         # if no player matches, check infoset labels
 *         infosets = reduce(lambda x,y: x+y,
 *                             [ list(p.infosets)             # <<<<<<<<<<<<<<
 *                               for p in self.game.players ])
 *         matches = filter(lambda x: x.label==index, infosets)
 */
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_infosets); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_12 = PySequence_List(__pyx_t_9); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 56, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_6, (PyObject*)__pyx_t_12))) __PYX_ERR(3, 56, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;

    /* "gambit/lib/behav.pxi":57
 *         infosets = reduce(lambda x,y: x+y,
 *                             [ list(p.infosets)
 *                               for p in self.game.players ])             # <<<<<<<<<<<<<<
 *         matches = filter(lambda x: x.label==index, infosets)
 *         if len(matches) == 1:
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "gambit/lib/behav.pxi":55
 * 
 *         # if no player matches, check infoset labels
 *         infosets = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                             [ list(p.infosets)
 *                               for p in self.game.players ])
 */
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_6);
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_reduce, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_infosets = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "gambit/lib/behav.pxi":58
 *                             [ list(p.infosets)
 *                               for p in self.game.players ])
 *         matches = filter(lambda x: x.label==index, infosets)             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_1lambda8, 0, __pyx_n_s_resolve_index_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
  __Pyx_INCREF(__pyx_v_infosets);
  __Pyx_GIVEREF(__pyx_v_infosets);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_v_infosets);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_v_matches = __pyx_t_6;
  __pyx_t_6 = 0;

  /* "gambit/lib/behav.pxi":59
 *                               for p in self.game.players ])
 *         matches = filter(lambda x: x.label==index, infosets)
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) > 1:
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_matches); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(3, 59, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_10 == 1) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":60
 *         matches = filter(lambda x: x.label==index, infosets)
 *         if len(matches) == 1:
 *             return matches[0]             # <<<<<<<<<<<<<<
 *         elif len(matches) > 1:
 *             raise IndexError("multiple infosets matching label '%s'" % index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_matches, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 60, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_r = __pyx_t_6;
    __pyx_t_6 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":59
 *                               for p in self.game.players ])
 *         matches = filter(lambda x: x.label==index, infosets)
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) > 1:
 */
  }

  /* "gambit/lib/behav.pxi":61
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) > 1:             # <<<<<<<<<<<<<<
 *             raise IndexError("multiple infosets matching label '%s'" % index)
 * 
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_matches); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(3, 61, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_10 > 1) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":62
 *             return matches[0]
 *         elif len(matches) > 1:
 *             raise IndexError("multiple infosets matching label '%s'" % index)             # <<<<<<<<<<<<<<
 * 
 *         # if no infoset matches, check action labels
 */
    __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_multiple_infosets_matching_label, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_6, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __PYX_ERR(3, 62, __pyx_L1_error)

    /* "gambit/lib/behav.pxi":61
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) > 1:             # <<<<<<<<<<<<<<
 *             raise IndexError("multiple infosets matching label '%s'" % index)
 * 
 */
  }

  /* "gambit/lib/behav.pxi":65
 * 
 *         # if no infoset matches, check action labels
 *         actions = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                             [ list(i.actions)
 *                               for p in self.game.players
 */
  __pyx_t_6 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_2lambda9, 0, __pyx_n_s_resolve_index_locals_lambda, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);

  /* "gambit/lib/behav.pxi":66
 *         # if no infoset matches, check action labels
 *         actions = reduce(lambda x,y: x+y,
 *                             [ list(i.actions)             # <<<<<<<<<<<<<<
 *                               for p in self.game.players
 *                               for i in p.infosets ])
 */
  __pyx_t_8 = PyList_New(0); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 66, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);

  /* "gambit/lib/behav.pxi":67
 *         actions = reduce(lambda x,y: x+y,
 *                             [ list(i.actions)
 *                               for p in self.game.players             # <<<<<<<<<<<<<<
 *                               for i in p.infosets ])
 *         matches = filter(lambda x: x.label==index, actions)
 */
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_players); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 67, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_12);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
    __pyx_t_5 = __pyx_t_12; __Pyx_INCREF(__pyx_t_5); __pyx_t_10 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_10 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 67, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_11 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(3, 67, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_5))) {
        if (__pyx_t_10 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_12 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_12); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(3, 67, __pyx_L1_error)
        #else
        __pyx_t_12 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 67, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      } else {
        if (__pyx_t_10 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_10); __Pyx_INCREF(__pyx_t_12); __pyx_t_10++; if (unlikely(0 < 0)) __PYX_ERR(3, 67, __pyx_L1_error)
        #else
        __pyx_t_12 = PySequence_ITEM(__pyx_t_5, __pyx_t_10); __pyx_t_10++; if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 67, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_12);
        #endif
      }
    } else {
      __pyx_t_12 = __pyx_t_11(__pyx_t_5);
      if (unlikely(!__pyx_t_12)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 67, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_12);
    }
    __Pyx_XDECREF_SET(__pyx_v_p, __pyx_t_12);
    __pyx_t_12 = 0;

    /* "gambit/lib/behav.pxi":68
 *                             [ list(i.actions)
 *                               for p in self.game.players
 *                               for i in p.infosets ])             # <<<<<<<<<<<<<<
 *         matches = filter(lambda x: x.label==index, actions)
 *         if len(matches) == 1:
 */
    __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_p, __pyx_n_s_infosets); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 68, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_12);
    if (likely(PyList_CheckExact(__pyx_t_12)) || PyTuple_CheckExact(__pyx_t_12)) {
      __pyx_t_9 = __pyx_t_12; __Pyx_INCREF(__pyx_t_9); __pyx_t_13 = 0;
      __pyx_t_14 = NULL;
    } else {
      __pyx_t_13 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_t_12); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 68, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_14 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_14)) __PYX_ERR(3, 68, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
    for (;;) {
      if (likely(!__pyx_t_14)) {
        if (likely(PyList_CheckExact(__pyx_t_9))) {
          if (__pyx_t_13 >= PyList_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_12 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_12); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(3, 68, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 68, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        } else {
          if (__pyx_t_13 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_12 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_13); __Pyx_INCREF(__pyx_t_12); __pyx_t_13++; if (unlikely(0 < 0)) __PYX_ERR(3, 68, __pyx_L1_error)
          #else
          __pyx_t_12 = PySequence_ITEM(__pyx_t_9, __pyx_t_13); __pyx_t_13++; if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 68, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_12);
          #endif
        }
      } else {
        __pyx_t_12 = __pyx_t_14(__pyx_t_9);
        if (unlikely(!__pyx_t_12)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 68, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_12);
      }
      __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_12);
      __pyx_t_12 = 0;

      /* "gambit/lib/behav.pxi":66
 *         # if no infoset matches, check action labels
 *         actions = reduce(lambda x,y: x+y,
 *                             [ list(i.actions)             # <<<<<<<<<<<<<<
 *                               for p in self.game.players
 *                               for i in p.infosets ])
 */
      __pyx_t_12 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_actions); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_12);
      __pyx_t_15 = PySequence_List(__pyx_t_12); if (unlikely(!__pyx_t_15)) __PYX_ERR(3, 66, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_15);
      __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_8, (PyObject*)__pyx_t_15))) __PYX_ERR(3, 66, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;

      /* "gambit/lib/behav.pxi":68
 *                             [ list(i.actions)
 *                               for p in self.game.players
 *                               for i in p.infosets ])             # <<<<<<<<<<<<<<
 *         matches = filter(lambda x: x.label==index, actions)
 *         if len(matches) == 1:
 */
    }
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "gambit/lib/behav.pxi":67
 *         actions = reduce(lambda x,y: x+y,
 *                             [ list(i.actions)
 *                               for p in self.game.players             # <<<<<<<<<<<<<<
 *                               for i in p.infosets ])
 *         matches = filter(lambda x: x.label==index, actions)
 */
  }
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "gambit/lib/behav.pxi":65
 * 
 *         # if no infoset matches, check action labels
 *         actions = reduce(lambda x,y: x+y,             # <<<<<<<<<<<<<<
 *                             [ list(i.actions)
 *                               for p in self.game.players
 */
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_8);
  __pyx_t_6 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_reduce, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_actions = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "gambit/lib/behav.pxi":69
 *                               for p in self.game.players
 *                               for i in p.infosets ])
 *         matches = filter(lambda x: x.label==index, actions)             # <<<<<<<<<<<<<<
 *         if len(matches) == 1:
 *             return matches[0]
 */
  __pyx_t_8 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14_resolve_index_3lambda10, 0, __pyx_n_s_resolve_index_locals_lambda, ((PyObject*)__pyx_cur_scope), __pyx_n_s_gambit_lib_libgambit, __pyx_d, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_INCREF(__pyx_v_actions);
  __Pyx_GIVEREF(__pyx_v_actions);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_actions);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_filter, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF_SET(__pyx_v_matches, __pyx_t_8);
  __pyx_t_8 = 0;

  /* "gambit/lib/behav.pxi":70
 *                               for i in p.infosets ])
 *         matches = filter(lambda x: x.label==index, actions)
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) == 0:
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_matches); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(3, 70, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_10 == 1) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":71
 *         matches = filter(lambda x: x.label==index, actions)
 *         if len(matches) == 1:
 *             return matches[0]             # <<<<<<<<<<<<<<
 *         elif len(matches) == 0:
 *             if players:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_matches, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 71, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_r = __pyx_t_8;
    __pyx_t_8 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":70
 *                               for i in p.infosets ])
 *         matches = filter(lambda x: x.label==index, actions)
 *         if len(matches) == 1:             # <<<<<<<<<<<<<<
 *             return matches[0]
 *         elif len(matches) == 0:
 */
  }

  /* "gambit/lib/behav.pxi":72
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *             if players:
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 */
  __pyx_t_10 = PyObject_Length(__pyx_v_matches); if (unlikely(__pyx_t_10 == -1)) __PYX_ERR(3, 72, __pyx_L1_error)
  __pyx_t_1 = ((__pyx_t_10 == 0) != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":73
 *             return matches[0]
 *         elif len(matches) == 0:
 *             if players:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 *             else:
 */
    __pyx_t_1 = __Pyx_PyObject_IsTrue(__pyx_v_players); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(3, 73, __pyx_L1_error)
    if (__pyx_t_1) {

      /* "gambit/lib/behav.pxi":74
 *         elif len(matches) == 0:
 *             if players:
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *             else:
 *                 raise IndexError("no infoset or action matching label '%s'" % index)
 */
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_no_player_infoset_or_action_matc, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 74, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 74, __pyx_L1_error)

      /* "gambit/lib/behav.pxi":73
 *             return matches[0]
 *         elif len(matches) == 0:
 *             if players:             # <<<<<<<<<<<<<<
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 *             else:
 */
    }

    /* "gambit/lib/behav.pxi":76
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 *             else:
 *                 raise IndexError("no infoset or action matching label '%s'" % index)             # <<<<<<<<<<<<<<
 *         else:
 *             raise IndexError("multiple actions matching label '%s'" % index)
 */
    /*else*/ {
      __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_no_infoset_or_action_matching_la, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_8);
      PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 76, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __PYX_ERR(3, 76, __pyx_L1_error)
    }

    /* "gambit/lib/behav.pxi":72
 *         if len(matches) == 1:
 *             return matches[0]
 *         elif len(matches) == 0:             # <<<<<<<<<<<<<<
 *             if players:
 *                 raise IndexError("no player, infoset or action matching label '%s'" % index)
 */
  }

  /* "gambit/lib/behav.pxi":78
 *                 raise IndexError("no infoset or action matching label '%s'" % index)
 *         else:
 *             raise IndexError("multiple actions matching label '%s'" % index)             # <<<<<<<<<<<<<<
 * 
 *     def _setinfoset(self, index, value):
 */
  /*else*/ {
    __pyx_t_8 = __Pyx_PyString_Format(__pyx_kp_s_multiple_actions_matching_label, __pyx_cur_scope->__pyx_v_index); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
    __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 78, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_Raise(__pyx_t_8, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __PYX_ERR(3, 78, __pyx_L1_error)
  }

  /* "gambit/lib/behav.pxi":45
 *             return list(self) >= list(other)
 * 
 *     def _resolve_index(self, index, players=True):             # <<<<<<<<<<<<<<
 *         # Given a string index, resolve into a player or action object.
 *         if players:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._resolve_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infosets);
  __Pyx_XDECREF(__pyx_v_matches);
  __Pyx_XDECREF(__pyx_v_actions);
  __Pyx_XDECREF(__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":80
 *             raise IndexError("multiple actions matching label '%s'" % index)
 * 
 *     def _setinfoset(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_9_setinfoset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_9_setinfoset(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setinfoset (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setinfoset", 1, 2, 2, 1); __PYX_ERR(3, 80, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setinfoset") < 0)) __PYX_ERR(3, 80, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setinfoset", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 80, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._setinfoset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_8_setinfoset(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_8_setinfoset(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_action = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("_setinfoset", 0);

  /* "gambit/lib/behav.pxi":81
 * 
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):             # <<<<<<<<<<<<<<
 *             for action, val in zip(index.actions, value):
 *                 self._setaction(action, val)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(3, 81, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 81, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_2 == __pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/behav.pxi":82
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):             # <<<<<<<<<<<<<<
 *                 self._setaction(action, val)
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_value);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 82, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 82, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 82, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 82, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 82, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 82, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 82, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 82, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(3, 82, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 82, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(3, 82, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(3, 82, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_action, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "gambit/lib/behav.pxi":83
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):
 *                 self._setaction(action, val)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setaction); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = NULL;
      __pyx_t_2 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_2 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(2+__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_action);
      __Pyx_GIVEREF(__pyx_v_action);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_2, __pyx_v_action);
      __Pyx_INCREF(__pyx_v_val);
      __Pyx_GIVEREF(__pyx_v_val);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_2, __pyx_v_val);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 83, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "gambit/lib/behav.pxi":82
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):             # <<<<<<<<<<<<<<
 *                 self._setaction(action, val)
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/behav.pxi":81
 * 
 *     def _setinfoset(self, index, value):
 *         if len(index.actions) == len(value):             # <<<<<<<<<<<<<<
 *             for action, val in zip(index.actions, value):
 *                 self._setaction(action, val)
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":85
 *                 self._setaction(action, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
  /*else*/ {

    /* "gambit/lib/behav.pxi":86
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 *                              (len(index.actions), len(value)))             # <<<<<<<<<<<<<<
 * 
 *     def _setplayer(self, index, value):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 86, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 86, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 86, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;

    /* "gambit/lib/behav.pxi":85
 *                 self._setaction(action, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_value_list_length_must_be_s_not, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 85, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 85, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/behav.pxi":80
 *             raise IndexError("multiple actions matching label '%s'" % index)
 * 
 *     def _setinfoset(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.actions) == len(value):
 *             for action, val in zip(index.actions, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._setinfoset", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_action);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":88
 *                              (len(index.actions), len(value)))
 * 
 *     def _setplayer(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11_setplayer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11_setplayer(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setplayer (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setplayer", 1, 2, 2, 1); __PYX_ERR(3, 88, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setplayer") < 0)) __PYX_ERR(3, 88, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = values[0];
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setplayer", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 88, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._setplayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_10_setplayer(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_10_setplayer(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_v_infoset = NULL;
  PyObject *__pyx_v_val = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *(*__pyx_t_10)(PyObject *);
  __Pyx_RefNannySetupContext("_setplayer", 0);

  /* "gambit/lib/behav.pxi":89
 * 
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):             # <<<<<<<<<<<<<<
 *             for infoset, val in zip(index.infosets, value):
 *                 self._setinfoset(infoset, val)
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_infosets); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(3, 89, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 89, __pyx_L1_error)
  __pyx_t_4 = ((__pyx_t_2 == __pyx_t_3) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/behav.pxi":90
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):             # <<<<<<<<<<<<<<
 *                 self._setinfoset(infoset, val)
 *         else:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_infosets); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_value);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_zip, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 90, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
      __pyx_t_5 = __pyx_t_1; __Pyx_INCREF(__pyx_t_5); __pyx_t_3 = 0;
      __pyx_t_6 = NULL;
    } else {
      __pyx_t_3 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 90, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = Py_TYPE(__pyx_t_5)->tp_iternext; if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 90, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (;;) {
      if (likely(!__pyx_t_6)) {
        if (likely(PyList_CheckExact(__pyx_t_5))) {
          if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 90, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 90, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        } else {
          if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 90, __pyx_L1_error)
          #else
          __pyx_t_1 = PySequence_ITEM(__pyx_t_5, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 90, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_1);
          #endif
        }
      } else {
        __pyx_t_1 = __pyx_t_6(__pyx_t_5);
        if (unlikely(!__pyx_t_1)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 90, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_1);
      }
      if ((likely(PyTuple_CheckExact(__pyx_t_1))) || (PyList_CheckExact(__pyx_t_1))) {
        PyObject* sequence = __pyx_t_1;
        #if CYTHON_COMPILING_IN_CPYTHON
        Py_ssize_t size = Py_SIZE(sequence);
        #else
        Py_ssize_t size = PySequence_Size(sequence);
        #endif
        if (unlikely(size != 2)) {
          if (size > 2) __Pyx_RaiseTooManyValuesError(2);
          else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
          __PYX_ERR(3, 90, __pyx_L1_error)
        }
        #if CYTHON_COMPILING_IN_CPYTHON
        if (likely(PyTuple_CheckExact(sequence))) {
          __pyx_t_7 = PyTuple_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyTuple_GET_ITEM(sequence, 1); 
        } else {
          __pyx_t_7 = PyList_GET_ITEM(sequence, 0); 
          __pyx_t_8 = PyList_GET_ITEM(sequence, 1); 
        }
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(__pyx_t_8);
        #else
        __pyx_t_7 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_7);
        __pyx_t_8 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_8);
        #endif
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      } else {
        Py_ssize_t index = -1;
        __pyx_t_9 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 90, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = Py_TYPE(__pyx_t_9)->tp_iternext;
        index = 0; __pyx_t_7 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_7)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_7);
        index = 1; __pyx_t_8 = __pyx_t_10(__pyx_t_9); if (unlikely(!__pyx_t_8)) goto __pyx_L6_unpacking_failed;
        __Pyx_GOTREF(__pyx_t_8);
        if (__Pyx_IternextUnpackEndCheck(__pyx_t_10(__pyx_t_9), 2) < 0) __PYX_ERR(3, 90, __pyx_L1_error)
        __pyx_t_10 = NULL;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        goto __pyx_L7_unpacking_done;
        __pyx_L6_unpacking_failed:;
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        __pyx_t_10 = NULL;
        if (__Pyx_IterFinish() == 0) __Pyx_RaiseNeedMoreValuesError(index);
        __PYX_ERR(3, 90, __pyx_L1_error)
        __pyx_L7_unpacking_done:;
      }
      __Pyx_XDECREF_SET(__pyx_v_infoset, __pyx_t_7);
      __pyx_t_7 = 0;
      __Pyx_XDECREF_SET(__pyx_v_val, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "gambit/lib/behav.pxi":91
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):
 *                 self._setinfoset(infoset, val)             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setinfoset); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = NULL;
      __pyx_t_2 = 0;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
        __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_8);
        if (likely(__pyx_t_7)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
          __Pyx_INCREF(__pyx_t_7);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_8, function);
          __pyx_t_2 = 1;
        }
      }
      __pyx_t_9 = PyTuple_New(2+__pyx_t_2); if (unlikely(!__pyx_t_9)) __PYX_ERR(3, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_9);
      if (__pyx_t_7) {
        __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_7); __pyx_t_7 = NULL;
      }
      __Pyx_INCREF(__pyx_v_infoset);
      __Pyx_GIVEREF(__pyx_v_infoset);
      PyTuple_SET_ITEM(__pyx_t_9, 0+__pyx_t_2, __pyx_v_infoset);
      __Pyx_INCREF(__pyx_v_val);
      __Pyx_GIVEREF(__pyx_v_val);
      PyTuple_SET_ITEM(__pyx_t_9, 1+__pyx_t_2, __pyx_v_val);
      __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_9, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 91, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "gambit/lib/behav.pxi":90
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):             # <<<<<<<<<<<<<<
 *                 self._setinfoset(infoset, val)
 *         else:
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/behav.pxi":89
 * 
 *     def _setplayer(self, index, value):
 *         if len(index.infosets) == len(value):             # <<<<<<<<<<<<<<
 *             for infoset, val in zip(index.infosets, value):
 *                 self._setinfoset(infoset, val)
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":93
 *                 self._setinfoset(infoset, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
  /*else*/ {

    /* "gambit/lib/behav.pxi":94
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %
 *                              (len(index.actions), len(value)))             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, index):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_actions); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 94, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_3 = PyObject_Length(__pyx_v_value); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 94, __pyx_L1_error)
    __pyx_t_1 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 94, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_1);
    __pyx_t_5 = 0;
    __pyx_t_1 = 0;

    /* "gambit/lib/behav.pxi":93
 *                 self._setinfoset(infoset, val)
 *         else:
 *             raise ValueError("value list length must be %s, not %s" %             # <<<<<<<<<<<<<<
 *                              (len(index.actions), len(value)))
 * 
 */
    __pyx_t_1 = __Pyx_PyString_Format(__pyx_kp_s_value_list_length_must_be_s_not, __pyx_t_8); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_8, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 93, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __PYX_ERR(3, 93, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/behav.pxi":88
 *                              (len(index.actions), len(value)))
 * 
 *     def _setplayer(self, index, value):             # <<<<<<<<<<<<<<
 *         if len(index.infosets) == len(value):
 *             for infoset, val in zip(index.infosets, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile._setplayer", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset);
  __Pyx_XDECREF(__pyx_v_val);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":96
 *                              (len(index.actions), len(value)))
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_12__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":103
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__ = {"__init__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_profile = 0;
  PyObject *__pyx_v_infoset = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_profile,&__pyx_n_s_infoset,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(3, 103, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_infoset)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(3, 103, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(3, 103, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_profile = values[1];
    __pyx_v_infoset = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 103, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset___init__(__pyx_self, __pyx_v_self, __pyx_v_profile, __pyx_v_infoset);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/behav.pxi":104
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile             # <<<<<<<<<<<<<<
 *                     self.infoset = infoset
 *                 def __eq__(self, other):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_profile, __pyx_v_profile) < 0) __PYX_ERR(3, 104, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":105
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile
 *                     self.infoset = infoset             # <<<<<<<<<<<<<<
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_infoset, __pyx_v_infoset) < 0) __PYX_ERR(3, 105, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":103
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":106
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__ = {"__eq__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_other,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, 1); __PYX_ERR(3, 106, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__eq__") < 0)) __PYX_ERR(3, 106, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 106, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_2__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "gambit/lib/behav.pxi":107
 *                     self.infoset = infoset
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)             # <<<<<<<<<<<<<<
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 107, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 107, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":106
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":108
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__ = {"__len__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_4__len__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/behav.pxi":109
 *                     return list(self) == list(other)
 *                 def __len__(self):
 *                     return len(self.infoset.actions)             # <<<<<<<<<<<<<<
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_actions); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":108
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":110
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__ = {"__repr__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_6__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/behav.pxi":111
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))             # <<<<<<<<<<<<<<
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":110
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":112
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_8_repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gambit/lib/behav.pxi":114
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_MixedBehavInf); if (unlikely(!gen)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset._repr_latex_.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__2generator1(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 114, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 114, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_actions); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 114, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 114, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 114, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 114, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 114, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__64, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 114, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":112
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "gambit/lib/behav.pxi":113
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 *                     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 113, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "gambit/lib/behav.pxi":114
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12_repr_latex__genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__18, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 114, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":113
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 *                     else:
 */
  }

  /* "gambit/lib/behav.pxi":116
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 *                     else:
 *                        return repr(self)             # <<<<<<<<<<<<<<
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_self;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/behav.pxi":112
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":117
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__ = {"__getitem__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(3, 117, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(3, 117, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 117, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_10__getitem__(__pyx_self, __pyx_v_self, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/behav.pxi":118
 *                        return repr(self)
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]             # <<<<<<<<<<<<<<
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.infoset.actions[index]] = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_actions); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":117
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":119
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__ = {"__setitem__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(3, 119, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(3, 119, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(3, 119, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 119, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12__setitem__(__pyx_self, __pyx_v_self, __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "gambit/lib/behav.pxi":120
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.infoset.actions[index]] = value             # <<<<<<<<<<<<<<
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_infoset); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_actions); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_2, __pyx_v_value) < 0)) __PYX_ERR(3, 120, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/behav.pxi":119
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehavInfoset.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":124
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__ = {"__init__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_profile = 0;
  PyObject *__pyx_v_player = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_profile,&__pyx_n_s_player,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_profile)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); __PYX_ERR(3, 124, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_player)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); __PYX_ERR(3, 124, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(3, 124, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_profile = values[1];
    __pyx_v_player = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 124, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav___init__(__pyx_self, __pyx_v_self, __pyx_v_profile, __pyx_v_player);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_profile, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/behav.pxi":125
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):
 *                     self.profile = profile             # <<<<<<<<<<<<<<
 *                     self.player = player
 *                 def __eq__(self, other):
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_profile, __pyx_v_profile) < 0) __PYX_ERR(3, 125, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":126
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 *                     self.player = player             # <<<<<<<<<<<<<<
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_player, __pyx_v_player) < 0) __PYX_ERR(3, 126, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":124
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":127
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__ = {"__eq__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_other = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__eq__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_other,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_other)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, 1); __PYX_ERR(3, 127, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__eq__") < 0)) __PYX_ERR(3, 127, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_other = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__eq__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 127, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_2__eq__(__pyx_self, __pyx_v_self, __pyx_v_other);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_2__eq__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_other) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__eq__", 0);

  /* "gambit/lib/behav.pxi":128
 *                     self.player = player
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)             # <<<<<<<<<<<<<<
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PySequence_List(__pyx_v_self); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_v_other); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 128, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":127
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__eq__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":129
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__ = {"__len__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_4__len__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_4__len__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/behav.pxi":130
 *                     return list(self) == list(other)
 *                 def __len__(self):
 *                     return len(self.player.infosets)             # <<<<<<<<<<<<<<
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_infosets); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 130, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":129
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":131
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__ = {"__repr__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_6__repr__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_6__repr__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/behav.pxi":132
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))             # <<<<<<<<<<<<<<
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PySequence_List(__pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":131
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":133
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_ = {"_repr_latex_", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_, METH_O, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_repr_latex_ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_8_repr_latex_(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gambit/lib/behav.pxi":135
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_getitem___locals_MixedBehav__r); if (unlikely(!gen)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav._repr_latex_.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__2generator2(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 135, __pyx_L1_error)
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 135, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_infosets); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_1 = __pyx_t_2; __Pyx_INCREF(__pyx_t_1); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 135, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 135, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(3, 135, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_1, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 135, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_1);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(3, 135, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_i);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_i, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self)) { __Pyx_RaiseClosureNameError("self"); __PYX_ERR(3, 135, __pyx_L1_error) }
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyObject_GetItem(__pyx_t_5, __pyx_cur_scope->__pyx_v_i); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_repr_latex); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_5);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_5, function);
      }
    }
    if (__pyx_t_6) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 135, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    } else {
      __pyx_t_2 = __Pyx_PyObject_CallNoArg(__pyx_t_5); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 135, __pyx_L1_error)
    }
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_replace); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__65, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    __Pyx_XGIVEREF(__pyx_t_1);
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_1;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __pyx_cur_scope->__pyx_t_2 = __pyx_t_4;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_1 = __pyx_cur_scope->__pyx_t_0;
    __pyx_cur_scope->__pyx_t_0 = 0;
    __Pyx_XGOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    __pyx_t_4 = __pyx_cur_scope->__pyx_t_2;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(3, 135, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":133
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_8_repr_latex_(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("_repr_latex_", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_self = __pyx_v_self;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_self);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_self);

  /* "gambit/lib/behav.pxi":134
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 *                     else:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 134, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_1, __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational); 
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "gambit/lib/behav.pxi":135
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12_repr_latex__genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyString_Join(__pyx_kp_s__18, __pyx_t_1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyNumber_Add(__pyx_kp_s_left, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_right); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 135, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":134
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):             # <<<<<<<<<<<<<<
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 *                     else:
 */
  }

  /* "gambit/lib/behav.pxi":137
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 *                     else:
 *                        return repr(self)             # <<<<<<<<<<<<<<
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 */
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __pyx_cur_scope->__pyx_v_self;
    __Pyx_INCREF(__pyx_t_4);
    __pyx_t_1 = PyObject_Repr(__pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/behav.pxi":133
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav._repr_latex_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":138
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__ = {"__getitem__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, 1); __PYX_ERR(3, 138, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__getitem__") < 0)) __PYX_ERR(3, 138, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__getitem__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 138, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_10__getitem__(__pyx_self, __pyx_v_self, __pyx_v_index);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_10__getitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/behav.pxi":139
 *                        return repr(self)
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]             # <<<<<<<<<<<<<<
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.infosets[index]] = value
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_infosets); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyObject_GetItem(__pyx_t_1, __pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":138
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":140
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__ = {"__setitem__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 1); __PYX_ERR(3, 140, __pyx_L3_error)
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, 2); __PYX_ERR(3, 140, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__setitem__") < 0)) __PYX_ERR(3, 140, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_index = values[1];
    __pyx_v_value = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__setitem__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 140, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12__setitem__(__pyx_self, __pyx_v_self, __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_12__setitem__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "gambit/lib/behav.pxi":141
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.infosets[index]] = value             # <<<<<<<<<<<<<<
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_player); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_infosets); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyObject_GetItem(__pyx_t_3, __pyx_v_index); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (unlikely(PyObject_SetItem(__pyx_t_1, __pyx_t_2, __pyx_v_value) < 0)) __PYX_ERR(3, 141, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/behav.pxi":140
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__.MixedBehav.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":96
 *                              (len(index.actions), len(value)))
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_12__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_v_MixedBehavInfoset = NULL;
  PyObject *__pyx_v_MixedBehav = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/behav.pxi":97
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":98
 *     def __getitem__(self, index):
 *         if isinstance(index, int):
 *             return self._getprob(index+1)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Action):
 *             return self._getaction(index)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 98, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 98, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":97
 * 
 *     def __getitem__(self, index):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):
 */
  }

  /* "gambit/lib/behav.pxi":99
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":100
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):
 *             return self._getaction(index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_getaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_7 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_7 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_7)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_7);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_7) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_7); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_7); __pyx_t_7 = NULL;
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_index);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 100, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":99
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 */
  }

  /* "gambit/lib/behav.pxi":101
 *         elif isinstance(index, Action):
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":102
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile
 */
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(__pyx_builtin_object);
    __Pyx_GIVEREF(__pyx_builtin_object);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_builtin_object);
    __pyx_t_4 = __Pyx_CalculateMetaclass(NULL, __pyx_t_3); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_4, __pyx_t_3, __pyx_n_s_MixedBehavInfoset, __pyx_n_s_getitem___locals_MixedBehavInf_2, (PyObject *) NULL, __pyx_n_s_gambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "gambit/lib/behav.pxi":103
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_1__init__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_3, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__67)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init, __pyx_t_7) < 0) __PYX_ERR(3, 103, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":106
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_3__eq__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_4, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__69)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_eq, __pyx_t_7) < 0) __PYX_ERR(3, 106, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":108
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_5__len__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_5, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__71)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 108, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_len, __pyx_t_7) < 0) __PYX_ERR(3, 108, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":110
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_7__repr__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_6, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__73)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 110, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_repr, __pyx_t_7) < 0) __PYX_ERR(3, 110, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":112
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_9_repr_latex_, 0, __pyx_n_s_getitem___locals_MixedBehavInf_7, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__75)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_repr_latex, __pyx_t_7) < 0) __PYX_ERR(3, 112, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":117
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_11__getitem__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_8, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__77)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 117, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_getitem, __pyx_t_7) < 0) __PYX_ERR(3, 117, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":119
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___17MixedBehavInfoset_13__setitem__, 0, __pyx_n_s_getitem___locals_MixedBehavInf_9, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__79)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_setitem, __pyx_t_7) < 0) __PYX_ERR(3, 119, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":102
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, infoset):
 *                     self.profile = profile
 */
    __pyx_t_7 = __Pyx_Py3ClassCreate(__pyx_t_4, __pyx_n_s_MixedBehavInfoset, __pyx_t_3, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_MixedBehavInfoset = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/behav.pxi":121
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_v_index);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_v_MixedBehavInfoset, __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 121, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":101
 *         elif isinstance(index, Action):
 *             return self._getaction(index)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):
 */
  }

  /* "gambit/lib/behav.pxi":122
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":123
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_builtin_object);
    __Pyx_GIVEREF(__pyx_builtin_object);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_builtin_object);
    __pyx_t_3 = __Pyx_CalculateMetaclass(NULL, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = __Pyx_Py3MetaclassPrepare(__pyx_t_3, __pyx_t_4, __pyx_n_s_MixedBehav, __pyx_n_s_getitem___locals_MixedBehav, (PyObject *) NULL, __pyx_n_s_gambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);

    /* "gambit/lib/behav.pxi":124
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_1__init__, 0, __pyx_n_s_getitem___locals_MixedBehav_2, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__81)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 124, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_init, __pyx_t_7) < 0) __PYX_ERR(3, 124, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":127
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_3__eq__, 0, __pyx_n_s_getitem___locals_MixedBehav_3, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__83)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 127, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_eq, __pyx_t_7) < 0) __PYX_ERR(3, 127, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":129
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_5__len__, 0, __pyx_n_s_getitem___locals_MixedBehav_4, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__85)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_len, __pyx_t_7) < 0) __PYX_ERR(3, 129, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":131
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_7__repr__, 0, __pyx_n_s_getitem___locals_MixedBehav_5, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__87)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 131, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_repr, __pyx_t_7) < 0) __PYX_ERR(3, 131, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":133
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_9_repr_latex_, 0, __pyx_n_s_getitem___locals_MixedBehav__r_2, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__89)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 133, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_repr_latex, __pyx_t_7) < 0) __PYX_ERR(3, 133, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":138
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_11__getitem__, 0, __pyx_n_s_getitem___locals_MixedBehav_6, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__91)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_getitem, __pyx_t_7) < 0) __PYX_ERR(3, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":140
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */
    __pyx_t_7 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11__getitem___10MixedBehav_13__setitem__, 0, __pyx_n_s_getitem___locals_MixedBehav_7, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__93)); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (PyObject_SetItem(__pyx_t_5, __pyx_n_s_setitem, __pyx_t_7) < 0) __PYX_ERR(3, 140, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "gambit/lib/behav.pxi":123
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):             # <<<<<<<<<<<<<<
 *                 def __init__(self, profile, player):
 *                     self.profile = profile
 */
    __pyx_t_7 = __Pyx_Py3ClassCreate(__pyx_t_3, __pyx_n_s_MixedBehav, __pyx_t_4, __pyx_t_5, NULL, 0, 1); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 123, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_v_MixedBehav = __pyx_t_7;
    __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "gambit/lib/behav.pxi":142
 *                 def __setitem__(self, index, value):
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_v_index);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_MixedBehav, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 142, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":122
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):
 */
  }

  /* "gambit/lib/behav.pxi":143
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  __pyx_t_1 = PyString_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":144
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):
 *             return self[self._resolve_index(index, players=True)]             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_index);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_True) < 0) __PYX_ERR(3, 144, __pyx_L1_error)
    __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyObject_GetItem(((PyObject *)__pyx_v_self), __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 144, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":143
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 */
  }

  /* "gambit/lib/behav.pxi":146
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "gambit/lib/behav.pxi":147
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def __setitem__(self, index, value):
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/behav.pxi":146
 *             return self[self._resolve_index(index, players=True)]
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_profile_indexes_must_be_int_str_2, __pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __pyx_t_7 = PyTuple_New(1); if (unlikely(!__pyx_t_7)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_7, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 146, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 146, __pyx_L1_error)
  }

  /* "gambit/lib/behav.pxi":96
 *                              (len(index.actions), len(value)))
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             return self._getprob(index+1)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_MixedBehavInfoset);
  __Pyx_XDECREF(__pyx_v_MixedBehav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":149
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_15__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_15__setitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__setitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14__setitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_index), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_14__setitem__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_index, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__setitem__", 0);

  /* "gambit/lib/behav.pxi":150
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":151
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setprob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_index, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_6) {
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_6); __pyx_t_6 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_5 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 151, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/behav.pxi":150
 * 
 *     def __setitem__(self, index, value):
 *         if isinstance(index, int):             # <<<<<<<<<<<<<<
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":152
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":153
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setaction); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_index);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 153, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/behav.pxi":152
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 *         elif isinstance(index, Action):             # <<<<<<<<<<<<<<
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":154
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":155
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setinfoset); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_8 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_8, 0+__pyx_t_7, __pyx_v_index);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_8, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/behav.pxi":154
 *         elif isinstance(index, Action):
 *             self._setaction(index, value)
 *         elif isinstance(index, Infoset):             # <<<<<<<<<<<<<<
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":156
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_index, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":157
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)             # <<<<<<<<<<<<<<
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_setplayer); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = NULL;
    __pyx_t_7 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_8 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_8)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_8);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_7 = 1;
      }
    }
    __pyx_t_5 = PyTuple_New(2+__pyx_t_7); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (__pyx_t_8) {
      __Pyx_GIVEREF(__pyx_t_8); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8); __pyx_t_8 = NULL;
    }
    __Pyx_INCREF(__pyx_v_index);
    __Pyx_GIVEREF(__pyx_v_index);
    PyTuple_SET_ITEM(__pyx_t_5, 0+__pyx_t_7, __pyx_v_index);
    __Pyx_INCREF(__pyx_v_value);
    __Pyx_GIVEREF(__pyx_v_value);
    PyTuple_SET_ITEM(__pyx_t_5, 1+__pyx_t_7, __pyx_v_value);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 157, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/behav.pxi":156
 *         elif isinstance(index, Infoset):
 *             self._setinfoset(index,value)
 *         elif isinstance(index, Player):             # <<<<<<<<<<<<<<
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":158
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
  __pyx_t_1 = PyString_Check(__pyx_v_index); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":159
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):
 *             self[self._resolve_index(index)] = value             # <<<<<<<<<<<<<<
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 159, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_8 = PyTuple_New(1+1); if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_index);
      __Pyx_GIVEREF(__pyx_v_index);
      PyTuple_SET_ITEM(__pyx_t_8, 0+1, __pyx_v_index);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_8, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 159, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (unlikely(PyObject_SetItem(((PyObject *)__pyx_v_self), __pyx_t_3, __pyx_v_value) < 0)) __PYX_ERR(3, 159, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/behav.pxi":158
 *         elif isinstance(index, Player):
 *             self._setplayer(index, value)
 *         elif isinstance(index, str):             # <<<<<<<<<<<<<<
 *             self[self._resolve_index(index)] = value
 *         else:
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":161
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
  /*else*/ {

    /* "gambit/lib/behav.pxi":162
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %
 *                             index.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def is_defined_at(self, infoset):
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_index, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 162, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "gambit/lib/behav.pxi":161
 *             self[self._resolve_index(index)] = value
 *         else:
 *             raise TypeError("profile indexes must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             index.__class__.__name__)
 * 
 */
    __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_profile_indexes_must_be_int_str_2, __pyx_t_4); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 161, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_Raise(__pyx_t_3, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __PYX_ERR(3, 161, __pyx_L1_error)
  }
  __pyx_L3:;

  /* "gambit/lib/behav.pxi":149
 *                             index.__class__.__name__)
 * 
 *     def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *         if isinstance(index, int):
 *             self._setprob(index+1, value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.__setitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":164
 *                             index.__class__.__name__)
 * 
 *     def is_defined_at(self, infoset):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_17is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_17is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("is_defined_at (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_16is_defined_at(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_infoset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_16is_defined_at(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("is_defined_at", 0);
  __Pyx_INCREF(__pyx_v_infoset);

  /* "gambit/lib/behav.pxi":165
 * 
 *     def is_defined_at(self, infoset):
 *         if isinstance(infoset, str):             # <<<<<<<<<<<<<<
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":166
 *     def is_defined_at(self, infoset):
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)             # <<<<<<<<<<<<<<
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_infoset);
    __Pyx_GIVEREF(__pyx_v_infoset);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_infoset);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 166, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 166, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_infoset, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "gambit/lib/behav.pxi":167
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/behav.pxi":168
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)             # <<<<<<<<<<<<<<
 *         elif not isinstance(infoset, Infoset):
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_no_infoset_matching_label_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 168, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(3, 168, __pyx_L1_error)

      /* "gambit/lib/behav.pxi":167
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):
 */
    }

    /* "gambit/lib/behav.pxi":165
 * 
 *     def is_defined_at(self, infoset):
 *         if isinstance(infoset, str):             # <<<<<<<<<<<<<<
 *             infoset = self._resolve_index(infoset, players=False)
 *             if not isinstance(infoset, Infoset):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":169
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":171
 *         elif not isinstance(infoset, Infoset):
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._is_defined_at(infoset)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 171, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/behav.pxi":170
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %             # <<<<<<<<<<<<<<
 *                             infoset.__class__.__name__)
 *         return self._is_defined_at(infoset)
 */
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_profile_infoset_index_must_be_st, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 170, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 170, __pyx_L1_error)

    /* "gambit/lib/behav.pxi":169
 *             if not isinstance(infoset, Infoset):
 *                 raise IndexError("no infoset matching label '%s'" % infoset.label)
 *         elif not isinstance(infoset, Infoset):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "gambit/lib/behav.pxi":172
 *             raise TypeError("profile infoset index must be str or Infoset, not %s" %
 *                             infoset.__class__.__name__)
 *         return self._is_defined_at(infoset)             # <<<<<<<<<<<<<<
 * 
 *     def belief(self, node):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_defined_at); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 172, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_infoset); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_infoset);
    __Pyx_GIVEREF(__pyx_v_infoset);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_infoset);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 172, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":164
 *                             index.__class__.__name__)
 * 
 *     def is_defined_at(self, infoset):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset, str):
 *             infoset = self._resolve_index(infoset, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.is_defined_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":174
 *         return self._is_defined_at(infoset)
 * 
 *     def belief(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self._belief(node)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_19belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_19belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("belief (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_18belief(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_node));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_18belief(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  Py_ssize_t __pyx_t_7;
  PyObject *(*__pyx_t_8)(PyObject *);
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("belief", 0);

  /* "gambit/lib/behav.pxi":175
 * 
 *     def belief(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_6gambit_3lib_9libgambit_Node); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":176
 *     def belief(self, node):
 *         if isinstance(node, Node):
 *             return self._belief(node)             # <<<<<<<<<<<<<<
 *         elif isinstance(node, Infoset):
 *             return [self._belief(n) for n in node.members]
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_belief); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 176, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_node); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_node);
      __Pyx_GIVEREF(__pyx_v_node);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_node);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 176, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":175
 * 
 *     def belief(self, node):
 *         if isinstance(node, Node):             # <<<<<<<<<<<<<<
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):
 */
  }

  /* "gambit/lib/behav.pxi":177
 *         if isinstance(node, Node):
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):             # <<<<<<<<<<<<<<
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_node, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":178
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):
 *             return [self._belief(n) for n in node.members]             # <<<<<<<<<<<<<<
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 *                         node.__class__.__name__)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_members); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    if (likely(PyList_CheckExact(__pyx_t_4)) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_6 = __pyx_t_4; __Pyx_INCREF(__pyx_t_6); __pyx_t_7 = 0;
      __pyx_t_8 = NULL;
    } else {
      __pyx_t_7 = -1; __pyx_t_6 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = Py_TYPE(__pyx_t_6)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(3, 178, __pyx_L1_error)
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (likely(!__pyx_t_8)) {
        if (likely(PyList_CheckExact(__pyx_t_6))) {
          if (__pyx_t_7 >= PyList_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyList_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(3, 178, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        } else {
          if (__pyx_t_7 >= PyTuple_GET_SIZE(__pyx_t_6)) break;
          #if CYTHON_COMPILING_IN_CPYTHON
          __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_6, __pyx_t_7); __Pyx_INCREF(__pyx_t_4); __pyx_t_7++; if (unlikely(0 < 0)) __PYX_ERR(3, 178, __pyx_L1_error)
          #else
          __pyx_t_4 = PySequence_ITEM(__pyx_t_6, __pyx_t_7); __pyx_t_7++; if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)
          __Pyx_GOTREF(__pyx_t_4);
          #endif
        }
      } else {
        __pyx_t_4 = __pyx_t_8(__pyx_t_6);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else __PYX_ERR(3, 178, __pyx_L1_error)
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_n, __pyx_t_4);
      __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_belief); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 178, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_9 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_9)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_9);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_9) {
        __pyx_t_4 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_n); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
      } else {
        __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 178, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
        __Pyx_INCREF(__pyx_v_n);
        __Pyx_GIVEREF(__pyx_v_n);
        PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_v_n);
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_10, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 178, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (unlikely(__Pyx_ListComp_Append(__pyx_t_3, (PyObject*)__pyx_t_4))) __PYX_ERR(3, 178, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    }
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":177
 *         if isinstance(node, Node):
 *             return self._belief(node)
 *         elif isinstance(node, Infoset):             # <<<<<<<<<<<<<<
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 */
  }

  /* "gambit/lib/behav.pxi":180
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %
 *                         node.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def action_prob(self, action):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_node, __pyx_n_s_class); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 180, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/behav.pxi":179
 *         elif isinstance(node, Infoset):
 *             return [self._belief(n) for n in node.members]
 *         raise TypeError("profile belief index must be Node or Infoset, not %s" %             # <<<<<<<<<<<<<<
 *                         node.__class__.__name__)
 * 
 */
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_profile_belief_index_must_be_Nod, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __Pyx_Raise(__pyx_t_3, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __PYX_ERR(3, 179, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":174
 *         return self._is_defined_at(infoset)
 * 
 *     def belief(self, node):             # <<<<<<<<<<<<<<
 *         if isinstance(node, Node):
 *             return self._belief(node)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.belief", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":182
 *                         node.__class__.__name__)
 * 
 *     def action_prob(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_21action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_21action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("action_prob (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_20action_prob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_20action_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("action_prob", 0);
  __Pyx_INCREF(__pyx_v_action);

  /* "gambit/lib/behav.pxi":183
 * 
 *     def action_prob(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":184
 *     def action_prob(self, action):
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)             # <<<<<<<<<<<<<<
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_action);
    __Pyx_GIVEREF(__pyx_v_action);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_action);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 184, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 184, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_action, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "gambit/lib/behav.pxi":185
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/behav.pxi":186
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)             # <<<<<<<<<<<<<<
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_no_action_matching_label_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(3, 186, __pyx_L1_error)

      /* "gambit/lib/behav.pxi":185
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    }

    /* "gambit/lib/behav.pxi":183
 * 
 *     def action_prob(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":187
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":189
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._action_prob(action)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 189, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/behav.pxi":188
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile action probability index must be str or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             action.__class__.__name__)
 *         return self._action_prob(action)
 */
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_profile_action_probability_index, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 188, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 188, __pyx_L1_error)

    /* "gambit/lib/behav.pxi":187
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "gambit/lib/behav.pxi":190
 *             raise TypeError("profile action probability index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 *         return self._action_prob(action)             # <<<<<<<<<<<<<<
 * 
 *     def payoff(self, player_infoset_or_action):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_prob); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 190, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_action); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_action);
    __Pyx_GIVEREF(__pyx_v_action);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_action);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":182
 *                         node.__class__.__name__)
 * 
 *     def action_prob(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.action_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":192
 *         return self._action_prob(action)
 * 
 *     def payoff(self, player_infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_23payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_23payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("payoff (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_22payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_player_infoset_or_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_22payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_player_infoset_or_action) {
  PyObject *__pyx_v_infoset_or_action = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  int __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  __Pyx_RefNannySetupContext("payoff", 0);

  /* "gambit/lib/behav.pxi":193
 * 
 *     def payoff(self, player_infoset_or_action):
 *         if isinstance(player_infoset_or_action, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Player); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":194
 *     def payoff(self, player_infoset_or_action):
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player_infoset_or_action); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_player_infoset_or_action);
      __Pyx_GIVEREF(__pyx_v_player_infoset_or_action);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_player_infoset_or_action);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 194, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":193
 * 
 *     def payoff(self, player_infoset_or_action):
 *         if isinstance(player_infoset_or_action, Player):             # <<<<<<<<<<<<<<
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):
 */
  }

  /* "gambit/lib/behav.pxi":195
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_player_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":196
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 196, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player_infoset_or_action); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_player_infoset_or_action);
      __Pyx_GIVEREF(__pyx_v_player_infoset_or_action);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_player_infoset_or_action);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 196, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":195
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):
 */
  }

  /* "gambit/lib/behav.pxi":197
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_player_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":198
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(player_infoset_or_action, str):
 *             try:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_payoff); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 198, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_player_infoset_or_action); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_player_infoset_or_action);
      __Pyx_GIVEREF(__pyx_v_player_infoset_or_action);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_player_infoset_or_action);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 198, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":197
 *         elif isinstance(player_infoset_or_action, Infoset):
 *             return self._infoset_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 */
  }

  /* "gambit/lib/behav.pxi":199
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 */
  __pyx_t_2 = PyString_Check(__pyx_v_player_infoset_or_action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":200
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 */
    {
      __Pyx_PyThreadState_declare
      __Pyx_PyThreadState_assign
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "gambit/lib/behav.pxi":201
 *         elif isinstance(player_infoset_or_action, str):
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])             # <<<<<<<<<<<<<<
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_payoff_2); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 201, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_game); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 201, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 201, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = PyObject_GetItem(__pyx_t_5, __pyx_v_player_infoset_or_action); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 201, __pyx_L4_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = NULL;
        if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
          __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
          if (likely(__pyx_t_5)) {
            PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
            __Pyx_INCREF(__pyx_t_5);
            __Pyx_INCREF(function);
            __Pyx_DECREF_SET(__pyx_t_4, function);
          }
        }
        if (!__pyx_t_5) {
          __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_t_6); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 201, __pyx_L4_error)
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_GOTREF(__pyx_t_3);
        } else {
          __pyx_t_10 = PyTuple_New(1+1); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 201, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5); __pyx_t_5 = NULL;
          __Pyx_GIVEREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_10, 0+1, __pyx_t_6);
          __pyx_t_6 = 0;
          __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 201, __pyx_L4_error)
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        }
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_r = __pyx_t_3;
        __pyx_t_3 = 0;
        goto __pyx_L8_try_return;

        /* "gambit/lib/behav.pxi":200
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 */
      }
      __pyx_L4_error:;
      __Pyx_PyThreadState_assign
      __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

      /* "gambit/lib/behav.pxi":202
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:             # <<<<<<<<<<<<<<
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):
 */
      __pyx_t_11 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IndexError);
      if (__pyx_t_11) {
        __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_4, &__pyx_t_10) < 0) __PYX_ERR(3, 202, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GOTREF(__pyx_t_10);

        /* "gambit/lib/behav.pxi":203
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)             # <<<<<<<<<<<<<<
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)
 */
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 203, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 203, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_INCREF(__pyx_v_player_infoset_or_action);
        __Pyx_GIVEREF(__pyx_v_player_infoset_or_action);
        PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_player_infoset_or_action);
        __pyx_t_12 = PyDict_New(); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 203, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        if (PyDict_SetItem(__pyx_t_12, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 203, __pyx_L6_except_error)
        __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_5, __pyx_t_12); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 203, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __pyx_v_infoset_or_action = __pyx_t_13;
        __pyx_t_13 = 0;

        /* "gambit/lib/behav.pxi":204
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):
 */
        __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
        __pyx_t_2 = (__pyx_t_1 != 0);
        if (__pyx_t_2) {

          /* "gambit/lib/behav.pxi":205
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)             # <<<<<<<<<<<<<<
 *                 elif isinstance(infoset_or_action, Action):
 *                     return self._action_payoff(infoset_or_action)
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_payoff); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 205, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          if (!__pyx_t_5) {
            __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_infoset_or_action); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 205, __pyx_L6_except_error)
            __Pyx_GOTREF(__pyx_t_13);
          } else {
            __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 205, __pyx_L6_except_error)
            __Pyx_GOTREF(__pyx_t_6);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_INCREF(__pyx_v_infoset_or_action);
            __Pyx_GIVEREF(__pyx_v_infoset_or_action);
            PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_infoset_or_action);
            __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_6, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 205, __pyx_L6_except_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_r = __pyx_t_13;
          __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L7_except_return;

          /* "gambit/lib/behav.pxi":204
 *             except IndexError:
 *                 infoset_or_action = self._resolve_index(player_infoset_or_action, players=False)
 *                 if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):
 */
        }

        /* "gambit/lib/behav.pxi":206
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 */
        __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
        __pyx_t_1 = (__pyx_t_2 != 0);
        if (__pyx_t_1) {

          /* "gambit/lib/behav.pxi":207
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):
 *                     return self._action_payoff(infoset_or_action)             # <<<<<<<<<<<<<<
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %
 */
          __Pyx_XDECREF(__pyx_r);
          __pyx_t_12 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_payoff); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 207, __pyx_L6_except_error)
          __Pyx_GOTREF(__pyx_t_12);
          __pyx_t_6 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_12))) {
            __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_12);
            if (likely(__pyx_t_6)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_12);
              __Pyx_INCREF(__pyx_t_6);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_12, function);
            }
          }
          if (!__pyx_t_6) {
            __pyx_t_13 = __Pyx_PyObject_CallOneArg(__pyx_t_12, __pyx_v_infoset_or_action); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 207, __pyx_L6_except_error)
            __Pyx_GOTREF(__pyx_t_13);
          } else {
            __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 207, __pyx_L6_except_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
            __Pyx_INCREF(__pyx_v_infoset_or_action);
            __Pyx_GIVEREF(__pyx_v_infoset_or_action);
            PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_infoset_or_action);
            __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_12, __pyx_t_5, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 207, __pyx_L6_except_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __pyx_r = __pyx_t_13;
          __pyx_t_13 = 0;
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          goto __pyx_L7_except_return;

          /* "gambit/lib/behav.pxi":206
 *                 if isinstance(infoset_or_action, Infoset):
 *                     return self._infoset_payoff(infoset_or_action)
 *                 elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 */
        }

        /* "gambit/lib/behav.pxi":208
 *                 elif isinstance(infoset_or_action, Action):
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)             # <<<<<<<<<<<<<<
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %
 *                         player_infoset_or_action.__class__.__name__)
 */
        __pyx_t_13 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset_or_action, __pyx_n_s_label); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 208, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __pyx_t_12 = __Pyx_PyString_Format(__pyx_kp_s_no_matching_label_s, __pyx_t_13); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 208, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) __PYX_ERR(3, 208, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_GIVEREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_12);
        __pyx_t_12 = 0;
        __pyx_t_12 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_13, NULL); if (unlikely(!__pyx_t_12)) __PYX_ERR(3, 208, __pyx_L6_except_error)
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_t_12, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __PYX_ERR(3, 208, __pyx_L6_except_error)
      }
      goto __pyx_L6_except_error;
      __pyx_L6_except_error:;

      /* "gambit/lib/behav.pxi":200
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):
 *             try:             # <<<<<<<<<<<<<<
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 *             except IndexError:
 */
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L8_try_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
      __pyx_L7_except_return:;
      __Pyx_PyThreadState_assign
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L0;
    }

    /* "gambit/lib/behav.pxi":199
 *         elif isinstance(player_infoset_or_action, Action):
 *             return self._action_payoff(player_infoset_or_action)
 *         elif isinstance(player_infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             try:
 *                 return self.payoff(self.game.players[player_infoset_or_action])
 */
  }

  /* "gambit/lib/behav.pxi":210
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %
 *                         player_infoset_or_action.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def realiz_prob(self, infoset_or_action):
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_player_infoset_or_action, __pyx_n_s_class); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_10, __pyx_n_s_name); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "gambit/lib/behav.pxi":209
 *                     return self._action_payoff(infoset_or_action)
 *                 raise IndexError("no matching label '%s'" % infoset_or_action.label)
 *         raise TypeError("profile payoffs index must be int, str, Player, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                         player_infoset_or_action.__class__.__name__)
 * 
 */
  __pyx_t_10 = __Pyx_PyString_Format(__pyx_kp_s_profile_payoffs_index_must_be_in_2, __pyx_t_4); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_10)) __PYX_ERR(3, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_Raise(__pyx_t_10, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __PYX_ERR(3, 209, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":192
 *         return self._action_prob(action)
 * 
 *     def payoff(self, player_infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(player_infoset_or_action, Player):
 *             return self._payoff(player_infoset_or_action)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset_or_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":212
 *                         player_infoset_or_action.__class__.__name__)
 * 
 *     def realiz_prob(self, infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_25realiz_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset_or_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_25realiz_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset_or_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("realiz_prob (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_24realiz_prob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_infoset_or_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_24realiz_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_infoset_or_action) {
  CYTHON_UNUSED PyObject *__pyx_v_infoset = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("realiz_prob", 0);
  __Pyx_INCREF(__pyx_v_infoset_or_action);

  /* "gambit/lib/behav.pxi":213
 * 
 *     def realiz_prob(self, infoset_or_action):
 *         if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":214
 *     def realiz_prob(self, infoset_or_action):
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_prob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 214, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_5) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_infoset_or_action); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
      __Pyx_INCREF(__pyx_v_infoset_or_action);
      __Pyx_GIVEREF(__pyx_v_infoset_or_action);
      PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_infoset_or_action);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 214, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":213
 * 
 *     def realiz_prob(self, infoset_or_action):
 *         if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):
 */
  }

  /* "gambit/lib/behav.pxi":215
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):
 */
  __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/behav.pxi":216
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_prob); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 216, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_6 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_6)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_6);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
      }
    }
    if (!__pyx_t_6) {
      __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_infoset_or_action); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_6); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6); __pyx_t_6 = NULL;
      __Pyx_INCREF(__pyx_v_infoset_or_action);
      __Pyx_GIVEREF(__pyx_v_infoset_or_action);
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_v_infoset_or_action);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 216, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/behav.pxi":215
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):
 */
  }

  /* "gambit/lib/behav.pxi":217
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_infoset_or_action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":218
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)             # <<<<<<<<<<<<<<
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_infoset_or_action);
    __Pyx_GIVEREF(__pyx_v_infoset_or_action);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_infoset_or_action);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 218, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 218, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_6);
    __Pyx_DECREF_SET(__pyx_v_infoset_or_action, __pyx_t_6);
    __Pyx_INCREF(__pyx_t_6);
    __pyx_v_infoset = __pyx_t_6;
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "gambit/lib/behav.pxi":219
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Infoset); 
    __pyx_t_1 = (__pyx_t_2 != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/behav.pxi":220
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *             elif isinstance(infoset_or_action, Action):
 *                 return self._action_prob(infoset_or_action)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_infoset_prob); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 220, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_4)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_4);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_4) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_infoset_or_action); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
        __Pyx_INCREF(__pyx_v_infoset_or_action);
        __Pyx_GIVEREF(__pyx_v_infoset_or_action);
        PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_infoset_or_action);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_3, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 220, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "gambit/lib/behav.pxi":219
 *         elif isinstance(infoset_or_action, str):
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):             # <<<<<<<<<<<<<<
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):
 */
    }

    /* "gambit/lib/behav.pxi":221
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 */
    __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_infoset_or_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
    __pyx_t_2 = (__pyx_t_1 != 0);
    if (__pyx_t_2) {

      /* "gambit/lib/behav.pxi":222
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):
 *                 return self._action_prob(infoset_or_action)             # <<<<<<<<<<<<<<
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 *                         infoset_or_action.__class__.__name__)
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_action_prob); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 222, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_3 = NULL;
      if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_5))) {
        __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_5);
        if (likely(__pyx_t_3)) {
          PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_5);
          __Pyx_INCREF(__pyx_t_3);
          __Pyx_INCREF(function);
          __Pyx_DECREF_SET(__pyx_t_5, function);
        }
      }
      if (!__pyx_t_3) {
        __pyx_t_6 = __Pyx_PyObject_CallOneArg(__pyx_t_5, __pyx_v_infoset_or_action); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
      } else {
        __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
        __Pyx_INCREF(__pyx_v_infoset_or_action);
        __Pyx_GIVEREF(__pyx_v_infoset_or_action);
        PyTuple_SET_ITEM(__pyx_t_4, 0+1, __pyx_v_infoset_or_action);
        __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 222, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      }
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      __pyx_t_6 = 0;
      goto __pyx_L0;

      /* "gambit/lib/behav.pxi":221
 *             if isinstance(infoset_or_action, Infoset):
 *                 return self._infoset_prob(infoset_or_action)
 *             elif isinstance(infoset_or_action, Action):             # <<<<<<<<<<<<<<
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 */
    }

    /* "gambit/lib/behav.pxi":217
 *         elif isinstance(infoset_or_action, Action):
 *             return self._action_prob(infoset_or_action)
 *         elif isinstance(infoset_or_action, str):             # <<<<<<<<<<<<<<
 *             infoset_or_action = infoset = self._resolve_index(infoset_or_action, players=False)
 *             if isinstance(infoset_or_action, Infoset):
 */
  }

  /* "gambit/lib/behav.pxi":224
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %
 *                         infoset_or_action.__class__.__name__)             # <<<<<<<<<<<<<<
 * 
 *     def regret(self, action):
 */
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_infoset_or_action, __pyx_n_s_class); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_name); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 224, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

  /* "gambit/lib/behav.pxi":223
 *             elif isinstance(infoset_or_action, Action):
 *                 return self._action_prob(infoset_or_action)
 *         raise TypeError("profile probability index must be str, Infoset or Action, not %s" %             # <<<<<<<<<<<<<<
 *                         infoset_or_action.__class__.__name__)
 * 
 */
  __pyx_t_6 = __Pyx_PyString_Format(__pyx_kp_s_profile_probability_index_must_b, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_6);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
  __pyx_t_6 = 0;
  __pyx_t_6 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_5, NULL); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_Raise(__pyx_t_6, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __PYX_ERR(3, 223, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":212
 *                         player_infoset_or_action.__class__.__name__)
 * 
 *     def realiz_prob(self, infoset_or_action):             # <<<<<<<<<<<<<<
 *         if isinstance(infoset_or_action, Infoset):
 *             return self._infoset_prob(infoset_or_action)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.realiz_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_infoset);
  __Pyx_XDECREF(__pyx_v_infoset_or_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":226
 *                         infoset_or_action.__class__.__name__)
 * 
 *     def regret(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_27regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_27regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("regret (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_26regret(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_20MixedBehaviorProfile_26regret(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("regret", 0);
  __Pyx_INCREF(__pyx_v_action);

  /* "gambit/lib/behav.pxi":227
 * 
 *     def regret(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
  __pyx_t_1 = PyString_Check(__pyx_v_action); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":228
 *     def regret(self, action):
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)             # <<<<<<<<<<<<<<
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_resolve_index); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_action);
    __Pyx_GIVEREF(__pyx_v_action);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_action);
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_players, Py_False) < 0) __PYX_ERR(3, 228, __pyx_L1_error)
    __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_4, __pyx_t_5); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF_SET(__pyx_v_action, __pyx_t_6);
    __pyx_t_6 = 0;

    /* "gambit/lib/behav.pxi":229
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
    __pyx_t_1 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_1) {

      /* "gambit/lib/behav.pxi":230
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)             # <<<<<<<<<<<<<<
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 */
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_label); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_no_action_matching_label_s, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GIVEREF(__pyx_t_5);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_IndexError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 230, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_Raise(__pyx_t_5, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __PYX_ERR(3, 230, __pyx_L1_error)

      /* "gambit/lib/behav.pxi":229
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 */
    }

    /* "gambit/lib/behav.pxi":227
 * 
 *     def regret(self, action):
 *         if isinstance(action, str):             # <<<<<<<<<<<<<<
 *             action = self._resolve_index(action, players=False)
 *             if not isinstance(action, Action):
 */
    goto __pyx_L3;
  }

  /* "gambit/lib/behav.pxi":231
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_action, __pyx_ptype_6gambit_3lib_9libgambit_Action); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/behav.pxi":233
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)             # <<<<<<<<<<<<<<
 *         return self._regret(action)
 * 
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_action, __pyx_n_s_class); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 233, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/behav.pxi":232
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):
 *             raise TypeError("profile regret index must be str or Action, not %s" %             # <<<<<<<<<<<<<<
 *                             action.__class__.__name__)
 *         return self._regret(action)
 */
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_profile_regret_index_must_be_str, __pyx_t_6); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_6, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 232, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_Raise(__pyx_t_5, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __PYX_ERR(3, 232, __pyx_L1_error)

    /* "gambit/lib/behav.pxi":231
 *             if not isinstance(action, Action):
 *                 raise IndexError("no action matching label '%s'" % action.label)
 *         elif not isinstance(action, Action):             # <<<<<<<<<<<<<<
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 */
  }
  __pyx_L3:;

  /* "gambit/lib/behav.pxi":234
 *             raise TypeError("profile regret index must be str or Action, not %s" %
 *                             action.__class__.__name__)
 *         return self._regret(action)             # <<<<<<<<<<<<<<
 * 
 * cdef class MixedBehaviorProfileDouble(MixedBehaviorProfile):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_regret); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 234, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_6))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_6);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_6);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_6, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_6, __pyx_v_action); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
  } else {
    __pyx_t_3 = PyTuple_New(1+1); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_INCREF(__pyx_v_action);
    __Pyx_GIVEREF(__pyx_v_action);
    PyTuple_SET_ITEM(__pyx_t_3, 0+1, __pyx_v_action);
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_3, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":226
 *                         infoset_or_action.__class__.__name__)
 * 
 *     def regret(self, action):             # <<<<<<<<<<<<<<
 *         if isinstance(action, str):
 *             action = self._resolve_index(action, players=False)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfile.regret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_action);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":239
 *     cdef c_MixedBehaviorProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble___dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/behav.pxi":240
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.Length()
 */
  delete __pyx_v_self->profile;

  /* "gambit/lib/behav.pxi":239
 *     cdef c_MixedBehaviorProfileDouble *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/behav.pxi":241
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/behav.pxi":242
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.Length()             # <<<<<<<<<<<<<<
 * 
 *     def _is_defined_at(self, Infoset infoset):
 */
  __pyx_r = __pyx_v_self->profile->Length();
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":241
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":244
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_defined_at (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_6gambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 244, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4_is_defined_at(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4_is_defined_at(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_is_defined_at", 0);

  /* "gambit/lib/behav.pxi":245
 * 
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->profile->IsDefinedAt(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":244
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._is_defined_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":246
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 246, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_6_getprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "gambit/lib/behav.pxi":247
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)             # <<<<<<<<<<<<<<
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 247, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 247, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":246
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":248
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getaction (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 248, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_8_getaction(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_index));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_8_getaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_getaction", 0);

  /* "gambit/lib/behav.pxi":249
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->profile->operator()(__pyx_v_index->action);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 249, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 249, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":248
 *     def _getprob(self, int index):
 *         return self.profile.getitem(index)
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._getaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":250
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(3, 250, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(3, 250, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 250, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 250, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_10_setprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "gambit/lib/behav.pxi":251
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)             # <<<<<<<<<<<<<<
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 251, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index, __pyx_t_1);

  /* "gambit/lib/behav.pxi":250
 *     def _getaction(self, Action index):
 *         return self.profile.getaction(index.action)
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":252
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setaction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, 1); __PYX_ERR(3, 252, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setaction") < 0)) __PYX_ERR(3, 252, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 252, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 252, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_12_setaction(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_12_setaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  __Pyx_RefNannySetupContext("_setaction", 0);

  /* "gambit/lib/behav.pxi":253
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 */
  __pyx_t_1 = __pyx_PyFloat_AsDouble(__pyx_v_value); if (unlikely((__pyx_t_1 == (double)-1) && PyErr_Occurred())) __PYX_ERR(3, 253, __pyx_L1_error)
  setitem(__pyx_v_self->profile, __pyx_v_index->action, __pyx_t_1);

  /* "gambit/lib/behav.pxi":252
 *     def _setprob(self, int index, value):
 *         setitem_mbpd_int(self.profile, index, value)
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":254
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_6gambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(3, 254, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_14_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GamePlayerRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "gambit/lib/behav.pxi":255
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())             # <<<<<<<<<<<<<<
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_player->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(3, 255, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_t_1->GetNumber())); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 255, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":254
 *     def _setaction(self, Action index, value):
 *         setitem_mbpd_action(self.profile, index.action, value)
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":256
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_belief (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_6gambit_3lib_9libgambit_Node, 1, "node", 0))) __PYX_ERR(3, 256, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_16_belief(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_16_belief(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_belief", 0);

  /* "gambit/lib/behav.pxi":257
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)             # <<<<<<<<<<<<<<
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetBeliefProb(__pyx_v_node->node)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":256
 *     def _payoff(self, Player player):
 *         return self.profile.GetPayoff(player.player.deref().GetNumber())
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._belief", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":258
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_6gambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 258, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_18_infoset_prob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_18_infoset_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_infoset_prob", 0);

  /* "gambit/lib/behav.pxi":259
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetRealizProb(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 259, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":258
 *     def _belief(self, Node node):
 *         return self.profile.GetBeliefProb(node.node)
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._infoset_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":260
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_6gambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 260, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_20_infoset_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_20_infoset_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_infoset_payoff", 0);

  /* "gambit/lib/behav.pxi":261
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 261, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":260
 *     def _infoset_prob(self, Infoset infoset):
 *         return self.profile.GetRealizProb(infoset.infoset)
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._infoset_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":262
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 262, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_22_action_prob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_22_action_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_action_prob", 0);

  /* "gambit/lib/behav.pxi":263
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)             # <<<<<<<<<<<<<<
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetActionProb(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":262
 *     def _infoset_payoff(self, Infoset infoset):
 *         return self.profile.GetPayoff(infoset.infoset)
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._action_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":264
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 264, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_24_action_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_24_action_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_action_payoff", 0);

  /* "gambit/lib/behav.pxi":265
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)             # <<<<<<<<<<<<<<
 *     def _regret(self, Action action):
 *         return self.profile.GetRegret(action.action)
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetPayoff(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 265, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":264
 *     def _action_prob(self, Action action):
 *         return self.profile.GetActionProb(action.action)
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._action_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":266
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRegret(action.action)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_regret (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 266, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_26_regret(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_26_regret(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_regret", 0);

  /* "gambit/lib/behav.pxi":267
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):
 *         return self.profile.GetRegret(action.action)             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetRegret(__pyx_v_action->action)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 267, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":266
 *     def _action_payoff(self, Action action):
 *         return self.profile.GetPayoff(action.action)
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return self.profile.GetRegret(action.action)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble._regret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":269
 *         return self.profile.GetRegret(action.action)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_28copy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_28copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "gambit/lib/behav.pxi":271
 *     def copy(self):
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 271, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_behav = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":272
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def as_strategy(self):
 */
  __pyx_v_behav->profile = new MixedBehaviorProfile<double> ((*__pyx_v_self->profile));

  /* "gambit/lib/behav.pxi":273
 *         behav = MixedBehaviorProfileDouble()
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileDouble mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":269
 *         return self.profile.GetRegret(action.action)
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble behav
 *         behav = MixedBehaviorProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":274
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_strategy (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_30as_strategy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_30as_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("as_strategy", 0);

  /* "gambit/lib/behav.pxi":276
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 276, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":277
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())             # <<<<<<<<<<<<<<
 *         return mixed
 *     def liap_value(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->profile).ToMixedProfile());

  /* "gambit/lib/behav.pxi":278
 *         mixed = MixedStrategyProfileDouble()
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed             # <<<<<<<<<<<<<<
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":274
 *         behav.profile = new c_MixedBehaviorProfileDouble(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mixed
 *         mixed = MixedStrategyProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble.as_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":279
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_32liap_value(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_32liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "gambit/lib/behav.pxi":280
 *         return mixed
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->profile->GetLiapValue()); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 280, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":279
 *         mixed.profile = new c_MixedStrategyProfileDouble(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":281
 *     def liap_value(self):
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_34set_centroid(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_34set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":282
 *         return self.profile.GetLiapValue()
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 * 
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_36normalize(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_36normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":286
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/behav.pxi":288
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 288, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":289
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "gambit/lib/behav.pxi":290
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":286
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileDouble.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":296
 *     cdef c_MixedBehaviorProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational___dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational___dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/behav.pxi":297
 * 
 *     def __dealloc__(self):
 *         del self.profile             # <<<<<<<<<<<<<<
 *     def __len__(self):
 *         return self.profile.Length()
 */
  delete __pyx_v_self->profile;

  /* "gambit/lib/behav.pxi":296
 *     cdef c_MixedBehaviorProfileRational *profile
 * 
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.profile
 *     def __len__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/behav.pxi":298
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_2__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_2__len__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/behav.pxi":299
 *         del self.profile
 *     def __len__(self):
 *         return self.profile.Length()             # <<<<<<<<<<<<<<
 * 
 *     def _is_defined_at(self, Infoset infoset):
 */
  __pyx_r = __pyx_v_self->profile->Length();
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":298
 *     def __dealloc__(self):
 *         del self.profile
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.profile.Length()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":301
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_5_is_defined_at(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_is_defined_at (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_6gambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 301, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4_is_defined_at(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4_is_defined_at(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("_is_defined_at", 0);

  /* "gambit/lib/behav.pxi":302
 * 
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)             # <<<<<<<<<<<<<<
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->profile->IsDefinedAt(__pyx_v_infoset->infoset)); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 302, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":301
 *         return self.profile.Length()
 * 
 *     def _is_defined_at(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._is_defined_at", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":303
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getaction(self, Action index):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_7_getprob(PyObject *__pyx_v_self, PyObject *__pyx_arg_index) {
  int __pyx_v_index;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getprob (wrapper)", 0);
  assert(__pyx_arg_index); {
    __pyx_v_index = __Pyx_PyInt_As_int(__pyx_arg_index); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 303, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_6_getprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((int)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_6_getprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Rational __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_getprob", 0);

  /* "gambit/lib/behav.pxi":304
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())             # <<<<<<<<<<<<<<
 *     def _getaction(self, Action index):
 *         return Rational(rat_str(self.profile.getaction(index.action)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_self->profile->operator[](__pyx_v_index);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 304, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_t_3).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 304, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 304, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 304, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":303
 *     def _is_defined_at(self, Infoset infoset):
 *         return self.profile.IsDefinedAt(infoset.infoset)
 *     def _getprob(self, int index):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getaction(self, Action index):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._getprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":305
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getaction(index.action)).c_str())
 *     def _setprob(self, int index, value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_9_getaction(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_getaction (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 305, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_8_getaction(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_index));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_8_getaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Rational __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_getaction", 0);

  /* "gambit/lib/behav.pxi":306
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getaction(self, Action index):
 *         return Rational(rat_str(self.profile.getaction(index.action)).c_str())             # <<<<<<<<<<<<<<
 *     def _setprob(self, int index, value):
 *         cdef char *s
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_self->profile->operator()(__pyx_v_index->action);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(3, 306, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_t_3).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 306, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 306, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":305
 *     def _getprob(self, int index):
 *         return Rational(rat_str(self.profile.getitem(index)).c_str())
 *     def _getaction(self, Action index):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.getaction(index.action)).c_str())
 *     def _setprob(self, int index, value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._getaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":307
 *     def _getaction(self, Action index):
 *         return Rational(rat_str(self.profile.getaction(index.action)).c_str())
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_11_setprob(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_index;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setprob (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, 1); __PYX_ERR(3, 307, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setprob") < 0)) __PYX_ERR(3, 307, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_index == (int)-1) && PyErr_Occurred())) __PYX_ERR(3, 307, __pyx_L3_error)
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setprob", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 307, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_10_setprob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_10_setprob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, int __pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_s;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("_setprob", 0);

  /* "gambit/lib/behav.pxi":309
 *     def _setprob(self, int index, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 309, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/behav.pxi":311
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)             # <<<<<<<<<<<<<<
 *         t = str(value)
 *         s = t
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 311, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "gambit/lib/behav.pxi":310
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %             # <<<<<<<<<<<<<<
 *                             value.__class__.__name__)
 *         t = str(value)
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_rational_precision_profile_requi, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 310, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 310, __pyx_L1_error)

    /* "gambit/lib/behav.pxi":309
 *     def _setprob(self, int index, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  }

  /* "gambit/lib/behav.pxi":312
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 *         t = str(value)             # <<<<<<<<<<<<<<
 *         s = t
 *         setitem_mbpr_int(self.profile, index, to_rational(s))
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_value);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 312, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":313
 *                             value.__class__.__name__)
 *         t = str(value)
 *         s = t             # <<<<<<<<<<<<<<
 *         setitem_mbpr_int(self.profile, index, to_rational(s))
 *     def _setaction(self, Action index, value):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_t); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(3, 313, __pyx_L1_error)
  __pyx_v_s = __pyx_t_6;

  /* "gambit/lib/behav.pxi":314
 *         t = str(value)
 *         s = t
 *         setitem_mbpr_int(self.profile, index, to_rational(s))             # <<<<<<<<<<<<<<
 *     def _setaction(self, Action index, value):
 *         cdef char *s
 */
  setitem(__pyx_v_self->profile, __pyx_v_index, to_rational(__pyx_v_s));

  /* "gambit/lib/behav.pxi":307
 *     def _getaction(self, Action index):
 *         return Rational(rat_str(self.profile.getaction(index.action)).c_str())
 *     def _setprob(self, int index, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._setprob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":315
 *         s = t
 *         setitem_mbpr_int(self.profile, index, to_rational(s))
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_13_setaction(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index = 0;
  PyObject *__pyx_v_value = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_setaction (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_index,&__pyx_n_s_value,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_index)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_value)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, 1); __PYX_ERR(3, 315, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "_setaction") < 0)) __PYX_ERR(3, 315, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_index = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)values[0]);
    __pyx_v_value = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("_setaction", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(3, 315, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "index", 0))) __PYX_ERR(3, 315, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_12_setaction(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), __pyx_v_index, __pyx_v_value);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_12_setaction(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_index, PyObject *__pyx_v_value) {
  char *__pyx_v_s;
  PyObject *__pyx_v_t = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  char *__pyx_t_6;
  __Pyx_RefNannySetupContext("_setaction", 0);

  /* "gambit/lib/behav.pxi":317
 *     def _setaction(self, Action index, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 317, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = PyInt_Check(__pyx_v_value); 
  __pyx_t_5 = (__pyx_t_4 != 0);
  if (!__pyx_t_5) {
  } else {
    __pyx_t_3 = __pyx_t_5;
    goto __pyx_L4_bool_binop_done;
  }
  __pyx_t_5 = PyObject_IsInstance(__pyx_v_value, __pyx_t_2); 
  __pyx_t_4 = (__pyx_t_5 != 0);
  __pyx_t_3 = __pyx_t_4;
  __pyx_L4_bool_binop_done:;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((!(__pyx_t_3 != 0)) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/behav.pxi":319
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)             # <<<<<<<<<<<<<<
 *         t = str(value)
 *         s = t
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_value, __pyx_n_s_class); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_name); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 319, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

    /* "gambit/lib/behav.pxi":318
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %             # <<<<<<<<<<<<<<
 *                             value.__class__.__name__)
 *         t = str(value)
 */
    __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_rational_precision_profile_requi, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 318, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(3, 318, __pyx_L1_error)

    /* "gambit/lib/behav.pxi":317
 *     def _setaction(self, Action index, value):
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):             # <<<<<<<<<<<<<<
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 */
  }

  /* "gambit/lib/behav.pxi":320
 *             raise TypeError("rational precision profile requires int or Fraction probability, not %s" %
 *                             value.__class__.__name__)
 *         t = str(value)             # <<<<<<<<<<<<<<
 *         s = t
 *         setitem_mbpr_action(self.profile, index.action, to_rational(s))
 */
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_value);
  __Pyx_GIVEREF(__pyx_v_value);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_value);
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 320, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_t = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":321
 *                             value.__class__.__name__)
 *         t = str(value)
 *         s = t             # <<<<<<<<<<<<<<
 *         setitem_mbpr_action(self.profile, index.action, to_rational(s))
 *     def _payoff(self, Player player):
 */
  __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_t); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(3, 321, __pyx_L1_error)
  __pyx_v_s = __pyx_t_6;

  /* "gambit/lib/behav.pxi":322
 *         t = str(value)
 *         s = t
 *         setitem_mbpr_action(self.profile, index.action, to_rational(s))             # <<<<<<<<<<<<<<
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player.deref().GetNumber())).c_str())
 */
  setitem(__pyx_v_self->profile, __pyx_v_index->action, to_rational(__pyx_v_s));

  /* "gambit/lib/behav.pxi":315
 *         s = t
 *         setitem_mbpr_int(self.profile, index, to_rational(s))
 *     def _setaction(self, Action index, value):             # <<<<<<<<<<<<<<
 *         cdef char *s
 *         if not isinstance(value, (int, fractions.Fraction)):
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._setaction", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":323
 *         s = t
 *         setitem_mbpr_action(self.profile, index.action, to_rational(s))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(player.player.deref().GetNumber())).c_str())
 *     def _belief(self, Node node):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_15_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_player) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_player), __pyx_ptype_6gambit_3lib_9libgambit_Player, 1, "player", 0))) __PYX_ERR(3, 323, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_14_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_v_player));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_14_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_player) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  GamePlayerRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("_payoff", 0);

  /* "gambit/lib/behav.pxi":324
 *         setitem_mbpr_action(self.profile, index.action, to_rational(s))
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player.deref().GetNumber())).c_str())             # <<<<<<<<<<<<<<
 *     def _belief(self, Node node):
 *         return Rational(rat_str(self.profile.GetBeliefProb(node.node)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_player->player.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(3, 324, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetPayoff(__pyx_t_3->GetNumber())).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(3, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 324, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(3, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 324, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":323
 *         s = t
 *         setitem_mbpr_action(self.profile, index.action, to_rational(s))
 *     def _payoff(self, Player player):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(player.player.deref().GetNumber())).c_str())
 *     def _belief(self, Node node):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":325
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player.deref().GetNumber())).c_str())
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetBeliefProb(node.node)).c_str())
 *     def _infoset_prob(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_17_belief(PyObject *__pyx_v_self, PyObject *__pyx_v_node) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_belief (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_node), __pyx_ptype_6gambit_3lib_9libgambit_Node, 1, "node", 0))) __PYX_ERR(3, 325, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_16_belief(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_v_node));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_16_belief(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_node) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_belief", 0);

  /* "gambit/lib/behav.pxi":326
 *         return Rational(rat_str(self.profile.GetPayoff(player.player.deref().GetNumber())).c_str())
 *     def _belief(self, Node node):
 *         return Rational(rat_str(self.profile.GetBeliefProb(node.node)).c_str())             # <<<<<<<<<<<<<<
 *     def _infoset_prob(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetRealizProb(infoset.infoset)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetBeliefProb(__pyx_v_node->node)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 326, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 326, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 326, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":325
 *     def _payoff(self, Player player):
 *         return Rational(rat_str(self.profile.GetPayoff(player.player.deref().GetNumber())).c_str())
 *     def _belief(self, Node node):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetBeliefProb(node.node)).c_str())
 *     def _infoset_prob(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._belief", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":327
 *     def _belief(self, Node node):
 *         return Rational(rat_str(self.profile.GetBeliefProb(node.node)).c_str())
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetRealizProb(infoset.infoset)).c_str())
 *     def _infoset_payoff(self, Infoset infoset):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_19_infoset_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_6gambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 327, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_18_infoset_prob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_18_infoset_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_infoset_prob", 0);

  /* "gambit/lib/behav.pxi":328
 *         return Rational(rat_str(self.profile.GetBeliefProb(node.node)).c_str())
 *     def _infoset_prob(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetRealizProb(infoset.infoset)).c_str())             # <<<<<<<<<<<<<<
 *     def _infoset_payoff(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetPayoff(infoset.infoset)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetRealizProb(__pyx_v_infoset->infoset)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 328, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 328, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":327
 *     def _belief(self, Node node):
 *         return Rational(rat_str(self.profile.GetBeliefProb(node.node)).c_str())
 *     def _infoset_prob(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetRealizProb(infoset.infoset)).c_str())
 *     def _infoset_payoff(self, Infoset infoset):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._infoset_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":329
 *     def _infoset_prob(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetRealizProb(infoset.infoset)).c_str())
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(infoset.infoset)).c_str())
 *     def _action_prob(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_21_infoset_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_infoset_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_infoset), __pyx_ptype_6gambit_3lib_9libgambit_Infoset, 1, "infoset", 0))) __PYX_ERR(3, 329, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_20_infoset_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_v_infoset));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_20_infoset_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_infoset) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_infoset_payoff", 0);

  /* "gambit/lib/behav.pxi":330
 *         return Rational(rat_str(self.profile.GetRealizProb(infoset.infoset)).c_str())
 *     def _infoset_payoff(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetPayoff(infoset.infoset)).c_str())             # <<<<<<<<<<<<<<
 *     def _action_prob(self, Action action):
 *         return Rational(rat_str(self.profile.GetActionProb(action.action)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetPayoff(__pyx_v_infoset->infoset)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 330, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 330, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 330, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":329
 *     def _infoset_prob(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetRealizProb(infoset.infoset)).c_str())
 *     def _infoset_payoff(self, Infoset infoset):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(infoset.infoset)).c_str())
 *     def _action_prob(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._infoset_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":331
 *     def _infoset_payoff(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetPayoff(infoset.infoset)).c_str())
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetActionProb(action.action)).c_str())
 *     def _action_payoff(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_23_action_prob(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_prob (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 331, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_22_action_prob(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_22_action_prob(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_action_prob", 0);

  /* "gambit/lib/behav.pxi":332
 *         return Rational(rat_str(self.profile.GetPayoff(infoset.infoset)).c_str())
 *     def _action_prob(self, Action action):
 *         return Rational(rat_str(self.profile.GetActionProb(action.action)).c_str())             # <<<<<<<<<<<<<<
 *     def _action_payoff(self, Action action):
 *         return Rational(rat_str(self.profile.GetPayoff(action.action)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetActionProb(__pyx_v_action->action)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 332, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 332, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":331
 *     def _infoset_payoff(self, Infoset infoset):
 *         return Rational(rat_str(self.profile.GetPayoff(infoset.infoset)).c_str())
 *     def _action_prob(self, Action action):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetActionProb(action.action)).c_str())
 *     def _action_payoff(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._action_prob", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":333
 *     def _action_prob(self, Action action):
 *         return Rational(rat_str(self.profile.GetActionProb(action.action)).c_str())
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(action.action)).c_str())
 *     def _regret(self, Action action):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_25_action_payoff(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_action_payoff (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 333, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_24_action_payoff(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_24_action_payoff(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_action_payoff", 0);

  /* "gambit/lib/behav.pxi":334
 *         return Rational(rat_str(self.profile.GetActionProb(action.action)).c_str())
 *     def _action_payoff(self, Action action):
 *         return Rational(rat_str(self.profile.GetPayoff(action.action)).c_str())             # <<<<<<<<<<<<<<
 *     def _regret(self, Action action):
 *         return Rational(rat_str(self.profile.GetRegret(action.action)).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetPayoff(__pyx_v_action->action)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 334, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 334, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":333
 *     def _action_prob(self, Action action):
 *         return Rational(rat_str(self.profile.GetActionProb(action.action)).c_str())
 *     def _action_payoff(self, Action action):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetPayoff(action.action)).c_str())
 *     def _regret(self, Action action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._action_payoff", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":335
 *     def _action_payoff(self, Action action):
 *         return Rational(rat_str(self.profile.GetPayoff(action.action)).c_str())
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetRegret(action.action)).c_str())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_27_regret(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_regret (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_action), __pyx_ptype_6gambit_3lib_9libgambit_Action, 1, "action", 0))) __PYX_ERR(3, 335, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_26_regret(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_v_action));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_26_regret(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_action) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("_regret", 0);

  /* "gambit/lib/behav.pxi":336
 *         return Rational(rat_str(self.profile.GetPayoff(action.action)).c_str())
 *     def _regret(self, Action action):
 *         return Rational(rat_str(self.profile.GetRegret(action.action)).c_str())             # <<<<<<<<<<<<<<
 * 
 *     def copy(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetRegret(__pyx_v_action->action)).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 336, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 336, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 336, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":335
 *     def _action_payoff(self, Action action):
 *         return Rational(rat_str(self.profile.GetPayoff(action.action)).c_str())
 *     def _regret(self, Action action):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetRegret(action.action)).c_str())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational._regret", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":338
 *         return Rational(rat_str(self.profile.GetRegret(action.action)).c_str())
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_29copy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("copy (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_28copy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_28copy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_behav = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("copy", 0);

  /* "gambit/lib/behav.pxi":340
 *     def copy(self):
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 340, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_behav = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":341
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))             # <<<<<<<<<<<<<<
 *         return behav
 *     def as_strategy(self):
 */
  __pyx_v_behav->profile = new MixedBehaviorProfile<Rational> ((*__pyx_v_self->profile));

  /* "gambit/lib/behav.pxi":342
 *         behav = MixedBehaviorProfileRational()
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav             # <<<<<<<<<<<<<<
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileRational mixed
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_behav));
  __pyx_r = ((PyObject *)__pyx_v_behav);
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":338
 *         return Rational(rat_str(self.profile.GetRegret(action.action)).c_str())
 * 
 *     def copy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileRational behav
 *         behav = MixedBehaviorProfileRational()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational.copy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_behav);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":343
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_31as_strategy(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("as_strategy (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_30as_strategy(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_30as_strategy(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mixed = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("as_strategy", 0);

  /* "gambit/lib/behav.pxi":345
 *     def as_strategy(self):
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 345, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_mixed = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":346
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())             # <<<<<<<<<<<<<<
 *         return mixed
 *     def liap_value(self):
 */
  __pyx_v_mixed->profile = new MixedStrategyProfile<Rational> ((*__pyx_v_self->profile).ToMixedProfile());

  /* "gambit/lib/behav.pxi":347
 *         mixed = MixedStrategyProfileRational()
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed             # <<<<<<<<<<<<<<
 *     def liap_value(self):
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_mixed));
  __pyx_r = ((PyObject *)__pyx_v_mixed);
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":343
 *         behav.profile = new c_MixedBehaviorProfileRational(deref(self.profile))
 *         return behav
 *     def as_strategy(self):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileRational mixed
 *         mixed = MixedStrategyProfileRational()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational.as_strategy", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mixed);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":348
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_33liap_value(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("liap_value (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_32liap_value(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_32liap_value(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  __Pyx_RefNannySetupContext("liap_value", 0);

  /* "gambit/lib/behav.pxi":349
 *         return mixed
 *     def liap_value(self):
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())             # <<<<<<<<<<<<<<
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(3, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_v_self->profile->GetLiapValue()).c_str()); if (unlikely(!__pyx_t_3)) __PYX_ERR(3, 349, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_4)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_4);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_4) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 349, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(3, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 0+1, __pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_5, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":348
 *         mixed.profile = new c_MixedStrategyProfileRational(deref(self.profile).ToMixedProfile())
 *         return mixed
 *     def liap_value(self):             # <<<<<<<<<<<<<<
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def set_centroid(self):   self.profile.SetCentroid()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational.liap_value", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":350
 *     def liap_value(self):
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def set_centroid(self):   self.profile.SetCentroid()             # <<<<<<<<<<<<<<
 *     def normalize(self):      self.profile.Normalize()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_35set_centroid(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_34set_centroid(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_34set_centroid(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_centroid", 0);
  __pyx_v_self->profile->SetCentroid();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":351
 *         return Rational(rat_str(self.profile.GetLiapValue()).c_str())
 *     def set_centroid(self):   self.profile.SetCentroid()
 *     def normalize(self):      self.profile.Normalize()             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_37normalize(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_36normalize(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_36normalize(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("normalize", 0);
  __pyx_v_self->profile->Normalize();

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/behav.pxi":354
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/behav.pxi":356
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.profile.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(3, 356, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/behav.pxi":357
 *             cdef Game g
 *             g = Game()
 *             g.game = self.profile.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 */
  __pyx_v_g->game = __pyx_v_self->profile->GetGame();

  /* "gambit/lib/behav.pxi":358
 *             g = Game()
 *             g.game = self.profile.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/behav.pxi":354
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.MixedBehaviorProfileRational.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":31
 *     "Represents a collection of outcomes in a game."
 *     cdef c_Game game
 *     def __len__(self):    return self.game.deref().NumOutcomes()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_8Outcomes_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_8Outcomes_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Outcomes___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_8Outcomes___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 31, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumOutcomes();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcomes.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":32
 *     cdef c_Game game
 *     def __len__(self):    return self.game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Outcomes_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Outcomes_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_outc) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Outcomes_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *)__pyx_v_self), ((PyObject *)__pyx_v_outc));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Outcomes_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_outc) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameOutcomeRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/game.pxi":33
 *     def __len__(self):    return self.game.deref().NumOutcomes()
 *     def __getitem__(self, outc):
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_outc); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_outc);
    __Pyx_GIVEREF(__pyx_v_outc);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_outc);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 33, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/game.pxi":35
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 *         c = Outcome()             # <<<<<<<<<<<<<<
 *         c.outcome = self.game.deref().GetOutcome(outc+1)
 *         return c
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 35, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_c = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":36
 *         cdef Outcome c
 *         c = Outcome()
 *         c.outcome = self.game.deref().GetOutcome(outc+1)             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 36, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_outc, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 36, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 36, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetOutcome(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(4, 36, __pyx_L1_error)
  }
  __pyx_v_c->outcome = __pyx_t_10;

  /* "gambit/lib/game.pxi":37
 *         c = Outcome()
 *         c.outcome = self.game.deref().GetOutcome(outc+1)
 *         return c             # <<<<<<<<<<<<<<
 * 
 *     def add(self, label=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":32
 *     cdef c_Game game
 *     def __len__(self):    return self.game.deref().NumOutcomes()
 *     def __getitem__(self, outc):             # <<<<<<<<<<<<<<
 *         if not isinstance(outc, int):  return Collection.__getitem__(self, outc)
 *         cdef Outcome c
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcomes.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":39
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Outcomes_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_8Outcomes_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(4, 39, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 39, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_8Outcomes_4add(((struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_8Outcomes_4add(struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *__pyx_v_self, PyObject *__pyx_v_label) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameRep *__pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("add", 0);

  /* "gambit/lib/game.pxi":41
 *     def add(self, label=""):
 *         cdef Outcome c
 *         c = Outcome()             # <<<<<<<<<<<<<<
 *         c.outcome = self.game.deref().NewOutcome()
 *         if label != "": c.label = str(label)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":42
 *         cdef Outcome c
 *         c = Outcome()
 *         c.outcome = self.game.deref().NewOutcome()             # <<<<<<<<<<<<<<
 *         if label != "": c.label = str(label)
 *         return c
 */
  try {
    __pyx_t_2 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 42, __pyx_L1_error)
  }
  __pyx_v_c->outcome = __pyx_t_2->NewOutcome();

  /* "gambit/lib/game.pxi":43
 *         c = Outcome()
 *         c.outcome = self.game.deref().NewOutcome()
 *         if label != "": c.label = str(label)             # <<<<<<<<<<<<<<
 *         return c
 * 
 */
  __pyx_t_3 = (__Pyx_PyString_Equals(__pyx_v_label, __pyx_kp_s__8, Py_NE)); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(4, 43, __pyx_L1_error)
  if (__pyx_t_3) {
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_label);
    __Pyx_GIVEREF(__pyx_v_label);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_label);
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_c), __pyx_n_s_label, __pyx_t_4) < 0) __PYX_ERR(4, 43, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }

  /* "gambit/lib/game.pxi":44
 *         c.outcome = self.game.deref().NewOutcome()
 *         if label != "": c.label = str(label)
 *         return c             # <<<<<<<<<<<<<<
 * 
 * cdef class Players(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":39
 *         return c
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Outcome c
 *         c = Outcome()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Outcomes.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":50
 *     cdef c_Game game
 *     cdef StrategicRestriction restriction
 *     def __len__(self):       return self.game.deref().NumPlayers()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, pl):
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_7Players_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_7Players_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Players___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_Players *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_7Players___len__(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 50, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->NumPlayers();
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Players.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":51
 *     cdef StrategicRestriction restriction
 *     def __len__(self):       return self.game.deref().NumPlayers()
 *     def __getitem__(self, pl):             # <<<<<<<<<<<<<<
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 *         cdef Player p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Players_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Players_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_pl) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Players_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Players *)__pyx_v_self), ((PyObject *)__pyx_v_pl));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Players_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_pl) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GamePlayerRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/game.pxi":52
 *     def __len__(self):       return self.game.deref().NumPlayers()
 *     def __getitem__(self, pl):
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)             # <<<<<<<<<<<<<<
 *         cdef Player p
 *         p = Player()
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_pl); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_pl);
    __Pyx_GIVEREF(__pyx_v_pl);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_pl);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 52, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/game.pxi":54
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 *         cdef Player p
 *         p = Player()             # <<<<<<<<<<<<<<
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Player), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 54, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":55
 *         cdef Player p
 *         p = Player()
 *         p.player = self.game.deref().GetPlayer(pl+1)             # <<<<<<<<<<<<<<
 *         if self.restriction is not None:
 *             p.restriction = self.restriction
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 55, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 55, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetPlayer(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(4, 55, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_10;

  /* "gambit/lib/game.pxi":56
 *         p = Player()
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *         return p
 */
  __pyx_t_2 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_1 = (__pyx_t_2 != 0);
  if (__pyx_t_1) {

    /* "gambit/lib/game.pxi":57
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:
 *             p.restriction = self.restriction             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
    __pyx_t_3 = ((PyObject *)__pyx_v_self->restriction);
    __Pyx_INCREF(__pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __Pyx_GOTREF(__pyx_v_p->restriction);
    __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
    __pyx_v_p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "gambit/lib/game.pxi":56
 *         p = Player()
 *         p.player = self.game.deref().GetPlayer(pl+1)
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *         return p
 */
  }

  /* "gambit/lib/game.pxi":58
 *         if self.restriction is not None:
 *             p.restriction = self.restriction
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     def add(self, label=""):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":51
 *     cdef StrategicRestriction restriction
 *     def __len__(self):       return self.game.deref().NumPlayers()
 *     def __getitem__(self, pl):             # <<<<<<<<<<<<<<
 *         if not isinstance(pl, int):  return Collection.__getitem__(self, pl)
 *         cdef Player p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Players.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":60
 *         return p
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Player p
 *         if self.restriction is not None:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Players_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Players_5add(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_label = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_label,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_kp_s__8);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_label);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "add") < 0)) __PYX_ERR(4, 60, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_label = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("add", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 60, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Players.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Players_4add(((struct __pyx_obj_6gambit_3lib_9libgambit_Players *)__pyx_v_self), __pyx_v_label);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Players_4add(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self, PyObject *__pyx_v_label) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  GameRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("add", 0);

  /* "gambit/lib/game.pxi":62
 *     def add(self, label=""):
 *         cdef Player p
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()
 */
  __pyx_t_1 = (((PyObject *)__pyx_v_self->restriction) != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":63
 *         cdef Player p
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *         p = Player()
 *         p.player = self.game.deref().NewPlayer()
 */
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_tuple__94, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 63, __pyx_L1_error)

    /* "gambit/lib/game.pxi":62
 *     def add(self, label=""):
 *         cdef Player p
 *         if self.restriction is not None:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()
 */
  }

  /* "gambit/lib/game.pxi":64
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()             # <<<<<<<<<<<<<<
 *         p.player = self.game.deref().NewPlayer()
 *         if label != "": p.label = str(label)
 */
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Player), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 64, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "gambit/lib/game.pxi":65
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *         p = Player()
 *         p.player = self.game.deref().NewPlayer()             # <<<<<<<<<<<<<<
 *         if label != "": p.label = str(label)
 *         return p
 */
  try {
    __pyx_t_5 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 65, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_5->NewPlayer();

  /* "gambit/lib/game.pxi":66
 *         p = Player()
 *         p.player = self.game.deref().NewPlayer()
 *         if label != "": p.label = str(label)             # <<<<<<<<<<<<<<
 *         return p
 * 
 */
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_label, __pyx_kp_s__8, Py_NE)); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 66, __pyx_L1_error)
  if (__pyx_t_2) {
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_INCREF(__pyx_v_label);
    __Pyx_GIVEREF(__pyx_v_label);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_label);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)(&PyString_Type)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 66, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__Pyx_PyObject_SetAttrStr(((PyObject *)__pyx_v_p), __pyx_n_s_label, __pyx_t_3) < 0) __PYX_ERR(4, 66, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }

  /* "gambit/lib/game.pxi":67
 *         p.player = self.game.deref().NewPlayer()
 *         if label != "": p.label = str(label)
 *         return p             # <<<<<<<<<<<<<<
 * 
 *     property chance:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":60
 *         return p
 * 
 *     def add(self, label=""):             # <<<<<<<<<<<<<<
 *         cdef Player p
 *         if self.restriction is not None:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Players.add", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":70
 * 
 *     property chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             p = Player()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Players_6chance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_7Players_6chance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_7Players_6chance___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Players *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_7Players_6chance___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":72
 *         def __get__(self):
 *             cdef Player p
 *             p = Player()             # <<<<<<<<<<<<<<
 *             p.player = self.game.deref().GetChance()
 *             p.restriction = self.restriction
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Player), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 72, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":73
 *             cdef Player p
 *             p = Player()
 *             p.player = self.game.deref().GetChance()             # <<<<<<<<<<<<<<
 *             p.restriction = self.restriction
 *             return p
 */
  try {
    __pyx_t_2 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 73, __pyx_L1_error)
  }
  __pyx_v_p->player = __pyx_t_2->GetChance();

  /* "gambit/lib/game.pxi":74
 *             p = Player()
 *             p.player = self.game.deref().GetChance()
 *             p.restriction = self.restriction             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  __pyx_t_1 = ((PyObject *)__pyx_v_self->restriction);
  __Pyx_INCREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __Pyx_GOTREF(__pyx_v_p->restriction);
  __Pyx_DECREF(((PyObject *)__pyx_v_p->restriction));
  __pyx_v_p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":75
 *             p.player = self.game.deref().GetChance()
 *             p.restriction = self.restriction
 *             return p             # <<<<<<<<<<<<<<
 * 
 * cdef class GameActions(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":70
 * 
 *     property chance:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Player p
 *             p = Player()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Players.chance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":80
 *     "Represents a collection of actions in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_11GameActions_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_11GameActions_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_11GameActions___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_11GameActions___len__(struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/game.pxi":81
 *     cdef c_Game game
 *     def __len__(self):
 *         return self.game.deref().BehavProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 81, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->BehavProfileLength();
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":80
 *     "Represents a collection of actions in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.GameActions.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":82
 *     def __len__(self):
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):             # <<<<<<<<<<<<<<
 *         if not isinstance(action, int):
 *             return Collection.__getitem__(self, action)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_11GameActions_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_action); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_11GameActions_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_action) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_11GameActions_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *)__pyx_v_self), ((PyObject *)__pyx_v_action));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_11GameActions_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *__pyx_v_self, PyObject *__pyx_v_action) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Action *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameActionRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/game.pxi":83
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, action)
 *         cdef Action a
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_action); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":84
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):
 *             return Collection.__getitem__(self, action)             # <<<<<<<<<<<<<<
 *         cdef Action a
 *         a = Action()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_action);
    __Pyx_GIVEREF(__pyx_v_action);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_action);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 84, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":83
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):
 *         if not isinstance(action, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, action)
 *         cdef Action a
 */
  }

  /* "gambit/lib/game.pxi":86
 *             return Collection.__getitem__(self, action)
 *         cdef Action a
 *         a = Action()             # <<<<<<<<<<<<<<
 *         a.action = self.game.deref().GetAction(action+1)
 *         return a
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Action), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 86, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_a = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":87
 *         cdef Action a
 *         a = Action()
 *         a.action = self.game.deref().GetAction(action+1)             # <<<<<<<<<<<<<<
 *         return a
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 87, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_action, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 87, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetAction(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(4, 87, __pyx_L1_error)
  }
  __pyx_v_a->action = __pyx_t_10;

  /* "gambit/lib/game.pxi":88
 *         a = Action()
 *         a.action = self.game.deref().GetAction(action+1)
 *         return a             # <<<<<<<<<<<<<<
 * 
 * cdef class GameInfosets(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_a));
  __pyx_r = ((PyObject *)__pyx_v_a);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":82
 *     def __len__(self):
 *         return self.game.deref().BehavProfileLength()
 *     def __getitem__(self, action):             # <<<<<<<<<<<<<<
 *         if not isinstance(action, int):
 *             return Collection.__getitem__(self, action)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.GameActions.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":93
 *     "Represents a collection of infosets in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_12GameInfosets_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_12GameInfosets_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_12GameInfosets___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_12GameInfosets___len__(struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *__pyx_v_self) {
  Array<int>  __pyx_v_num_infosets;
  PyObject *__pyx_v_size = NULL;
  PyObject *__pyx_v_n = NULL;
  PyObject *__pyx_v_i = NULL;
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/game.pxi":95
 *     def __len__(self):
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()             # <<<<<<<<<<<<<<
 *         size = num_infosets.Length()
 *         n = 0
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 95, __pyx_L1_error)
  }
  __pyx_v_num_infosets = __pyx_t_1->NumInfosets();

  /* "gambit/lib/game.pxi":96
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()
 *         size = num_infosets.Length()             # <<<<<<<<<<<<<<
 *         n = 0
 *         for i in range(1,size+1):
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_num_infosets.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_size = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "gambit/lib/game.pxi":97
 *         num_infosets = self.game.deref().NumInfosets()
 *         size = num_infosets.Length()
 *         n = 0             # <<<<<<<<<<<<<<
 *         for i in range(1,size+1):
 *             n += num_infosets.getitem(i)
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_v_n = __pyx_int_0;

  /* "gambit/lib/game.pxi":98
 *         size = num_infosets.Length()
 *         n = 0
 *         for i in range(1,size+1):             # <<<<<<<<<<<<<<
 *             n += num_infosets.getitem(i)
 *         return n
 */
  __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_size, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 98, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 98, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 98, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 98, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 98, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 98, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 98, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/game.pxi":99
 *         n = 0
 *         for i in range(1,size+1):
 *             n += num_infosets.getitem(i)             # <<<<<<<<<<<<<<
 *         return n
 *     def __getitem__(self, infoset):
 */
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 99, __pyx_L1_error)
    try {
      __pyx_t_7 = __pyx_v_num_infosets.operator[](__pyx_t_6);
    } catch(...) {
      __Pyx_CppExn2PyErr();
      __PYX_ERR(4, 99, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_t_7); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_v_n, __pyx_t_2); if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 99, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF_SET(__pyx_v_n, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "gambit/lib/game.pxi":98
 *         size = num_infosets.Length()
 *         n = 0
 *         for i in range(1,size+1):             # <<<<<<<<<<<<<<
 *             n += num_infosets.getitem(i)
 *         return n
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":100
 *         for i in range(1,size+1):
 *             n += num_infosets.getitem(i)
 *         return n             # <<<<<<<<<<<<<<
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):
 */
  __pyx_t_4 = __Pyx_PyIndex_AsSsize_t(__pyx_v_n); if (unlikely((__pyx_t_4 == (Py_ssize_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 100, __pyx_L1_error)
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":93
 *     "Represents a collection of infosets in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         cdef Array[int] num_infosets
 *         num_infosets = self.game.deref().NumInfosets()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("gambit.lib.libgambit.GameInfosets.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_size);
  __Pyx_XDECREF(__pyx_v_n);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":101
 *             n += num_infosets.getitem(i)
 *         return n
 *     def __getitem__(self, infoset):             # <<<<<<<<<<<<<<
 *         if not isinstance(infoset, int):
 *             return Collection.__getitem__(self, infoset)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_12GameInfosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_12GameInfosets_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_infoset) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_12GameInfosets_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *)__pyx_v_self), ((PyObject *)__pyx_v_infoset));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_12GameInfosets_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *__pyx_v_self, PyObject *__pyx_v_infoset) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameInfosetRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/game.pxi":102
 *         return n
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, infoset)
 *         cdef Infoset i
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_infoset); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":103
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):
 *             return Collection.__getitem__(self, infoset)             # <<<<<<<<<<<<<<
 *         cdef Infoset i
 *         i = Infoset()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_infoset);
    __Pyx_GIVEREF(__pyx_v_infoset);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_infoset);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 103, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":102
 *         return n
 *     def __getitem__(self, infoset):
 *         if not isinstance(infoset, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, infoset)
 *         cdef Infoset i
 */
  }

  /* "gambit/lib/game.pxi":105
 *             return Collection.__getitem__(self, infoset)
 *         cdef Infoset i
 *         i = Infoset()             # <<<<<<<<<<<<<<
 *         i.infoset = self.game.deref().GetInfoset(infoset+1)
 *         return i
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Infoset), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 105, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":106
 *         cdef Infoset i
 *         i = Infoset()
 *         i.infoset = self.game.deref().GetInfoset(infoset+1)             # <<<<<<<<<<<<<<
 *         return i
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 106, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_infoset, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 106, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetInfoset(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(4, 106, __pyx_L1_error)
  }
  __pyx_v_i->infoset = __pyx_t_10;

  /* "gambit/lib/game.pxi":107
 *         i = Infoset()
 *         i.infoset = self.game.deref().GetInfoset(infoset+1)
 *         return i             # <<<<<<<<<<<<<<
 * 
 * cdef class GameStrategies(Collection):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_i));
  __pyx_r = ((PyObject *)__pyx_v_i);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":101
 *             n += num_infosets.getitem(i)
 *         return n
 *     def __getitem__(self, infoset):             # <<<<<<<<<<<<<<
 *         if not isinstance(infoset, int):
 *             return Collection.__getitem__(self, infoset)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.GameInfosets.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":112
 *     "Represents a collection of strategies in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_14GameStrategies_1__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_14GameStrategies_1__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_14GameStrategies___len__(((struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_14GameStrategies___len__(struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/game.pxi":113
 *     cdef c_Game game
 *     def __len__(self):
 *         return self.game.deref().MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 113, __pyx_L1_error)
  }
  __pyx_r = __pyx_t_1->MixedProfileLength();
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":112
 *     "Represents a collection of strategies in a game."
 *     cdef c_Game game
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.GameStrategies.__len__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":114
 *     def __len__(self):
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):
 *             return Collection.__getitem__(self, st)
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_14GameStrategies_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_14GameStrategies_3__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_14GameStrategies_2__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *)__pyx_v_self), ((PyObject *)__pyx_v_st));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_14GameStrategies_2__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *__pyx_v_self, PyObject *__pyx_v_st) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  GameRep *__pyx_t_8;
  int __pyx_t_9;
  GameObjectPtr<GameStrategyRep> __pyx_t_10;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/game.pxi":115
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */
  __pyx_t_1 = PyInt_Check(__pyx_v_st); 
  __pyx_t_2 = ((!(__pyx_t_1 != 0)) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":116
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):
 *             return Collection.__getitem__(self, st)             # <<<<<<<<<<<<<<
 *         cdef Strategy s
 *         s = Strategy()
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Collection), __pyx_n_s_getitem); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = NULL;
    __pyx_t_6 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_5)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_5);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_6 = 1;
      }
    }
    __pyx_t_7 = PyTuple_New(2+__pyx_t_6); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    if (__pyx_t_5) {
      __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    }
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_7, 0+__pyx_t_6, ((PyObject *)__pyx_v_self));
    __Pyx_INCREF(__pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    PyTuple_SET_ITEM(__pyx_t_7, 1+__pyx_t_6, __pyx_v_st);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_7, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 116, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":115
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):
 *         if not isinstance(st, int):             # <<<<<<<<<<<<<<
 *             return Collection.__getitem__(self, st)
 *         cdef Strategy s
 */
  }

  /* "gambit/lib/game.pxi":118
 *             return Collection.__getitem__(self, st)
 *         cdef Strategy s
 *         s = Strategy()             # <<<<<<<<<<<<<<
 *         s.strategy = self.game.deref().GetStrategy(st+1)
 *         return s
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Strategy), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":119
 *         cdef Strategy s
 *         s = Strategy()
 *         s.strategy = self.game.deref().GetStrategy(st+1)             # <<<<<<<<<<<<<<
 *         return s
 * 
 */
  try {
    __pyx_t_8 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 119, __pyx_L1_error)
  }
  __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 119, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  try {
    __pyx_t_10 = __pyx_t_8->GetStrategy(__pyx_t_9);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(4, 119, __pyx_L1_error)
  }
  __pyx_v_s->strategy = __pyx_t_10;

  /* "gambit/lib/game.pxi":120
 *         s = Strategy()
 *         s.strategy = self.game.deref().GetStrategy(st+1)
 *         return s             # <<<<<<<<<<<<<<
 * 
 * cdef class Game(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":114
 *     def __len__(self):
 *         return self.game.deref().MixedProfileLength()
 *     def __getitem__(self, st):             # <<<<<<<<<<<<<<
 *         if not isinstance(st, int):
 *             return Collection.__getitem__(self, st)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.GameStrategies.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":126
 * 
 *     @classmethod
 *     def new_tree(cls):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_1new_tree(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_1new_tree(PyObject *__pyx_v_cls, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_tree (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_new_tree(((PyTypeObject*)__pyx_v_cls));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_new_tree(PyTypeObject *__pyx_v_cls) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("new_tree", 0);

  /* "gambit/lib/game.pxi":128
 *     def new_tree(cls):
 *         cdef Game g
 *         g = cls()             # <<<<<<<<<<<<<<
 *         g.game = NewTree()
 *         return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6gambit_3lib_9libgambit_Game))))) __PYX_ERR(4, 128, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":129
 *         cdef Game g
 *         g = cls()
 *         g.game = NewTree()             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  __pyx_v_g->game = NewTree();

  /* "gambit/lib/game.pxi":130
 *         g = cls()
 *         g.game = NewTree()
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":126
 * 
 *     @classmethod
 *     def new_tree(cls):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.new_tree", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":133
 * 
 *     @classmethod
 *     def new_table(cls, dim):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         cdef Array[int] *d
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_3new_table(PyObject *__pyx_v_cls, PyObject *__pyx_v_dim); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_3new_table(PyObject *__pyx_v_cls, PyObject *__pyx_v_dim) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("new_table (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_2new_table(((PyTypeObject*)__pyx_v_cls), ((PyObject *)__pyx_v_dim));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_2new_table(PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_dim) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  Array<int>  *__pyx_v_d;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("new_table", 0);

  /* "gambit/lib/game.pxi":136
 *         cdef Game g
 *         cdef Array[int] *d
 *         d = new Array[int](len(dim))             # <<<<<<<<<<<<<<
 *         for i in range(1, len(dim)+1):
 *             setitem_array_int(d, i, dim[i-1])
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_dim); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(4, 136, __pyx_L1_error)
  __pyx_v_d = new Array<int> (__pyx_t_1);

  /* "gambit/lib/game.pxi":137
 *         cdef Array[int] *d
 *         d = new Array[int](len(dim))
 *         for i in range(1, len(dim)+1):             # <<<<<<<<<<<<<<
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_dim); if (unlikely(__pyx_t_1 == -1)) __PYX_ERR(4, 137, __pyx_L1_error)
  __pyx_t_2 = PyInt_FromSsize_t((__pyx_t_1 + 1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(__pyx_int_1);
  __Pyx_GIVEREF(__pyx_int_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_int_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_range, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 137, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_1 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_1 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 137, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_1 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(4, 137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_1 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_1); __Pyx_INCREF(__pyx_t_2); __pyx_t_1++; if (unlikely(0 < 0)) __PYX_ERR(4, 137, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_1); __pyx_t_1++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 137, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_4(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 137, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/game.pxi":138
 *         d = new Array[int](len(dim))
 *         for i in range(1, len(dim)+1):
 *             setitem_array_int(d, i, dim[i-1])             # <<<<<<<<<<<<<<
 *         g = cls()
 *         g.game = NewTable(d)
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 138, __pyx_L1_error)
    __pyx_t_2 = __Pyx_PyInt_SubtractObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = PyObject_GetItem(__pyx_v_dim, __pyx_t_2); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_6); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    setitem(__pyx_v_d, __pyx_t_5, __pyx_t_7);

    /* "gambit/lib/game.pxi":137
 *         cdef Array[int] *d
 *         d = new Array[int](len(dim))
 *         for i in range(1, len(dim)+1):             # <<<<<<<<<<<<<<
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":139
 *         for i in range(1, len(dim)+1):
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()             # <<<<<<<<<<<<<<
 *         g.game = NewTable(d)
 *         del d
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 139, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_6gambit_3lib_9libgambit_Game))))) __PYX_ERR(4, 139, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "gambit/lib/game.pxi":140
 *             setitem_array_int(d, i, dim[i-1])
 *         g = cls()
 *         g.game = NewTable(d)             # <<<<<<<<<<<<<<
 *         del d
 *         return g
 */
  __pyx_v_g->game = NewTable(__pyx_v_d);

  /* "gambit/lib/game.pxi":141
 *         g = cls()
 *         g.game = NewTable(d)
 *         del d             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  delete __pyx_v_d;

  /* "gambit/lib/game.pxi":142
 *         g.game = NewTable(d)
 *         del d
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":133
 * 
 *     @classmethod
 *     def new_table(cls, dim):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         cdef Array[int] *d
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.new_table", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_5from_arrays(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_5from_arrays(PyObject *__pyx_v_cls, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_arrays = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("from_arrays (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "from_arrays", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_arrays = __pyx_args;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_4from_arrays(((PyTypeObject*)__pyx_v_cls), __pyx_v_arrays);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_arrays);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6gambit_3lib_9libgambit_4Game_11from_arrays_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_11from_arrays_genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6gambit_3lib_9libgambit_4Game_11from_arrays_2generator3, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_from_arrays_locals_genexpr); if (unlikely(!gen)) __PYX_ERR(4, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.from_arrays.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6gambit_3lib_9libgambit_4Game_11from_arrays_2generator3(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(4, 147, __pyx_L1_error)
  __pyx_r = PySet_New(NULL); if (unlikely(!__pyx_r)) __PYX_ERR(4, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_r);
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays)) { __Pyx_RaiseClosureNameError("arrays"); __PYX_ERR(4, 147, __pyx_L1_error) }
  if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    __PYX_ERR(4, 147, __pyx_L1_error)
  }
  __pyx_t_1 = __pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) __PYX_ERR(4, 147, __pyx_L1_error)
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    #endif
    __Pyx_XGOTREF(__pyx_cur_scope->__pyx_v_a);
    __Pyx_XDECREF_SET(__pyx_cur_scope->__pyx_v_a, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_cur_scope->__pyx_v_a, __pyx_n_s_shape); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 147, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    if (unlikely(PySet_Add(__pyx_r, (PyObject*)__pyx_t_3))) __PYX_ERR(4, 147, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static PyObject *__pyx_gb_6gambit_3lib_9libgambit_4Game_11from_arrays_5generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value); /* proto */

/* "gambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in xrange(len(g.players)))):
 *             for pl in xrange(len(g.players)):
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_11from_arrays_3genexpr(PyObject *__pyx_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *__pyx_cur_scope;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("genexpr", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_outer_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *) __pyx_self;
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_outer_scope));
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_outer_scope);
  {
    __pyx_CoroutineObject *gen = __Pyx_Generator_New((__pyx_coroutine_body_t) __pyx_gb_6gambit_3lib_9libgambit_4Game_11from_arrays_5generator4, (PyObject *) __pyx_cur_scope, __pyx_n_s_genexpr, __pyx_n_s_from_arrays_locals_genexpr); if (unlikely(!gen)) __PYX_ERR(4, 150, __pyx_L1_error)
    __Pyx_DECREF(__pyx_cur_scope);
    __Pyx_RefNannyFinishContext();
    return (PyObject *) gen;
  }

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.from_arrays.genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_gb_6gambit_3lib_9libgambit_4Game_11from_arrays_5generator4(__pyx_CoroutineObject *__pyx_generator, PyObject *__pyx_sent_value) /* generator body */
{
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *__pyx_cur_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)__pyx_generator->closure);
  PyObject *__pyx_r = NULL;
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  Py_ssize_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("None", 0);
  switch (__pyx_generator->resume_label) {
    case 0: goto __pyx_L3_first_run;
    case 1: goto __pyx_L6_resume_from_yield;
    default: /* CPython raises the right error here */
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __pyx_L3_first_run:;
  if (unlikely(!__pyx_sent_value)) __PYX_ERR(4, 150, __pyx_L1_error)

  /* "gambit/lib/game.pxi":151
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])
 *                                          for i in xrange(len(g.players)))):             # <<<<<<<<<<<<<<
 *             for pl in xrange(len(g.players)):
 *                 g[profile][pl] = arrays[pl][profile]
 */
  if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_g)) { __Pyx_RaiseClosureNameError("g"); __PYX_ERR(4, 151, __pyx_L1_error) }
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_outer_scope->__pyx_v_g), __pyx_n_s_players); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 151, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyObject_Length(__pyx_t_1); if (unlikely(__pyx_t_2 == -1)) __PYX_ERR(4, 151, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_cur_scope->__pyx_v_i = __pyx_t_3;

    /* "gambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in xrange(len(g.players)))):
 *             for pl in xrange(len(g.players)):
 */
    if (unlikely(!__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays)) { __Pyx_RaiseClosureNameError("arrays"); __PYX_ERR(4, 150, __pyx_L1_error) }
    if (unlikely(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays == Py_None)) {
      PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
      __PYX_ERR(4, 150, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_outer_scope->__pyx_v_arrays, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_shape); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_4, __pyx_cur_scope->__pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    __pyx_cur_scope->__pyx_t_0 = __pyx_t_2;
    __pyx_cur_scope->__pyx_t_1 = __pyx_t_3;
    __Pyx_XGIVEREF(__pyx_r);
    __Pyx_RefNannyFinishContext();
    /* return from generator, yielding value */
    __pyx_generator->resume_label = 1;
    return __pyx_r;
    __pyx_L6_resume_from_yield:;
    __pyx_t_2 = __pyx_cur_scope->__pyx_t_0;
    __pyx_t_3 = __pyx_cur_scope->__pyx_t_1;
    if (unlikely(!__pyx_sent_value)) __PYX_ERR(4, 150, __pyx_L1_error)
  }

  /* function exit code */
  PyErr_SetNone(PyExc_StopIteration);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("genexpr", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_r); __pyx_r = 0;
  __pyx_generator->resume_label = -1;
  __Pyx_Coroutine_clear((PyObject*)__pyx_generator);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_4from_arrays(CYTHON_UNUSED PyTypeObject *__pyx_v_cls, PyObject *__pyx_v_arrays) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_cur_scope;
  PyObject *__pyx_v_profile = NULL;
  Py_ssize_t __pyx_v_pl;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *(*__pyx_t_8)(PyObject *);
  Py_ssize_t __pyx_t_9;
  Py_ssize_t __pyx_t_10;
  __Pyx_RefNannySetupContext("from_arrays", 0);
  __pyx_cur_scope = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(__pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, __pyx_empty_tuple, NULL);
  if (unlikely(!__pyx_cur_scope)) {
    __Pyx_RefNannyFinishContext();
    return NULL;
  }
  __Pyx_GOTREF(__pyx_cur_scope);
  __pyx_cur_scope->__pyx_v_arrays = __pyx_v_arrays;
  __Pyx_INCREF(__pyx_cur_scope->__pyx_v_arrays);
  __Pyx_GIVEREF(__pyx_cur_scope->__pyx_v_arrays);

  /* "gambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */
  __pyx_t_1 = __pyx_pf_6gambit_3lib_9libgambit_4Game_11from_arrays_genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_Generator_Next(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 147, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (unlikely(__pyx_t_2 == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "object of type 'NoneType' has no len()");
    __PYX_ERR(4, 147, __pyx_L1_error)
  }
  __pyx_t_3 = PySet_GET_SIZE(__pyx_t_2); if (unlikely(__pyx_t_3 == -1)) __PYX_ERR(4, 147, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = ((__pyx_t_3 > 1) != 0);
  if (__pyx_t_4) {

    /* "gambit/lib/game.pxi":148
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 *             raise ValueError("All specified arrays must have the same shape")             # <<<<<<<<<<<<<<
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__95, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 148, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __PYX_ERR(4, 148, __pyx_L1_error)

    /* "gambit/lib/game.pxi":147
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:             # <<<<<<<<<<<<<<
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 */
  }

  /* "gambit/lib/game.pxi":149
 *         if len(set(a.shape for a in arrays)) > 1:
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)             # <<<<<<<<<<<<<<
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])
 *                                          for i in xrange(len(g.players)))):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_n_s_new_table); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_arrays, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_shape); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 149, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_6);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_1))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_1);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_1);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_1, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_1, __pyx_t_6); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 149, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_GOTREF(__pyx_t_2);
  } else {
    __pyx_t_7 = PyTuple_New(1+1); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 0+1, __pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 149, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6gambit_3lib_9libgambit_Game))))) __PYX_ERR(4, 149, __pyx_L1_error)
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_cur_scope->__pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in xrange(len(g.players)))):
 *             for pl in xrange(len(g.players)):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_itertools); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_product); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __pyx_pf_6gambit_3lib_9libgambit_4Game_11from_arrays_3genexpr(((PyObject*)__pyx_cur_scope)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_7 = PySequence_Tuple(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_7, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 150, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_7 = __pyx_t_2; __Pyx_INCREF(__pyx_t_7); __pyx_t_3 = 0;
    __pyx_t_8 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_7 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_7)) __PYX_ERR(4, 150, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_7);
    __pyx_t_8 = Py_TYPE(__pyx_t_7)->tp_iternext; if (unlikely(!__pyx_t_8)) __PYX_ERR(4, 150, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_8)) {
      if (likely(PyList_CheckExact(__pyx_t_7))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(4, 150, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_7)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_7, __pyx_t_3); __Pyx_INCREF(__pyx_t_2); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(4, 150, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_7, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 150, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_8(__pyx_t_7);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 150, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_profile, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/game.pxi":152
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])
 *                                          for i in xrange(len(g.players)))):
 *             for pl in xrange(len(g.players)):             # <<<<<<<<<<<<<<
 *                 g[profile][pl] = arrays[pl][profile]
 *         return g
 */
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_cur_scope->__pyx_v_g), __pyx_n_s_players); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 152, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_9 = PyObject_Length(__pyx_t_2); if (unlikely(__pyx_t_9 == -1)) __PYX_ERR(4, 152, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    for (__pyx_t_10 = 0; __pyx_t_10 < __pyx_t_9; __pyx_t_10+=1) {
      __pyx_v_pl = __pyx_t_10;

      /* "gambit/lib/game.pxi":153
 *                                          for i in xrange(len(g.players)))):
 *             for pl in xrange(len(g.players)):
 *                 g[profile][pl] = arrays[pl][profile]             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
      __pyx_t_2 = __Pyx_GetItemInt_Tuple(__pyx_cur_scope->__pyx_v_arrays, __pyx_v_pl, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = PyObject_GetItem(__pyx_t_2, __pyx_v_profile); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_2 = PyObject_GetItem(((PyObject *)__pyx_cur_scope->__pyx_v_g), __pyx_v_profile); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 153, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      if (unlikely(__Pyx_SetItemInt(__pyx_t_2, __pyx_v_pl, __pyx_t_1, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1) < 0)) __PYX_ERR(4, 153, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    }

    /* "gambit/lib/game.pxi":150
 *             raise ValueError("All specified arrays must have the same shape")
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])             # <<<<<<<<<<<<<<
 *                                          for i in xrange(len(g.players)))):
 *             for pl in xrange(len(g.players)):
 */
  }
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

  /* "gambit/lib/game.pxi":154
 *             for pl in xrange(len(g.players)):
 *                 g[profile][pl] = arrays[pl][profile]
 *         return g             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_cur_scope->__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_cur_scope->__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.from_arrays", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_profile);
  __Pyx_DECREF(((PyObject *)__pyx_cur_scope));
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":158
 * 
 *     @classmethod
 *     def read_game(cls, char *fn):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7read_game(PyObject *__pyx_v_cls, PyObject *__pyx_arg_fn); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7read_game(PyObject *__pyx_v_cls, PyObject *__pyx_arg_fn) {
  char *__pyx_v_fn;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("read_game (wrapper)", 0);
  assert(__pyx_arg_fn); {
    __pyx_v_fn = __Pyx_PyObject_AsString(__pyx_arg_fn); if (unlikely((!__pyx_v_fn) && PyErr_Occurred())) __PYX_ERR(4, 158, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.read_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_6read_game(((PyTypeObject*)__pyx_v_cls), ((char *)__pyx_v_fn));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_6read_game(PyTypeObject *__pyx_v_cls, char *__pyx_v_fn) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  GameObjectPtr<GameRep> __pyx_t_5;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  __Pyx_RefNannySetupContext("read_game", 0);

  /* "gambit/lib/game.pxi":160
 *     def read_game(cls, char *fn):
 *         cdef Game g
 *         g = cls()             # <<<<<<<<<<<<<<
 *         try:
 *             g.game = ReadGame(fn)
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6gambit_3lib_9libgambit_Game))))) __PYX_ERR(4, 160, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":161
 *         cdef Game g
 *         g = cls()
 *         try:             # <<<<<<<<<<<<<<
 *             g.game = ReadGame(fn)
 *         except IOError as e:
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "gambit/lib/game.pxi":162
 *         g = cls()
 *         try:
 *             g.game = ReadGame(fn)             # <<<<<<<<<<<<<<
 *         except IOError as e:
 *             raise IOError("Unable to read game from file '%s': %s" %
 */
      try {
        __pyx_t_5 = ReadGame(__pyx_v_fn);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IOError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
        __PYX_ERR(4, 162, __pyx_L3_error)
      }
      __pyx_v_g->game = __pyx_t_5;

      /* "gambit/lib/game.pxi":161
 *         cdef Game g
 *         g = cls()
 *         try:             # <<<<<<<<<<<<<<
 *             g.game = ReadGame(fn)
 *         except IOError as e:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "gambit/lib/game.pxi":163
 *         try:
 *             g.game = ReadGame(fn)
 *         except IOError as e:             # <<<<<<<<<<<<<<
 *             raise IOError("Unable to read game from file '%s': %s" %
 *                         (fn, e))
 */
    __pyx_t_6 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_IOError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("gambit.lib.libgambit.Game.read_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_7, &__pyx_t_8) < 0) __PYX_ERR(4, 163, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(__pyx_t_7);
      __pyx_v_e = __pyx_t_7;

      /* "gambit/lib/game.pxi":165
 *         except IOError as e:
 *             raise IOError("Unable to read game from file '%s': %s" %
 *                         (fn, e))             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
      __pyx_t_9 = __Pyx_PyBytes_FromString(__pyx_v_fn); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 165, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) __PYX_ERR(4, 165, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __Pyx_INCREF(__pyx_v_e);
      __Pyx_GIVEREF(__pyx_v_e);
      PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_v_e);
      __pyx_t_9 = 0;

      /* "gambit/lib/game.pxi":164
 *             g.game = ReadGame(fn)
 *         except IOError as e:
 *             raise IOError("Unable to read game from file '%s': %s" %             # <<<<<<<<<<<<<<
 *                         (fn, e))
 *         return g
 */
      __pyx_t_9 = __Pyx_PyString_Format(__pyx_kp_s_Unable_to_read_game_from_file_s, __pyx_t_10); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 164, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) __PYX_ERR(4, 164, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_10, NULL); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 164, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __PYX_ERR(4, 164, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "gambit/lib/game.pxi":161
 *         cdef Game g
 *         g = cls()
 *         try:             # <<<<<<<<<<<<<<
 *             g.game = ReadGame(fn)
 *         except IOError as e:
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "gambit/lib/game.pxi":166
 *             raise IOError("Unable to read game from file '%s': %s" %
 *                         (fn, e))
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     @classmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":158
 * 
 *     @classmethod
 *     def read_game(cls, char *fn):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.read_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XDECREF(__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":169
 * 
 *     @classmethod
 *     def parse_game(cls, char *s):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_9parse_game(PyObject *__pyx_v_cls, PyObject *__pyx_arg_s); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_9parse_game(PyObject *__pyx_v_cls, PyObject *__pyx_arg_s) {
  char *__pyx_v_s;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("parse_game (wrapper)", 0);
  assert(__pyx_arg_s); {
    __pyx_v_s = __Pyx_PyObject_AsString(__pyx_arg_s); if (unlikely((!__pyx_v_s) && PyErr_Occurred())) __PYX_ERR(4, 169, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.parse_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_8parse_game(((PyTypeObject*)__pyx_v_cls), ((char *)__pyx_v_s));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_8parse_game(PyTypeObject *__pyx_v_cls, char *__pyx_v_s) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("parse_game", 0);

  /* "gambit/lib/game.pxi":171
 *     def parse_game(cls, char *s):
 *         cdef Game g
 *         g = cls()             # <<<<<<<<<<<<<<
 *         g.game = ParseGame(s)
 *         return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_v_cls), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 171, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6gambit_3lib_9libgambit_Game))))) __PYX_ERR(4, 171, __pyx_L1_error)
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":172
 *         cdef Game g
 *         g = cls()
 *         g.game = ParseGame(s)             # <<<<<<<<<<<<<<
 *         return g
 * 
 */
  try {
    __pyx_t_2 = ParseGame(__pyx_v_s);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IOError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
    __PYX_ERR(4, 172, __pyx_L1_error)
  }
  __pyx_v_g->game = __pyx_t_2;

  /* "gambit/lib/game.pxi":173
 *         g = cls()
 *         g.game = ParseGame(s)
 *         return g             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":169
 * 
 *     @classmethod
 *     def parse_game(cls, char *s):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.parse_game", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":175
 *         return g
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<Game '%s'>" % self.title
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_11__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_11__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_10__str__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10__str__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "gambit/lib/game.pxi":176
 * 
 *     def __str__(self):
 *         return "<Game '%s'>" % self.title             # <<<<<<<<<<<<<<
 * 
 *     def __repr__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_title); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_Game_s, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 176, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":175
 *         return g
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<Game '%s'>" % self.title
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":178
 *         return "<Game '%s'>" % self.title
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_13__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_13__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_12__repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_12__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/game.pxi":179
 * 
 *     def __repr__(self):
 *         return self.write()             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(Game self, other, whichop):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_write); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 179, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_3); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 179, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  } else {
    __pyx_t_1 = __Pyx_PyObject_CallNoArg(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 179, __pyx_L1_error)
  }
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":178
 *         return "<Game '%s'>" % self.title
 * 
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return self.write()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":181
 *         return self.write()
 * 
 *     def __richcmp__(Game self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Game):
 *             if whichop == 2:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_15__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_15__richcmp__(PyObject *__pyx_v_self, PyObject *__pyx_v_other, int __pyx_arg_whichop) {
  PyObject *__pyx_v_whichop = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__richcmp__ (wrapper)", 0);
  __pyx_v_whichop = __Pyx_PyInt_From_int(__pyx_arg_whichop); if (unlikely(!__pyx_v_whichop)) __PYX_ERR(4, 181, __pyx_L3_error)
  __Pyx_GOTREF(__pyx_v_whichop);
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_self), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "self", 0))) __PYX_ERR(4, 181, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_14__richcmp__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), ((PyObject *)__pyx_v_other), ((PyObject *)__pyx_v_whichop));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_whichop);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_14__richcmp__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_other, PyObject *__pyx_v_whichop) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  GameRep *__pyx_t_4;
  GameRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("__richcmp__", 0);

  /* "gambit/lib/game.pxi":182
 * 
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 */
  __pyx_t_1 = __Pyx_TypeCheck(__pyx_v_other, __pyx_ptype_6gambit_3lib_9libgambit_Game); 
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":183
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 183, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 183, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/game.pxi":184
 *         if isinstance(other, Game):
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return self.game.deref() != ((<Game>other).game).deref()
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_4 = __pyx_v_self->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(4, 184, __pyx_L1_error)
      }
      try {
        __pyx_t_5 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_other)->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(4, 184, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_4 == __pyx_t_5)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 184, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/game.pxi":183
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/game.pxi":185
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() != ((<Game>other).game).deref()
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 185, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/game.pxi":186
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:
 *                 return self.game.deref() != ((<Game>other).game).deref()             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      try {
        __pyx_t_5 = __pyx_v_self->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(4, 186, __pyx_L1_error)
      }
      try {
        __pyx_t_4 = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_other)->game.operator->();
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        __PYX_ERR(4, 186, __pyx_L1_error)
      }
      __pyx_t_3 = __Pyx_PyBool_FromLong((__pyx_t_5 != __pyx_t_4)); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 186, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      goto __pyx_L0;

      /* "gambit/lib/game.pxi":185
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return self.game.deref() != ((<Game>other).game).deref()
 *             else:
 */
    }

    /* "gambit/lib/game.pxi":188
 *                 return self.game.deref() != ((<Game>other).game).deref()
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *         else:
 *             if whichop == 2:
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(4, 188, __pyx_L1_error)
    }

    /* "gambit/lib/game.pxi":182
 * 
 *     def __richcmp__(Game self, other, whichop):
 *         if isinstance(other, Game):             # <<<<<<<<<<<<<<
 *             if whichop == 2:
 *                 return self.game.deref() == ((<Game>other).game).deref()
 */
  }

  /* "gambit/lib/game.pxi":190
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
  /*else*/ {
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_2, 2, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 190, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 190, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/game.pxi":191
 *         else:
 *             if whichop == 2:
 *                 return False             # <<<<<<<<<<<<<<
 *             elif whichop == 3:
 *                 return True
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_False);
      __pyx_r = Py_False;
      goto __pyx_L0;

      /* "gambit/lib/game.pxi":190
 *                 raise NotImplementedError
 *         else:
 *             if whichop == 2:             # <<<<<<<<<<<<<<
 *                 return False
 *             elif whichop == 3:
 */
    }

    /* "gambit/lib/game.pxi":192
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    __pyx_t_3 = __Pyx_PyInt_EqObjC(__pyx_v_whichop, __pyx_int_3, 3, 0); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 192, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "gambit/lib/game.pxi":193
 *                 return False
 *             elif whichop == 3:
 *                 return True             # <<<<<<<<<<<<<<
 *             else:
 *                 raise NotImplementedError
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(Py_True);
      __pyx_r = Py_True;
      goto __pyx_L0;

      /* "gambit/lib/game.pxi":192
 *             if whichop == 2:
 *                 return False
 *             elif whichop == 3:             # <<<<<<<<<<<<<<
 *                 return True
 *             else:
 */
    }

    /* "gambit/lib/game.pxi":195
 *                 return True
 *             else:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 * 
 *     def __hash__(self):
 */
    /*else*/ {
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      __PYX_ERR(4, 195, __pyx_L1_error)
    }
  }

  /* "gambit/lib/game.pxi":181
 *         return self.write()
 * 
 *     def __richcmp__(Game self, other, whichop):             # <<<<<<<<<<<<<<
 *         if isinstance(other, Game):
 *             if whichop == 2:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.__richcmp__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":197
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.game.deref())
 * 
 */

/* Python wrapper */
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_4Game_17__hash__(PyObject *__pyx_v_self); /*proto*/
static Py_hash_t __pyx_pw_6gambit_3lib_9libgambit_4Game_17__hash__(PyObject *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__hash__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_16__hash__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_hash_t __pyx_pf_6gambit_3lib_9libgambit_4Game_16__hash__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  Py_hash_t __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_hash_t __pyx_t_4;
  __Pyx_RefNannySetupContext("__hash__", 0);

  /* "gambit/lib/game.pxi":198
 * 
 *     def __hash__(self):
 *         return long(<long>self.game.deref())             # <<<<<<<<<<<<<<
 * 
 *     property is_tree:
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 198, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyInt_From_long(((long)__pyx_t_1)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)(&PyLong_Type)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 198, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = __Pyx_PyInt_AsHash_t(__pyx_t_2); if (unlikely((__pyx_t_4 == (Py_hash_t)-1) && PyErr_Occurred())) __PYX_ERR(4, 198, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_4;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":197
 *                 raise NotImplementedError
 * 
 *     def __hash__(self):             # <<<<<<<<<<<<<<
 *         return long(<long>self.game.deref())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.__hash__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  if (unlikely(__pyx_r == -1) && !PyErr_Occurred()) __pyx_r = -2;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":201
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.game.deref().IsTree() != 0 else False
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7is_tree_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7is_tree_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_7is_tree___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7is_tree___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameRep *__pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":202
 *     property is_tree:
 *         def __get__(self):
 *             return True if self.game.deref().IsTree() != 0 else False             # <<<<<<<<<<<<<<
 * 
 *     property title:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_2 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 202, __pyx_L1_error)
  }
  if (((__pyx_t_2->IsTree() != 0) != 0)) {
    __Pyx_INCREF(Py_True);
    __pyx_t_1 = Py_True;
  } else {
    __Pyx_INCREF(Py_False);
    __pyx_t_1 = Py_False;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":201
 * 
 *     property is_tree:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return True if self.game.deref().IsTree() != 0 else False
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.is_tree.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":205
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetTitle().c_str()
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_5title_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_5title_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_5title___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_5title___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":206
 *     property title:
 *         def __get__(self):
 *             return self.game.deref().GetTitle().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 206, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetTitle().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 206, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":205
 * 
 *     property title:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetTitle().c_str()
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.title.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":207
 *         def __get__(self):
 *             return self.game.deref().GetTitle().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_4Game_5title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_4Game_5title_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(4, 207, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.title.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_5title_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_4Game_5title_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/game.pxi":209
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.game.deref().SetTitle(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/game.pxi":210
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.game.deref().SetTitle(s)             # <<<<<<<<<<<<<<
 * 
 *     property comment:
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 210, __pyx_L1_error)
  }
  __pyx_t_1->SetTitle(__pyx_v_s);

  /* "gambit/lib/game.pxi":207
 *         def __get__(self):
 *             return self.game.deref().GetTitle().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.title.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":213
 * 
 *     property comment:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetComment().c_str()
 *         def __set__(self, char *value):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7comment_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7comment_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_7comment___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7comment___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":214
 *     property comment:
 *         def __get__(self):
 *             return self.game.deref().GetComment().c_str()             # <<<<<<<<<<<<<<
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 214, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_1->GetComment().c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 214, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":213
 * 
 *     property comment:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().GetComment().c_str()
 *         def __set__(self, char *value):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.comment.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":215
 *         def __get__(self):
 *             return self.game.deref().GetComment().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_4Game_7comment_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_4Game_7comment_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_arg_value) {
  char *__pyx_v_value;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  assert(__pyx_arg_value); {
    __pyx_v_value = __Pyx_PyObject_AsString(__pyx_arg_value); if (unlikely((!__pyx_v_value) && PyErr_Occurred())) __PYX_ERR(4, 215, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.comment.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_7comment_2__set__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), ((char *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_4Game_7comment_2__set__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, char *__pyx_v_value) {
  string __pyx_v_s;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  __Pyx_RefNannySetupContext("__set__", 0);

  /* "gambit/lib/game.pxi":217
 *         def __set__(self, char *value):
 *             cdef cxx_string s
 *             s.assign(value)             # <<<<<<<<<<<<<<
 *             self.game.deref().SetComment(s)
 * 
 */
  __pyx_v_s.assign(__pyx_v_value);

  /* "gambit/lib/game.pxi":218
 *             cdef cxx_string s
 *             s.assign(value)
 *             self.game.deref().SetComment(s)             # <<<<<<<<<<<<<<
 * 
 *     property actions:
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 218, __pyx_L1_error)
  }
  __pyx_t_1->SetComment(__pyx_v_s);

  /* "gambit/lib/game.pxi":215
 *         def __get__(self):
 *             return self.game.deref().GetComment().c_str()
 *         def __set__(self, char *value):             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.comment.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":221
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameActions a
 *             if self.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7actions_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7actions_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_7actions___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7actions___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *__pyx_v_a = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameObjectPtr<GameRep> __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":223
 *         def __get__(self):
 *             cdef GameActions a
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 a = GameActions()
 *                 a.game = self.game
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 223, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 223, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":224
 *             cdef GameActions a
 *             if self.is_tree:
 *                 a = GameActions()             # <<<<<<<<<<<<<<
 *                 a.game = self.game
 *                 return a
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_GameActions), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 224, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_a = ((struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gambit/lib/game.pxi":225
 *             if self.is_tree:
 *                 a = GameActions()
 *                 a.game = self.game             # <<<<<<<<<<<<<<
 *                 return a
 *             raise UndefinedOperationError("Operation only defined for "\
 */
    __pyx_t_3 = __pyx_v_self->game;
    __pyx_v_a->game = __pyx_t_3;

    /* "gambit/lib/game.pxi":226
 *                 a = GameActions()
 *                 a.game = self.game
 *                 return a             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Operation only defined for "\
 *                                            "games with a tree representation")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_a));
    __pyx_r = ((PyObject *)__pyx_v_a);
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":223
 *         def __get__(self):
 *             cdef GameActions a
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 a = GameActions()
 *                 a.game = self.game
 */
  }

  /* "gambit/lib/game.pxi":227
 *                 a.game = self.game
 *                 return a
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__96, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(4, 227, __pyx_L1_error)

  /* "gambit/lib/game.pxi":221
 * 
 *     property actions:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameActions a
 *             if self.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.actions.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_a);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":231
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameInfosets i
 *             if self.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_8infosets_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_8infosets_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_8infosets___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_8infosets___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *__pyx_v_i = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameObjectPtr<GameRep> __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":233
 *         def __get__(self):
 *             cdef GameInfosets i
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 i = GameInfosets()
 *                 i.game = self.game
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 233, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 233, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":234
 *             cdef GameInfosets i
 *             if self.is_tree:
 *                 i = GameInfosets()             # <<<<<<<<<<<<<<
 *                 i.game = self.game
 *                 return i
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_GameInfosets), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 234, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_i = ((struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gambit/lib/game.pxi":235
 *             if self.is_tree:
 *                 i = GameInfosets()
 *                 i.game = self.game             # <<<<<<<<<<<<<<
 *                 return i
 *             raise UndefinedOperationError("Operation only defined for "\
 */
    __pyx_t_3 = __pyx_v_self->game;
    __pyx_v_i->game = __pyx_t_3;

    /* "gambit/lib/game.pxi":236
 *                 i = GameInfosets()
 *                 i.game = self.game
 *                 return i             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Operation only defined for "\
 *                                            "games with a tree representation")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_i));
    __pyx_r = ((PyObject *)__pyx_v_i);
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":233
 *         def __get__(self):
 *             cdef GameInfosets i
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 i = GameInfosets()
 *                 i.game = self.game
 */
  }

  /* "gambit/lib/game.pxi":237
 *                 i.game = self.game
 *                 return i
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__97, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(4, 237, __pyx_L1_error)

  /* "gambit/lib/game.pxi":231
 * 
 *     property infosets:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameInfosets i
 *             if self.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.infosets.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":241
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7players_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_7players_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_7players___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_7players___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Players *__pyx_v_p = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":243
 *         def __get__(self):
 *             cdef Players p
 *             p = Players()             # <<<<<<<<<<<<<<
 *             p.game = self.game
 *             return p
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Players), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 243, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Players *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":244
 *             cdef Players p
 *             p = Players()
 *             p.game = self.game             # <<<<<<<<<<<<<<
 *             return p
 * 
 */
  __pyx_t_2 = __pyx_v_self->game;
  __pyx_v_p->game = __pyx_t_2;

  /* "gambit/lib/game.pxi":245
 *             p = Players()
 *             p.game = self.game
 *             return p             # <<<<<<<<<<<<<<
 * 
 *     property strategies:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_p));
  __pyx_r = ((PyObject *)__pyx_v_p);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":241
 * 
 *     property players:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Players p
 *             p = Players()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.players.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":248
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameStrategies s
 *             s = GameStrategies()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_10strategies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_10strategies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_10strategies___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10strategies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *__pyx_v_s = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":250
 *         def __get__(self):
 *             cdef GameStrategies s
 *             s = GameStrategies()             # <<<<<<<<<<<<<<
 *             s.game = self.game
 *             return s
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_GameStrategies), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 250, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_s = ((struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":251
 *             cdef GameStrategies s
 *             s = GameStrategies()
 *             s.game = self.game             # <<<<<<<<<<<<<<
 *             return s
 * 
 */
  __pyx_t_2 = __pyx_v_self->game;
  __pyx_v_s->game = __pyx_t_2;

  /* "gambit/lib/game.pxi":252
 *             s = GameStrategies()
 *             s.game = self.game
 *             return s             # <<<<<<<<<<<<<<
 * 
 *     property outcomes:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_s));
  __pyx_r = ((PyObject *)__pyx_v_s);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":248
 * 
 *     property strategies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef GameStrategies s
 *             s = GameStrategies()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.strategies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":255
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcomes c
 *             c = Outcomes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_8outcomes_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_8outcomes_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_8outcomes___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_8outcomes___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *__pyx_v_c = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  GameObjectPtr<GameRep> __pyx_t_2;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":257
 *         def __get__(self):
 *             cdef Outcomes c
 *             c = Outcomes()             # <<<<<<<<<<<<<<
 *             c.game = self.game
 *             return c
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcomes), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 257, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_c = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":258
 *             cdef Outcomes c
 *             c = Outcomes()
 *             c.game = self.game             # <<<<<<<<<<<<<<
 *             return c
 * 
 */
  __pyx_t_2 = __pyx_v_self->game;
  __pyx_v_c->game = __pyx_t_2;

  /* "gambit/lib/game.pxi":259
 *             c = Outcomes()
 *             c.game = self.game
 *             return c             # <<<<<<<<<<<<<<
 * 
 *     property contingencies:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_c));
  __pyx_r = ((PyObject *)__pyx_v_c);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":255
 * 
 *     property outcomes:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Outcomes c
 *             c = Outcomes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.outcomes.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_c);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":262
 * 
 *     property contingencies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return gambit.gameiter.Contingencies(self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_13contingencies_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_13contingencies_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_13contingencies___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_13contingencies___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":263
 *     property contingencies:
 *         def __get__(self):
 *             return gambit.gameiter.Contingencies(self)             # <<<<<<<<<<<<<<
 * 
 *     property root:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_gambit); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_gameiter); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_Contingencies); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 263, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_3 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_3)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_3) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_4 = PyTuple_New(1+1); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_3); PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3); __pyx_t_3 = NULL;
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    PyTuple_SET_ITEM(__pyx_t_4, 0+1, ((PyObject *)__pyx_v_self));
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 263, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":262
 * 
 *     property contingencies:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return gambit.gameiter.Contingencies(self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.contingencies.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":266
 * 
 *     property root:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.is_tree:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_4root_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_4root_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_4root___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_4root___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *__pyx_v_n = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":268
 *         def __get__(self):
 *             cdef Node n
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 268, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 268, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":269
 *             cdef Node n
 *             if self.is_tree:
 *                 n = Node()             # <<<<<<<<<<<<<<
 *                 n.node = self.game.deref().GetRoot()
 *                 return n
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Node), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 269, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_n = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "gambit/lib/game.pxi":270
 *             if self.is_tree:
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()             # <<<<<<<<<<<<<<
 *                 return n
 *             raise UndefinedOperationError("Operation only defined for "\
 */
    try {
      __pyx_t_3 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(4, 270, __pyx_L1_error)
    }
    __pyx_v_n->node = __pyx_t_3->GetRoot();

    /* "gambit/lib/game.pxi":271
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()
 *                 return n             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Operation only defined for "\
 *                                            "games with a tree representation")
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_n));
    __pyx_r = ((PyObject *)__pyx_v_n);
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":268
 *         def __get__(self):
 *             cdef Node n
 *             if self.is_tree:             # <<<<<<<<<<<<<<
 *                 n = Node()
 *                 n.node = self.game.deref().GetRoot()
 */
  }

  /* "gambit/lib/game.pxi":272
 *                 n.node = self.game.deref().GetRoot()
 *                 return n
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__98, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_Raise(__pyx_t_4, 0, 0, 0);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __PYX_ERR(4, 272, __pyx_L1_error)

  /* "gambit/lib/game.pxi":266
 * 
 *     property root:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Node n
 *             if self.is_tree:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.root.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_n);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":276
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsConstSum()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_12is_const_sum_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_12is_const_sum_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_12is_const_sum___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_12is_const_sum___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":277
 *     property is_const_sum:
 *         def __get__(self):
 *             return self.game.deref().IsConstSum()             # <<<<<<<<<<<<<<
 * 
 *     property is_perfect_recall:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 277, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsConstSum()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 277, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":276
 * 
 *     property is_const_sum:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsConstSum()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.is_const_sum.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":280
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsPerfectRecall()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_17is_perfect_recall_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_17is_perfect_recall_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_17is_perfect_recall___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_17is_perfect_recall___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":281
 *     property is_perfect_recall:
 *         def __get__(self):
 *             return self.game.deref().IsPerfectRecall()             # <<<<<<<<<<<<<<
 * 
 *     property min_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 281, __pyx_L1_error)
  }
  __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_t_1->IsPerfectRecall()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 281, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":280
 * 
 *     property is_perfect_recall:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.game.deref().IsPerfectRecall()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.is_perfect_recall.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":284
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Rational(rat_str(self.game.deref().GetMinPayoff(0)).c_str())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_10min_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_10min_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_10min_payoff___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10min_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":285
 *     property min_payoff:
 *         def __get__(self):
 *             return Rational(rat_str(self.game.deref().GetMinPayoff(0)).c_str())             # <<<<<<<<<<<<<<
 * 
 *     property max_payoff:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 285, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_t_3->GetMinPayoff(0)).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 285, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 285, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":284
 * 
 *     property min_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Rational(rat_str(self.game.deref().GetMinPayoff(0)).c_str())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.min_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":288
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Rational(rat_str(self.game.deref().GetMaxPayoff(0)).c_str())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_10max_payoff_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_10max_payoff_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_10max_payoff___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_10max_payoff___get__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  GameRep *__pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/game.pxi":289
 *     property max_payoff:
 *         def __get__(self):
 *             return Rational(rat_str(self.game.deref().GetMaxPayoff(0)).c_str())             # <<<<<<<<<<<<<<
 * 
 *     def _get_contingency(self, *args):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_Rational); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  try {
    __pyx_t_3 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 289, __pyx_L1_error)
  }
  __pyx_t_4 = __Pyx_PyBytes_FromString(lexical_cast<std::string>(__pyx_t_3->GetMaxPayoff(0)).c_str()); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 289, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_2))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_2);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_2, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_1 = __Pyx_PyObject_CallOneArg(__pyx_t_2, __pyx_t_4); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 289, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_GOTREF(__pyx_t_1);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) __PYX_ERR(4, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_6, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 289, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":288
 * 
 *     property max_payoff:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return Rational(rat_str(self.game.deref().GetMaxPayoff(0)).c_str())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.max_payoff.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":291
 *             return Rational(rat_str(self.game.deref().GetMaxPayoff(0)).c_str())
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_19_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_19_get_contingency(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_args = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("_get_contingency (wrapper)", 0);
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "_get_contingency", 0))) return NULL;
  __Pyx_INCREF(__pyx_args);
  __pyx_v_args = __pyx_args;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_18_get_contingency(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_args);

  /* function exit code */
  __Pyx_XDECREF(__pyx_v_args);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_18_get_contingency(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_args) {
  PureStrategyProfile *__pyx_v_psp;
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *__pyx_v_outcome = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *__pyx_v_tree_outcome = 0;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  GameRep *__pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  GameObjectPtr<GamePlayerRep> __pyx_t_7;
  GamePlayerRep *__pyx_t_8;
  GameObjectPtr<GameStrategyRep> __pyx_t_9;
  int __pyx_t_10;
  GameObjectPtr<GameRep> __pyx_t_11;
  __Pyx_RefNannySetupContext("_get_contingency", 0);

  /* "gambit/lib/game.pxi":295
 *         cdef Outcome outcome
 *         cdef TreeGameOutcome tree_outcome
 *         psp = new c_PureStrategyProfile(self.game.deref().NewPureStrategyProfile())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  try {
    __pyx_t_1 = __pyx_v_self->game.operator->();
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(4, 295, __pyx_L1_error)
  }
  __pyx_v_psp = new PureStrategyProfile(__pyx_t_1->NewPureStrategyProfile());

  /* "gambit/lib/game.pxi":298
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_2 = __pyx_int_0;
  __pyx_t_3 = __pyx_v_args; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
  for (;;) {
    if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_5); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 298, __pyx_L1_error)
    #else
    __pyx_t_5 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    #endif
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_2, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 298, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_2);
    __pyx_t_2 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "gambit/lib/game.pxi":299
 * 
 *         for (pl, st) in enumerate(args):
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))             # <<<<<<<<<<<<<<
 * 
 *         if self.is_tree:
 */
    try {
      __pyx_t_1 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(4, 299, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_pl, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_7 = __pyx_t_1->GetPlayer(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(4, 299, __pyx_L1_error)
    }
    try {
      __pyx_t_8 = __pyx_t_7.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(4, 299, __pyx_L1_error)
    }
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_v_st, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 299, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(4, 299, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    try {
      __pyx_t_9 = __pyx_t_8->GetStrategy(__pyx_t_6);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
      __PYX_ERR(4, 299, __pyx_L1_error)
    }
    __pyx_v_psp->operator->()->SetStrategy(__pyx_t_9);

    /* "gambit/lib/game.pxi":298
 * 
 * 
 *         for (pl, st) in enumerate(args):             # <<<<<<<<<<<<<<
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/game.pxi":301
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_10 < 0)) __PYX_ERR(4, 301, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_10) {

    /* "gambit/lib/game.pxi":302
 * 
 *         if self.is_tree:
 *             tree_outcome = TreeGameOutcome()             # <<<<<<<<<<<<<<
 *             tree_outcome.psp = psp
 *             tree_outcome.c_game = self.game
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_TreeGameOutcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 302, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_tree_outcome = ((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/game.pxi":303
 *         if self.is_tree:
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp             # <<<<<<<<<<<<<<
 *             tree_outcome.c_game = self.game
 *             return tree_outcome
 */
    __pyx_v_tree_outcome->psp = __pyx_v_psp;

    /* "gambit/lib/game.pxi":304
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp
 *             tree_outcome.c_game = self.game             # <<<<<<<<<<<<<<
 *             return tree_outcome
 *         else:
 */
    __pyx_t_11 = __pyx_v_self->game;
    __pyx_v_tree_outcome->c_game = __pyx_t_11;

    /* "gambit/lib/game.pxi":305
 *             tree_outcome.psp = psp
 *             tree_outcome.c_game = self.game
 *             return tree_outcome             # <<<<<<<<<<<<<<
 *         else:
 *             outcome = Outcome()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_tree_outcome));
    __pyx_r = ((PyObject *)__pyx_v_tree_outcome);
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":301
 *             psp.deref().SetStrategy(self.game.deref().GetPlayer(pl+1).deref().GetStrategy(st+1))
 * 
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             tree_outcome = TreeGameOutcome()
 *             tree_outcome.psp = psp
 */
  }

  /* "gambit/lib/game.pxi":307
 *             return tree_outcome
 *         else:
 *             outcome = Outcome()             # <<<<<<<<<<<<<<
 *             outcome.outcome = psp.deref().GetOutcome()
 *             del psp
 */
  /*else*/ {
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Outcome), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 307, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_v_outcome = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)__pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/game.pxi":308
 *         else:
 *             outcome = Outcome()
 *             outcome.outcome = psp.deref().GetOutcome()             # <<<<<<<<<<<<<<
 *             del psp
 *             return outcome
 */
    __pyx_v_outcome->outcome = __pyx_v_psp->operator->()->GetOutcome();

    /* "gambit/lib/game.pxi":309
 *             outcome = Outcome()
 *             outcome.outcome = psp.deref().GetOutcome()
 *             del psp             # <<<<<<<<<<<<<<
 *             return outcome
 * 
 */
    delete __pyx_v_psp;

    /* "gambit/lib/game.pxi":310
 *             outcome.outcome = psp.deref().GetOutcome()
 *             del psp
 *             return outcome             # <<<<<<<<<<<<<<
 * 
 *     # As of Cython 0.11.2, cython does not support the * notation for the argument
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_outcome));
    __pyx_r = ((PyObject *)__pyx_v_outcome);
    goto __pyx_L0;
  }

  /* "gambit/lib/game.pxi":291
 *             return Rational(rat_str(self.game.deref().GetMaxPayoff(0)).c_str())
 * 
 *     def _get_contingency(self, *args):             # <<<<<<<<<<<<<<
 *         cdef c_PureStrategyProfile *psp
 *         cdef Outcome outcome
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game._get_contingency", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_outcome);
  __Pyx_XDECREF((PyObject *)__pyx_v_tree_outcome);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":315
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_21__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_20__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_20__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_v_cont = NULL;
  PyObject *__pyx_v_pl = NULL;
  PyObject *__pyx_v_st = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *(*__pyx_t_11)(PyObject *);
  int __pyx_t_12;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  PyObject *(*__pyx_t_16)(PyObject *);
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/game.pxi":316
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
  {
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "gambit/lib/game.pxi":317
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      __pyx_t_4 = PyObject_Length(__pyx_v_i); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(4, 317, __pyx_L3_error)
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 317, __pyx_L3_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(4, 317, __pyx_L3_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = ((__pyx_t_4 != __pyx_t_6) != 0);
      if (__pyx_t_7) {

        /* "gambit/lib/game.pxi":318
 *         try:
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"             # <<<<<<<<<<<<<<
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 */
        __Pyx_Raise(__pyx_builtin_KeyError, __pyx_kp_s_Number_of_strategies_is_not_equa, 0, 0);
        __PYX_ERR(4, 318, __pyx_L3_error)

        /* "gambit/lib/game.pxi":317
 *     def __getitem__(self, i):
 *         try:
 *             if len(i) != len(self.players):             # <<<<<<<<<<<<<<
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 */
      }

      /* "gambit/lib/game.pxi":316
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_PyThreadState_assign
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "gambit/lib/game.pxi":319
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:             # <<<<<<<<<<<<<<
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 */
    __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_8) {
      __Pyx_AddTraceback("gambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_9, &__pyx_t_10) < 0) __PYX_ERR(4, 319, __pyx_L5_except_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_10);

      /* "gambit/lib/game.pxi":320
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"             # <<<<<<<<<<<<<<
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 */
      __Pyx_Raise(__pyx_builtin_TypeError, __pyx_kp_s_contingency_must_be_a_tuple_like, 0, 0);
      __PYX_ERR(4, 320, __pyx_L5_except_error)
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "gambit/lib/game.pxi":316
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):
 *         try:             # <<<<<<<<<<<<<<
 *             if len(i) != len(self.players):
 *                 raise KeyError, "Number of strategies is not equal to the number of players"
 */
    __Pyx_PyThreadState_assign
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "gambit/lib/game.pxi":321
 *         except TypeError:
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)             # <<<<<<<<<<<<<<
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 */
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_10)) __PYX_ERR(4, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = PyObject_Length(__pyx_t_10); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(4, 321, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = PyList_New(1 * ((__pyx_t_6<0) ? 0:__pyx_t_6)); if (unlikely(!__pyx_t_10)) __PYX_ERR(4, 321, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  { Py_ssize_t __pyx_temp;
    for (__pyx_temp=0; __pyx_temp < __pyx_t_6; __pyx_temp++) {
      __Pyx_INCREF(__pyx_int_0);
      __Pyx_GIVEREF(__pyx_int_0);
      PyList_SET_ITEM(__pyx_t_10, __pyx_temp, __pyx_int_0);
    }
  }
  __pyx_v_cont = ((PyObject*)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "gambit/lib/game.pxi":322
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  __Pyx_INCREF(__pyx_int_0);
  __pyx_t_10 = __pyx_int_0;
  if (likely(PyList_CheckExact(__pyx_v_i)) || PyTuple_CheckExact(__pyx_v_i)) {
    __pyx_t_9 = __pyx_v_i; __Pyx_INCREF(__pyx_t_9); __pyx_t_6 = 0;
    __pyx_t_11 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_9 = PyObject_GetIter(__pyx_v_i); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_11 = Py_TYPE(__pyx_t_9)->tp_iternext; if (unlikely(!__pyx_t_11)) __PYX_ERR(4, 322, __pyx_L1_error)
  }
  for (;;) {
    if (likely(!__pyx_t_11)) {
      if (likely(PyList_CheckExact(__pyx_t_9))) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(4, 322, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      } else {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_9)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_9, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) __PYX_ERR(4, 322, __pyx_L1_error)
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_9, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 322, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        #endif
      }
    } else {
      __pyx_t_5 = __pyx_t_11(__pyx_t_9);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(4, 322, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    __Pyx_XDECREF_SET(__pyx_v_st, __pyx_t_5);
    __pyx_t_5 = 0;
    __Pyx_INCREF(__pyx_t_10);
    __Pyx_XDECREF_SET(__pyx_v_pl, __pyx_t_10);
    __pyx_t_5 = __Pyx_PyInt_AddObjC(__pyx_t_10, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 322, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_10);
    __pyx_t_10 = __pyx_t_5;
    __pyx_t_5 = 0;

    /* "gambit/lib/game.pxi":323
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
    __pyx_t_7 = PyInt_Check(__pyx_v_st); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (__pyx_t_12) {

      /* "gambit/lib/game.pxi":324
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      __pyx_t_5 = PyObject_RichCompare(__pyx_v_st, __pyx_int_0, Py_LT); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 324, __pyx_L1_error)
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (!__pyx_t_7) {
      } else {
        __pyx_t_12 = __pyx_t_7;
        goto __pyx_L18_bool_binop_done;
      }
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyObject_GetItem(__pyx_t_5, __pyx_v_pl); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_strategies); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_4 = PyObject_Length(__pyx_t_5); if (unlikely(__pyx_t_4 == -1)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyInt_FromSsize_t(__pyx_t_4); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_13 = PyObject_RichCompare(__pyx_v_st, __pyx_t_5, Py_GE); __Pyx_XGOTREF(__pyx_t_13); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_13); if (unlikely(__pyx_t_7 < 0)) __PYX_ERR(4, 324, __pyx_L1_error)
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __pyx_t_12 = __pyx_t_7;
      __pyx_L18_bool_binop_done:;
      if (__pyx_t_12) {

        /* "gambit/lib/game.pxi":325
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)             # <<<<<<<<<<<<<<
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 */
        __pyx_t_13 = PyTuple_New(2); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_13);
        __Pyx_INCREF(__pyx_v_st);
        __Pyx_GIVEREF(__pyx_v_st);
        PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_v_st);
        __Pyx_INCREF(__pyx_v_pl);
        __Pyx_GIVEREF(__pyx_v_pl);
        PyTuple_SET_ITEM(__pyx_t_13, 1, __pyx_v_pl);
        __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_index_d_out_of, __pyx_t_13); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 325, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __PYX_ERR(4, 325, __pyx_L1_error)

        /* "gambit/lib/game.pxi":324
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 */
      }

      /* "gambit/lib/game.pxi":326
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, str):
 *                 try:
 */
      if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_v_st) < 0)) __PYX_ERR(4, 326, __pyx_L1_error)

      /* "gambit/lib/game.pxi":323
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):
 *             if isinstance(st, int):             # <<<<<<<<<<<<<<
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 */
      goto __pyx_L16;
    }

    /* "gambit/lib/game.pxi":327
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
    __pyx_t_12 = PyString_Check(__pyx_v_st); 
    __pyx_t_7 = (__pyx_t_12 != 0);
    if (__pyx_t_7) {

      /* "gambit/lib/game.pxi":328
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_1);
        /*try:*/ {

          /* "gambit/lib/game.pxi":329
 *             elif isinstance(st, str):
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 */
          __pyx_t_13 = PyList_New(0); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 329, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_13);
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 329, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          __pyx_t_15 = PyObject_GetItem(__pyx_t_14, __pyx_v_pl); if (unlikely(!__pyx_t_15)) __PYX_ERR(4, 329, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_t_15, __pyx_n_s_strategies); if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 329, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (likely(PyList_CheckExact(__pyx_t_14)) || PyTuple_CheckExact(__pyx_t_14)) {
            __pyx_t_15 = __pyx_t_14; __Pyx_INCREF(__pyx_t_15); __pyx_t_4 = 0;
            __pyx_t_16 = NULL;
          } else {
            __pyx_t_4 = -1; __pyx_t_15 = PyObject_GetIter(__pyx_t_14); if (unlikely(!__pyx_t_15)) __PYX_ERR(4, 329, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_15);
            __pyx_t_16 = Py_TYPE(__pyx_t_15)->tp_iternext; if (unlikely(!__pyx_t_16)) __PYX_ERR(4, 329, __pyx_L20_error)
          }
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          for (;;) {
            if (likely(!__pyx_t_16)) {
              if (likely(PyList_CheckExact(__pyx_t_15))) {
                if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_15)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_14 = PyList_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 329, __pyx_L20_error)
                #else
                __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 329, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_14);
                #endif
              } else {
                if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_15)) break;
                #if CYTHON_COMPILING_IN_CPYTHON
                __pyx_t_14 = PyTuple_GET_ITEM(__pyx_t_15, __pyx_t_4); __Pyx_INCREF(__pyx_t_14); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(4, 329, __pyx_L20_error)
                #else
                __pyx_t_14 = PySequence_ITEM(__pyx_t_15, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 329, __pyx_L20_error)
                __Pyx_GOTREF(__pyx_t_14);
                #endif
              }
            } else {
              __pyx_t_14 = __pyx_t_16(__pyx_t_15);
              if (unlikely(!__pyx_t_14)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else __PYX_ERR(4, 329, __pyx_L20_error)
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_14);
            }
            __Pyx_XDECREF_SET(__pyx_v_s, __pyx_t_14);
            __pyx_t_14 = 0;
            __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_s, __pyx_n_s_label); if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 329, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_14);
            if (unlikely(__Pyx_ListComp_Append(__pyx_t_13, (PyObject*)__pyx_t_14))) __PYX_ERR(4, 329, __pyx_L20_error)
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(4, 329, __pyx_L20_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __pyx_t_13 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_13 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_13)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_13);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          if (!__pyx_t_13) {
            __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 329, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_5);
          } else {
            __pyx_t_14 = PyTuple_New(1+1); if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 329, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_GIVEREF(__pyx_t_13); PyTuple_SET_ITEM(__pyx_t_14, 0, __pyx_t_13); __pyx_t_13 = NULL;
            __Pyx_INCREF(__pyx_v_st);
            __Pyx_GIVEREF(__pyx_v_st);
            PyTuple_SET_ITEM(__pyx_t_14, 0+1, __pyx_v_st);
            __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_14, NULL); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 329, __pyx_L20_error)
            __Pyx_GOTREF(__pyx_t_5);
            __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_5) < 0)) __PYX_ERR(4, 329, __pyx_L20_error)
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

          /* "gambit/lib/game.pxi":328
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        goto __pyx_L27_try_end;
        __pyx_L20_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

        /* "gambit/lib/game.pxi":330
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("gambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_15, &__pyx_t_14) < 0) __PYX_ERR(4, 330, __pyx_L22_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_14);

          /* "gambit/lib/game.pxi":331
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st             # <<<<<<<<<<<<<<
 *             elif isinstance(st, Strategy):
 *                 try:
 */
          __pyx_t_13 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_label_s_not_de, __pyx_v_st); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 331, __pyx_L22_except_error)
          __Pyx_GOTREF(__pyx_t_13);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_13, 0, 0);
          __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          __PYX_ERR(4, 331, __pyx_L22_except_error)
        }
        goto __pyx_L22_except_error;
        __pyx_L22_except_error:;

        /* "gambit/lib/game.pxi":328
 *                 cont[pl] = st
 *             elif isinstance(st, str):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 *                 except ValueError:
 */
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
        goto __pyx_L1_error;
        __pyx_L27_try_end:;
      }

      /* "gambit/lib/game.pxi":327
 *                     raise IndexError, "Provided strategy index %d out of range for player %d" % (st, pl)
 *                 cont[pl] = st
 *             elif isinstance(st, str):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = [ s.label for s in self.players[pl].strategies ].index(st)
 */
      goto __pyx_L16;
    }

    /* "gambit/lib/game.pxi":332
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
    __pyx_t_7 = __Pyx_TypeCheck(__pyx_v_st, __pyx_ptype_6gambit_3lib_9libgambit_Strategy); 
    __pyx_t_12 = (__pyx_t_7 != 0);
    if (__pyx_t_12) {

      /* "gambit/lib/game.pxi":333
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
      {
        __Pyx_PyThreadState_declare
        __Pyx_PyThreadState_assign
        __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
        __Pyx_XGOTREF(__pyx_t_1);
        __Pyx_XGOTREF(__pyx_t_2);
        __Pyx_XGOTREF(__pyx_t_3);
        /*try:*/ {

          /* "gambit/lib/game.pxi":334
 *             elif isinstance(st, Strategy):
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)             # <<<<<<<<<<<<<<
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 */
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_players); if (unlikely(!__pyx_t_15)) __PYX_ERR(4, 334, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_15);
          __pyx_t_5 = PyObject_GetItem(__pyx_t_15, __pyx_v_pl); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 334, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_strategies); if (unlikely(!__pyx_t_15)) __PYX_ERR(4, 334, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = PySequence_List(__pyx_t_15); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 334, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          __pyx_t_15 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_index); if (unlikely(!__pyx_t_15)) __PYX_ERR(4, 334, __pyx_L32_error)
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_5 = NULL;
          if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_15))) {
            __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_15);
            if (likely(__pyx_t_5)) {
              PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_15);
              __Pyx_INCREF(__pyx_t_5);
              __Pyx_INCREF(function);
              __Pyx_DECREF_SET(__pyx_t_15, function);
            }
          }
          if (!__pyx_t_5) {
            __pyx_t_14 = __Pyx_PyObject_CallOneArg(__pyx_t_15, __pyx_v_st); if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 334, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_14);
          } else {
            __pyx_t_13 = PyTuple_New(1+1); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 334, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_13);
            __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_13, 0, __pyx_t_5); __pyx_t_5 = NULL;
            __Pyx_INCREF(__pyx_v_st);
            __Pyx_GIVEREF(__pyx_v_st);
            PyTuple_SET_ITEM(__pyx_t_13, 0+1, __pyx_v_st);
            __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_15, __pyx_t_13, NULL); if (unlikely(!__pyx_t_14)) __PYX_ERR(4, 334, __pyx_L32_error)
            __Pyx_GOTREF(__pyx_t_14);
            __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
          }
          __Pyx_DECREF(__pyx_t_15); __pyx_t_15 = 0;
          if (unlikely(PyObject_SetItem(__pyx_v_cont, __pyx_v_pl, __pyx_t_14) < 0)) __PYX_ERR(4, 334, __pyx_L32_error)
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;

          /* "gambit/lib/game.pxi":333
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        }
        __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
        goto __pyx_L39_try_end;
        __pyx_L32_error:;
        __Pyx_PyThreadState_assign
        __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
        __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;

        /* "gambit/lib/game.pxi":335
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:             # <<<<<<<<<<<<<<
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 */
        __pyx_t_8 = __Pyx_PyErr_ExceptionMatches(__pyx_builtin_ValueError);
        if (__pyx_t_8) {
          __Pyx_AddTraceback("gambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_14, &__pyx_t_15, &__pyx_t_13) < 0) __PYX_ERR(4, 335, __pyx_L34_except_error)
          __Pyx_GOTREF(__pyx_t_14);
          __Pyx_GOTREF(__pyx_t_15);
          __Pyx_GOTREF(__pyx_t_13);

          /* "gambit/lib/game.pxi":336
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st             # <<<<<<<<<<<<<<
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 */
          __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_Provided_strategy_s_not_availabl, __pyx_v_st); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 336, __pyx_L34_except_error)
          __Pyx_GOTREF(__pyx_t_5);
          __Pyx_Raise(__pyx_builtin_IndexError, __pyx_t_5, 0, 0);
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __PYX_ERR(4, 336, __pyx_L34_except_error)
        }
        goto __pyx_L34_except_error;
        __pyx_L34_except_error:;

        /* "gambit/lib/game.pxi":333
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):
 *                 try:             # <<<<<<<<<<<<<<
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 *                 except ValueError:
 */
        __Pyx_PyThreadState_assign
        __Pyx_XGIVEREF(__pyx_t_1);
        __Pyx_XGIVEREF(__pyx_t_2);
        __Pyx_XGIVEREF(__pyx_t_3);
        __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
        goto __pyx_L1_error;
        __pyx_L39_try_end:;
      }

      /* "gambit/lib/game.pxi":332
 *                 except ValueError:
 *                     raise IndexError, "Provided strategy label '%s' not defined" % st
 *             elif isinstance(st, Strategy):             # <<<<<<<<<<<<<<
 *                 try:
 *                     cont[pl] = list(self.players[pl].strategies).index(st)
 */
      goto __pyx_L16;
    }

    /* "gambit/lib/game.pxi":338
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")             # <<<<<<<<<<<<<<
 *         return self._get_contingency(*tuple(cont))
 * 
 */
    /*else*/ {
      __pyx_t_13 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__99, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 338, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_13);
      __Pyx_Raise(__pyx_t_13, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
      __PYX_ERR(4, 338, __pyx_L1_error)
    }
    __pyx_L16:;

    /* "gambit/lib/game.pxi":322
 *             raise TypeError, "contingency must be a tuple-like object"
 *         cont = [ 0 ] * len(self.players)
 *         for (pl, st) in enumerate(i):             # <<<<<<<<<<<<<<
 *             if isinstance(st, int):
 *                 if st < 0 or st >= len(self.players[pl].strategies):
 */
  }
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "gambit/lib/game.pxi":339
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")
 *         return self._get_contingency(*tuple(cont))             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_contingency); if (unlikely(!__pyx_t_10)) __PYX_ERR(4, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_9 = PyList_AsTuple(__pyx_v_cont); if (unlikely(!__pyx_t_9)) __PYX_ERR(4, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_13)) __PYX_ERR(4, 339, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_r = __pyx_t_13;
  __pyx_t_13 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":315
 *     # to __getitem__, which is required for multidimensional slicing to work.
 *     # We work around this by providing a shim.
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         try:
 *             if len(i) != len(self.players):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_13);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_XDECREF(__pyx_t_15);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_cont);
  __Pyx_XDECREF(__pyx_v_pl);
  __Pyx_XDECREF(__pyx_v_st);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":342
 * 
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_23mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_23mixed_strategy_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rational = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mixed_strategy_profile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rational,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rational);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mixed_strategy_profile") < 0)) __PYX_ERR(4, 342, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rational = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mixed_strategy_profile", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 342, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_22mixed_strategy_profile(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_rational);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_22mixed_strategy_profile(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_mspd = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_mspr = 0;
  Rational __pyx_v_dummy_rat;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  GameRep *__pyx_t_5;
  __Pyx_RefNannySetupContext("mixed_strategy_profile", 0);

  /* "gambit/lib/game.pxi":346
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not self.is_perfect_recall:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_perfect_recall); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 346, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 346, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_3 = ((!__pyx_t_2) != 0);
  if (__pyx_t_3) {

    /* "gambit/lib/game.pxi":347
 *         cdef c_Rational dummy_rat
 *         if not self.is_perfect_recall:
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")             # <<<<<<<<<<<<<<
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__100, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 347, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 347, __pyx_L1_error)

    /* "gambit/lib/game.pxi":346
 *         cdef MixedStrategyProfileRational mspr
 *         cdef c_Rational dummy_rat
 *         if not self.is_perfect_recall:             # <<<<<<<<<<<<<<
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:
 */
  }

  /* "gambit/lib/game.pxi":348
 *         if not self.is_perfect_recall:
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_rational); if (unlikely(__pyx_t_3 < 0)) __PYX_ERR(4, 348, __pyx_L1_error)
  __pyx_t_2 = ((!__pyx_t_3) != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":349
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 *             return mspd
 */
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 349, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_mspd = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/game.pxi":350
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))             # <<<<<<<<<<<<<<
 *             return mspd
 *         else:
 */
    try {
      __pyx_t_5 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(4, 350, __pyx_L1_error)
    }
    __pyx_v_mspd->profile = new MixedStrategyProfile<double> (__pyx_t_5->NewMixedStrategyProfile(0.0));

    /* "gambit/lib/game.pxi":351
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 *             return mspd             # <<<<<<<<<<<<<<
 *         else:
 *             mspr = MixedStrategyProfileRational()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspd));
    __pyx_r = ((PyObject *)__pyx_v_mspd);
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":348
 *         if not self.is_perfect_recall:
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")
 *         if not rational:             # <<<<<<<<<<<<<<
 *             mspd = MixedStrategyProfileDouble()
 *             mspd.profile = new c_MixedStrategyProfileDouble(self.game.deref().NewMixedStrategyProfile(0.0))
 */
  }

  /* "gambit/lib/game.pxi":353
 *             return mspd
 *         else:
 *             mspr = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             mspr.profile = new c_MixedStrategyProfileRational(self.game.deref().NewMixedStrategyProfile(dummy_rat))
 *             return mspr
 */
  /*else*/ {
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 353, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_v_mspr = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_4);
    __pyx_t_4 = 0;

    /* "gambit/lib/game.pxi":354
 *         else:
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(self.game.deref().NewMixedStrategyProfile(dummy_rat))             # <<<<<<<<<<<<<<
 *             return mspr
 * 
 */
    try {
      __pyx_t_5 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(4, 354, __pyx_L1_error)
    }
    __pyx_v_mspr->profile = new MixedStrategyProfile<Rational> (__pyx_t_5->NewMixedStrategyProfile(__pyx_v_dummy_rat));

    /* "gambit/lib/game.pxi":355
 *             mspr = MixedStrategyProfileRational()
 *             mspr.profile = new c_MixedStrategyProfileRational(self.game.deref().NewMixedStrategyProfile(dummy_rat))
 *             return mspr             # <<<<<<<<<<<<<<
 * 
 *     def mixed_behavior_profile(self, rational=False):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_mspr));
    __pyx_r = ((PyObject *)__pyx_v_mspr);
    goto __pyx_L0;
  }

  /* "gambit/lib/game.pxi":342
 * 
 * 
 *     def mixed_strategy_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedStrategyProfileDouble mspd
 *         cdef MixedStrategyProfileRational mspr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.mixed_strategy_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mspd);
  __Pyx_XDECREF((PyObject *)__pyx_v_mspr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":357
 *             return mspr
 * 
 *     def mixed_behavior_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_25mixed_behavior_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_25mixed_behavior_profile(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_rational = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mixed_behavior_profile (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_rational,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_False);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_rational);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mixed_behavior_profile") < 0)) __PYX_ERR(4, 357, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_rational = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mixed_behavior_profile", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 357, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.mixed_behavior_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_24mixed_behavior_profile(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_rational);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_24mixed_behavior_profile(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_rational) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_mbpd = 0;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_mbpr = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannySetupContext("mixed_behavior_profile", 0);

  /* "gambit/lib/game.pxi":360
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 360, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 360, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":361
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:
 *             if not rational:             # <<<<<<<<<<<<<<
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 */
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_rational); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 361, __pyx_L1_error)
    __pyx_t_3 = ((!__pyx_t_2) != 0);
    if (__pyx_t_3) {

      /* "gambit/lib/game.pxi":362
 *         if self.is_tree:
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 *                 return mbpd
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 362, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_mbpd = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "gambit/lib/game.pxi":363
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)             # <<<<<<<<<<<<<<
 *                 return mbpd
 *             else:
 */
      __pyx_v_mbpd->profile = new MixedBehaviorProfile<double> (__pyx_v_self->game);

      /* "gambit/lib/game.pxi":364
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 *                 return mbpd             # <<<<<<<<<<<<<<
 *             else:
 *                 mbpr = MixedBehaviorProfileRational()
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_mbpd));
      __pyx_r = ((PyObject *)__pyx_v_mbpd);
      goto __pyx_L0;

      /* "gambit/lib/game.pxi":361
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:
 *             if not rational:             # <<<<<<<<<<<<<<
 *                 mbpd = MixedBehaviorProfileDouble()
 *                 mbpd.profile = new c_MixedBehaviorProfileDouble(self.game)
 */
    }

    /* "gambit/lib/game.pxi":366
 *                 return mbpd
 *             else:
 *                 mbpr = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *                 mbpr.profile = new c_MixedBehaviorProfileRational(self.game)
 *                 return mbpr
 */
    /*else*/ {
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 366, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_mbpr = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "gambit/lib/game.pxi":367
 *             else:
 *                 mbpr = MixedBehaviorProfileRational()
 *                 mbpr.profile = new c_MixedBehaviorProfileRational(self.game)             # <<<<<<<<<<<<<<
 *                 return mbpr
 *         else:
 */
      __pyx_v_mbpr->profile = new MixedBehaviorProfile<Rational> (__pyx_v_self->game);

      /* "gambit/lib/game.pxi":368
 *                 mbpr = MixedBehaviorProfileRational()
 *                 mbpr.profile = new c_MixedBehaviorProfileRational(self.game)
 *                 return mbpr             # <<<<<<<<<<<<<<
 *         else:
 *             raise UndefinedOperationError("Game must have a tree representation"\
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(((PyObject *)__pyx_v_mbpr));
      __pyx_r = ((PyObject *)__pyx_v_mbpr);
      goto __pyx_L0;
    }

    /* "gambit/lib/game.pxi":360
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             if not rational:
 *                 mbpd = MixedBehaviorProfileDouble()
 */
  }

  /* "gambit/lib/game.pxi":370
 *                 return mbpr
 *         else:
 *             raise UndefinedOperationError("Game must have a tree representation"\             # <<<<<<<<<<<<<<
 *                                       " to create a mixed behavior profile")
 * 
 */
  /*else*/ {
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__101, NULL); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 370, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __PYX_ERR(4, 370, __pyx_L1_error)
  }

  /* "gambit/lib/game.pxi":357
 *             return mspr
 * 
 *     def mixed_behavior_profile(self, rational=False):             # <<<<<<<<<<<<<<
 *         cdef MixedBehaviorProfileDouble mbpd
 *         cdef MixedBehaviorProfileRational mbpr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.mixed_behavior_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_mbpd);
  __Pyx_XDECREF((PyObject *)__pyx_v_mbpr);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":373
 *                                       " to create a mixed behavior profile")
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_27support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_27support_profile(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("support_profile (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_26support_profile(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_26support_profile(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("support_profile", 0);

  /* "gambit/lib/game.pxi":374
 * 
 *     def support_profile(self):
 *         return StrategySupportProfile(list(self.strategies), self)             # <<<<<<<<<<<<<<
 * 
 *     def num_nodes(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_strategies); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PySequence_List(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 1, ((PyObject *)__pyx_v_self));
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 374, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":373
 *                                       " to create a mixed behavior profile")
 * 
 *     def support_profile(self):             # <<<<<<<<<<<<<<
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.support_profile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":376
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 *     def num_nodes(self):             # <<<<<<<<<<<<<<
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_29num_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_29num_nodes(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("num_nodes (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_28num_nodes(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_28num_nodes(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  GameRep *__pyx_t_3;
  __Pyx_RefNannySetupContext("num_nodes", 0);

  /* "gambit/lib/game.pxi":377
 * 
 *     def num_nodes(self):
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             return self.game.deref().NumNodes()
 *         return 0
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_is_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 377, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) __PYX_ERR(4, 377, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "gambit/lib/game.pxi":378
 *     def num_nodes(self):
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()             # <<<<<<<<<<<<<<
 *         return 0
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_3 = __pyx_v_self->game.operator->();
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
      __PYX_ERR(4, 378, __pyx_L1_error)
    }
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_t_3->NumNodes()); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 378, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":377
 * 
 *     def num_nodes(self):
 *         if self.is_tree:             # <<<<<<<<<<<<<<
 *             return self.game.deref().NumNodes()
 *         return 0
 */
  }

  /* "gambit/lib/game.pxi":379
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()
 *         return 0             # <<<<<<<<<<<<<<
 * 
 *     def unrestrict(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_int_0);
  __pyx_r = __pyx_int_0;
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":376
 *         return StrategySupportProfile(list(self.strategies), self)
 * 
 *     def num_nodes(self):             # <<<<<<<<<<<<<<
 *         if self.is_tree:
 *             return self.game.deref().NumNodes()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.num_nodes", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":381
 *         return 0
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_31unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_31unrestrict(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_30unrestrict(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_30unrestrict(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("unrestrict", 0);

  /* "gambit/lib/game.pxi":382
 * 
 *     def unrestrict(self):
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def write(self, format='native'):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "gambit/lib/game.pxi":381
 *         return 0
 * 
 *     def unrestrict(self):             # <<<<<<<<<<<<<<
 *         return self
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/game.pxi":384
 *         return self
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         cdef cxx_string s
 *         if format == 'gte':
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_33write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_4Game_33write(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_format = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("write (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_format,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)__pyx_n_s_native);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_format);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "write") < 0)) __PYX_ERR(4, 384, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_format = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("write", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(4, 384, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4Game_32write(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_self), __pyx_v_format);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4Game_32write(struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_self, PyObject *__pyx_v_format) {
  string __pyx_v_s;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  char *__pyx_t_6;
  string __pyx_t_7;
  __Pyx_RefNannySetupContext("write", 0);

  /* "gambit/lib/game.pxi":386
 *     def write(self, format='native'):
 *         cdef cxx_string s
 *         if format == 'gte':             # <<<<<<<<<<<<<<
 *             return gambit.gte.write_game(self)
 *         else:
 */
  __pyx_t_1 = (__Pyx_PyString_Equals(__pyx_v_format, __pyx_n_s_gte, Py_EQ)); if (unlikely(__pyx_t_1 < 0)) __PYX_ERR(4, 386, __pyx_L1_error)
  if (__pyx_t_1) {

    /* "gambit/lib/game.pxi":387
 *         cdef cxx_string s
 *         if format == 'gte':
 *             return gambit.gte.write_game(self)             # <<<<<<<<<<<<<<
 *         else:
 *             s.assign(format)
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_gambit); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_gte); if (unlikely(!__pyx_t_4)) __PYX_ERR(4, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_write_game); if (unlikely(!__pyx_t_3)) __PYX_ERR(4, 387, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_3))) {
      __pyx_t_4 = PyMethod_GET_SELF(__pyx_t_3);
      if (likely(__pyx_t_4)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_3);
        __Pyx_INCREF(__pyx_t_4);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_3, function);
      }
    }
    if (!__pyx_t_4) {
      __pyx_t_2 = __Pyx_PyObject_CallOneArg(__pyx_t_3, ((PyObject *)__pyx_v_self)); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
    } else {
      __pyx_t_5 = PyTuple_New(1+1); if (unlikely(!__pyx_t_5)) __PYX_ERR(4, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_4); PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4); __pyx_t_4 = NULL;
      __Pyx_INCREF(((PyObject *)__pyx_v_self));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
      PyTuple_SET_ITEM(__pyx_t_5, 0+1, ((PyObject *)__pyx_v_self));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 387, __pyx_L1_error)
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;

    /* "gambit/lib/game.pxi":386
 *     def write(self, format='native'):
 *         cdef cxx_string s
 *         if format == 'gte':             # <<<<<<<<<<<<<<
 *             return gambit.gte.write_game(self)
 *         else:
 */
  }

  /* "gambit/lib/game.pxi":389
 *             return gambit.gte.write_game(self)
 *         else:
 *             s.assign(format)             # <<<<<<<<<<<<<<
 *             return WriteGame(self.game, s).c_str()
 * 
 */
  /*else*/ {
    __pyx_t_6 = __Pyx_PyObject_AsString(__pyx_v_format); if (unlikely((!__pyx_t_6) && PyErr_Occurred())) __PYX_ERR(4, 389, __pyx_L1_error)
    __pyx_v_s.assign(__pyx_t_6);

    /* "gambit/lib/game.pxi":390
 *         else:
 *             s.assign(format)
 *             return WriteGame(self.game, s).c_str()             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    try {
      __pyx_t_7 = WriteGame(__pyx_v_self->game, __pyx_v_s);
    } catch(...) {
      try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IOError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IOError); }
      __PYX_ERR(4, 390, __pyx_L1_error)
    }
    __pyx_t_2 = __Pyx_PyBytes_FromString(__pyx_t_7.c_str()); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 390, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }

  /* "gambit/lib/game.pxi":384
 *         return self
 * 
 *     def write(self, format='native'):             # <<<<<<<<<<<<<<
 *         cdef cxx_string s
 *         if format == 'gte':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("gambit.lib.libgambit.Game.write", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":35
 *     cdef c_NashEnumPureStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":36
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumPureStrategySolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashEnumPureStrategySolver();

  /* "gambit/lib/nash.pxi":35
 *     cdef c_NashEnumPureStrategySolver *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":37
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":38
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":37
 *     def __cinit__(self):
 *         self.alg = new c_NashEnumPureStrategySolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":39
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 39, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22EnumPureStrategySolver_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":42
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 42, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":43
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 43, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":44
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 44, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 44, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 44, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 44, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 44, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 44, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 44, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":45
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 45, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":46
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 46, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 46, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":47
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 47, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":44
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":48
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class EnumPureAgentSolver(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":39
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.EnumPureStrategySolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":53
 *     cdef c_NashEnumPureAgentSolver *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_p_stopAfter = 0;
  CYTHON_UNUSED PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(11, 53, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 53, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.EnumPureAgentSolver.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_p_stopAfter, CYTHON_UNUSED PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":54
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashEnumPureAgentSolver()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashEnumPureAgentSolver();

  /* "gambit/lib/nash.pxi":53
 *     cdef c_NashEnumPureAgentSolver *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":55
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":56
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":55
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashEnumPureAgentSolver()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":57
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 57, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_19EnumPureAgentSolver_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":60
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 60, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":61
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 61, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":62
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 62, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 62, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 62, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 62, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 62, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 62, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 62, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 62, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":63
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 63, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":64
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 64, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 64, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":65
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 65, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":62
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":66
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":57
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.EnumPureAgentSolver.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":91
 *     cdef c_NashLcpBehaviorSolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(11, 91, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 91, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPBehaviorSolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":92
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 92, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 92, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpBehaviorSolver<double>(__pyx_t_1, __pyx_t_2);

  /* "gambit/lib/nash.pxi":91
 *     cdef c_NashLcpBehaviorSolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPBehaviorSolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":93
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":94
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":93
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":95
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 95, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":98
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 98, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":99
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":100
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 100, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 100, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 100, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 100, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 100, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 100, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 100, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":101
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 101, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":102
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 102, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 102, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":103
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 103, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":100
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":104
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LCPBehaviorSolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":95
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPBehaviorSolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":109
 *     cdef c_NashLcpBehaviorSolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(11, 109, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 109, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPBehaviorSolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":110
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 110, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 110, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpBehaviorSolver<Rational>(__pyx_t_1, __pyx_t_2);

  /* "gambit/lib/nash.pxi":109
 *     cdef c_NashLcpBehaviorSolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPBehaviorSolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":111
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":112
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":111
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpBehaviorSolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":113
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 113, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":116
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 116, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":117
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":118
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 118, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 118, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 118, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 118, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 118, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 118, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 118, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 118, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":119
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 119, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":120
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 120, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 120, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":121
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 121, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":118
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":122
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LCPStrategySolverDouble(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":113
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPBehaviorSolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":127
 *     cdef c_NashLcpStrategySolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(11, 127, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 127, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPStrategySolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":128
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 128, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 128, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpStrategySolver<double>(__pyx_t_1, __pyx_t_2);

  /* "gambit/lib/nash.pxi":127
 *     cdef c_NashLcpStrategySolverDouble *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPStrategySolverDouble.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":129
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":130
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":129
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverDouble(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":131
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 131, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":134
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 134, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":135
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":136
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 136, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 136, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 136, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 136, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 136, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 136, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":137
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 137, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":138
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 138, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 138, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":139
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 139, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":136
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":140
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LCPStrategySolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":131
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPStrategySolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":145
 *     cdef c_NashLcpStrategySolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_p_stopAfter = 0;
  PyObject *__pyx_v_p_maxDepth = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_stopAfter,&__pyx_n_s_p_maxDepth,0};
    PyObject* values[2] = {0,0};
    values[0] = ((PyObject *)__pyx_int_0);
    values[1] = ((PyObject *)__pyx_int_0);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_stopAfter);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_maxDepth);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__cinit__") < 0)) __PYX_ERR(11, 145, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_stopAfter = values[0];
    __pyx_v_p_maxDepth = values[1];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__cinit__", 0, 0, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 145, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPStrategySolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self), __pyx_v_p_stopAfter, __pyx_v_p_maxDepth);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, PyObject *__pyx_v_p_stopAfter, PyObject *__pyx_v_p_maxDepth) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":146
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_t_1 = __Pyx_PyInt_As_int(__pyx_v_p_stopAfter); if (unlikely((__pyx_t_1 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 146, __pyx_L1_error)
  __pyx_t_2 = __Pyx_PyInt_As_int(__pyx_v_p_maxDepth); if (unlikely((__pyx_t_2 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 146, __pyx_L1_error)
  __pyx_v_self->alg = new NashLcpStrategySolver<Rational>(__pyx_t_1, __pyx_t_2);

  /* "gambit/lib/nash.pxi":145
 *     cdef c_NashLcpStrategySolverRational *alg
 * 
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPStrategySolverRational.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":147
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":148
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":147
 *     def __cinit__(self, p_stopAfter=0, p_maxDepth=0):
 *         self.alg = new c_NashLcpStrategySolverRational(p_stopAfter, p_maxDepth)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":149
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 149, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_25LCPStrategySolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":152
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 152, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":153
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 153, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":154
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 154, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 154, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 154, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 154, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 154, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 154, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 154, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 154, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":155
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 155, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":156
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 156, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 156, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":157
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 157, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":154
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":158
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":149
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LCPStrategySolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":183
 *     cdef c_NashLpBehavSolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":184
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverDouble()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpBehavSolver<double>();

  /* "gambit/lib/nash.pxi":183
 *     cdef c_NashLpBehavSolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":185
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":186
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":185
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":187
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 187, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":190
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 190, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":191
 *         cdef MixedBehaviorProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 191, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":192
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 192, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 192, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 192, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 192, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 192, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 192, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 192, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":193
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 193, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":194
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 194, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 194, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":195
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 195, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":192
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileDouble()
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":196
 *             p.profile = copyitem_list_mbpd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LPBehaviorSolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":187
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileDouble] solns
 *         cdef MixedBehaviorProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LPBehaviorSolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":201
 *     cdef c_NashLpBehavSolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":202
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverRational()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpBehavSolver<Rational>();

  /* "gambit/lib/nash.pxi":201
 *     cdef c_NashLpBehavSolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":203
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":204
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":203
 *     def __cinit__(self):
 *         self.alg = new c_NashLpBehavSolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":205
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 205, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedBehaviorProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedBehaviorProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":208
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 208, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":209
 *         cdef MixedBehaviorProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 209, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":210
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 210, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 210, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 210, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 210, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 210, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 210, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 210, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":211
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 211, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":212
 *         for i in xrange(solns.Length()):
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 212, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 212, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":213
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 213, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":210
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedBehaviorProfileRational()
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":214
 *             p.profile = copyitem_list_mbpr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LPStrategySolverDouble(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":205
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedBehaviorProfileRational] solns
 *         cdef MixedBehaviorProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LPBehaviorSolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":219
 *     cdef c_NashLpStrategySolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":220
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverDouble()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpStrategySolver<double>();

  /* "gambit/lib/nash.pxi":219
 *     cdef c_NashLpStrategySolverDouble *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":221
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":222
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":221
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverDouble()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":223
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 223, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_22LPStrategySolverDouble_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<double> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<double> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":226
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 226, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":227
 *         cdef MixedStrategyProfileDouble p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":228
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 228, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 228, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 228, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 228, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 228, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 228, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 228, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":229
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 229, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":230
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 230, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 230, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":231
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 231, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":228
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileDouble()
 *             p.profile = copyitem_list_mspd(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":232
 *             p.profile = copyitem_list_mspd(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * cdef class LPStrategySolverRational(object):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":223
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileDouble] solns
 *         cdef MixedStrategyProfileDouble p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LPStrategySolverDouble.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":237
 *     cdef c_NashLpStrategySolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational___cinit__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational___cinit__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__", 0);

  /* "gambit/lib/nash.pxi":238
 * 
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverRational()             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.alg
 */
  __pyx_v_self->alg = new NashLpStrategySolver<Rational>();

  /* "gambit/lib/nash.pxi":237
 *     cdef c_NashLpStrategySolverRational *alg
 * 
 *     def __cinit__(self):             # <<<<<<<<<<<<<<
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":239
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":240
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):
 *         del self.alg             # <<<<<<<<<<<<<<
 *     def solve(self, Game game):
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 */
  delete __pyx_v_self->alg;

  /* "gambit/lib/nash.pxi":239
 *     def __cinit__(self):
 *         self.alg = new c_NashLpStrategySolverRational()
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.alg
 *     def solve(self, Game game):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":241
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_5solve(PyObject *__pyx_v_self, PyObject *__pyx_v_game) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("solve (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "game", 0))) __PYX_ERR(11, 241, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational_4solve(((struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *)__pyx_v_self), ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_24LPStrategySolverRational_4solve(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational *__pyx_v_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_game) {
  List<MixedStrategyProfile<Rational> >  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  List<MixedStrategyProfile<Rational> >  __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  PyObject *(*__pyx_t_5)(PyObject *);
  int __pyx_t_6;
  int __pyx_t_7;
  __Pyx_RefNannySetupContext("solve", 0);

  /* "gambit/lib/nash.pxi":244
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)             # <<<<<<<<<<<<<<
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 */
  try {
    __pyx_t_1 = __pyx_v_self->alg->Solve(__pyx_v_game->game);
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
    __PYX_ERR(11, 244, __pyx_L1_error)
  }
  __pyx_v_solns = __pyx_t_1;

  /* "gambit/lib/nash.pxi":245
 *         cdef MixedStrategyProfileRational p
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]             # <<<<<<<<<<<<<<
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 */
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 245, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_ret = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":246
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 246, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  if (likely(PyList_CheckExact(__pyx_t_2)) || PyTuple_CheckExact(__pyx_t_2)) {
    __pyx_t_3 = __pyx_t_2; __Pyx_INCREF(__pyx_t_3); __pyx_t_4 = 0;
    __pyx_t_5 = NULL;
  } else {
    __pyx_t_4 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 246, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_5 = Py_TYPE(__pyx_t_3)->tp_iternext; if (unlikely(!__pyx_t_5)) __PYX_ERR(11, 246, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  for (;;) {
    if (likely(!__pyx_t_5)) {
      if (likely(PyList_CheckExact(__pyx_t_3))) {
        if (__pyx_t_4 >= PyList_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 246, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 246, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      } else {
        if (__pyx_t_4 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_2 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_4); __Pyx_INCREF(__pyx_t_2); __pyx_t_4++; if (unlikely(0 < 0)) __PYX_ERR(11, 246, __pyx_L1_error)
        #else
        __pyx_t_2 = PySequence_ITEM(__pyx_t_3, __pyx_t_4); __pyx_t_4++; if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 246, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_2);
        #endif
      }
    } else {
      __pyx_t_2 = __pyx_t_5(__pyx_t_3);
      if (unlikely(!__pyx_t_2)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 246, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_2);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":247
 *         ret = [ ]
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()             # <<<<<<<<<<<<<<
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 */
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 247, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "gambit/lib/nash.pxi":248
 *         for i in xrange(solns.Length()):
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)             # <<<<<<<<<<<<<<
 *             ret.append(p)
 *         return ret
 */
    __pyx_t_2 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 248, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 248, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_v_p->profile = copyitem(__pyx_v_solns, __pyx_t_6);

    /* "gambit/lib/nash.pxi":249
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)             # <<<<<<<<<<<<<<
 *         return ret
 * 
 */
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_7 == -1)) __PYX_ERR(11, 249, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":246
 *         solns = self.alg.Solve(game.game)
 *         ret = [ ]
 *         for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *             p = MixedStrategyProfileRational()
 *             p.profile = copyitem_list_mspr(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "gambit/lib/nash.pxi":250
 *             p.profile = copyitem_list_mspr(solns, i+1)
 *             ret.append(p)
 *         return ret             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":241
 *     def __dealloc__(self):
 *         del self.alg
 *     def solve(self, Game game):             # <<<<<<<<<<<<<<
 *         cdef c_List[c_MixedStrategyProfileRational] solns
 *         cdef MixedStrategyProfileRational p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LPStrategySolverRational.solve", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":279
 * cdef class LogitQREMixedStrategyProfile(object):
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):             # <<<<<<<<<<<<<<
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 */

/* Python wrapper */
static int __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_game = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_game,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_game);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) __PYX_ERR(11, 279, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_game = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 279, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LogitQREMixedStrategyProfile.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile___init__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self), __pyx_v_game);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile___init__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, PyObject *__pyx_v_game) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "gambit/lib/nash.pxi":280
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):
 *         if game is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):
 */
  __pyx_t_1 = (__pyx_v_game != Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "gambit/lib/nash.pxi":281
 *     def __init__(self, game=None):
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         del self.thisptr
 */
    __pyx_v_self->thisptr = new LogitQREMixedStrategyProfile(((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_v_game)->game);

    /* "gambit/lib/nash.pxi":280
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):
 *         if game is not None:             # <<<<<<<<<<<<<<
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):
 */
  }

  /* "gambit/lib/nash.pxi":279
 * cdef class LogitQREMixedStrategyProfile(object):
 *     cdef c_LogitQREMixedStrategyProfile *thisptr
 *     def __init__(self, game=None):             # <<<<<<<<<<<<<<
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":282
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def __repr__(self):
 */

/* Python wrapper */
static void __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_2__dealloc__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_2__dealloc__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__", 0);

  /* "gambit/lib/nash.pxi":283
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):
 *         del self.thisptr             # <<<<<<<<<<<<<<
 *     def __repr__(self):
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 */
  delete __pyx_v_self->thisptr;

  /* "gambit/lib/nash.pxi":282
 *         if game is not None:
 *             self.thisptr = new c_LogitQREMixedStrategyProfile((<Game>game).game)
 *     def __dealloc__(self):             # <<<<<<<<<<<<<<
 *         del self.thisptr
 *     def __repr__(self):
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "gambit/lib/nash.pxi":284
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_5__repr__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_5__repr__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__repr__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4__repr__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4__repr__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  __Pyx_RefNannySetupContext("__repr__", 0);

  /* "gambit/lib/nash.pxi":285
 *         del self.thisptr
 *     def __repr__(self):
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_lam); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_profile); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) __PYX_ERR(11, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyString_Format(__pyx_kp_s_LogitQREMixedStrategyProfile_lam, __pyx_t_3); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 285, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":284
 *     def __dealloc__(self):
 *         del self.thisptr
 *     def __repr__(self):             # <<<<<<<<<<<<<<
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("gambit.lib.libgambit.LogitQREMixedStrategyProfile.__repr__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":287
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_6__len__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_6__len__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "gambit/lib/nash.pxi":288
 * 
 *     def __len__(self):
 *         return self.thisptr.MixedProfileLength()             # <<<<<<<<<<<<<<
 *     def __getitem__(self, int i):
 *         return self.thisptr.getitem(i+1)
 */
  __pyx_r = __pyx_v_self->thisptr->MixedProfileLength();
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":287
 *         return "LogitQREMixedStrategyProfile(lam=%f,profile=%s)" % (self.lam, self.profile)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":289
 *     def __len__(self):
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getitem(i+1)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 289, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.LogitQREMixedStrategyProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_8__getitem__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_8__getitem__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  double __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "gambit/lib/nash.pxi":290
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):
 *         return self.thisptr.getitem(i+1)             # <<<<<<<<<<<<<<
 * 
 *     property game:
 */
  __Pyx_XDECREF(__pyx_r);
  try {
    __pyx_t_1 = __pyx_v_self->thisptr->operator[]((__pyx_v_i + 1));
  } catch(...) {
    try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_IndexError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_IndexError); }
    __PYX_ERR(11, 290, __pyx_L1_error)
  }
  __pyx_t_2 = PyFloat_FromDouble(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 290, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":289
 *     def __len__(self):
 *         return self.thisptr.MixedProfileLength()
 *     def __getitem__(self, int i):             # <<<<<<<<<<<<<<
 *         return self.thisptr.getitem(i+1)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.LogitQREMixedStrategyProfile.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":293
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game___get__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_g = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/nash.pxi":295
 *         def __get__(self):
 *             cdef Game g
 *             g = Game()             # <<<<<<<<<<<<<<
 *             g.game = self.thisptr.GetGame()
 *             return g
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 295, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/nash.pxi":296
 *             cdef Game g
 *             g = Game()
 *             g.game = self.thisptr.GetGame()             # <<<<<<<<<<<<<<
 *             return g
 * 
 */
  __pyx_v_g->game = __pyx_v_self->thisptr->GetGame();

  /* "gambit/lib/nash.pxi":297
 *             g = Game()
 *             g.game = self.thisptr.GetGame()
 *             return g             # <<<<<<<<<<<<<<
 * 
 *     property lam:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_g));
  __pyx_r = ((PyObject *)__pyx_v_g);
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":293
 * 
 *     property game:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Game g
 *             g = Game()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.LogitQREMixedStrategyProfile.game.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_g);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":300
 * 
 *     property lam:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetLambda()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam___get__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/nash.pxi":301
 *     property lam:
 *         def __get__(self):
 *             return self.thisptr.GetLambda()             # <<<<<<<<<<<<<<
 * 
 *     property profile:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->thisptr->GetLambda()); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 301, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":300
 * 
 *     property lam:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.thisptr.GetLambda()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.LogitQREMixedStrategyProfile.lam.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":304
 * 
 *     property profile:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile___get__(((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile___get__(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_self) {
  struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_profile = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "gambit/lib/nash.pxi":306
 *         def __get__(self):
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()             # <<<<<<<<<<<<<<
 *             profile.profile = new c_MixedStrategyProfileDouble(deref(self.thisptr).GetProfile())
 *             return profile
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 306, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_profile = ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/nash.pxi":307
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()
 *             profile.profile = new c_MixedStrategyProfileDouble(deref(self.thisptr).GetProfile())             # <<<<<<<<<<<<<<
 *             return profile
 * 
 */
  __pyx_v_profile->profile = new MixedStrategyProfile<double> ((*__pyx_v_self->thisptr).GetProfile());

  /* "gambit/lib/nash.pxi":308
 *             profile = MixedStrategyProfileDouble()
 *             profile.profile = new c_MixedStrategyProfileDouble(deref(self.thisptr).GetProfile())
 *             return profile             # <<<<<<<<<<<<<<
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_profile));
  __pyx_r = ((PyObject *)__pyx_v_profile);
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":304
 * 
 *     property profile:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef MixedStrategyProfileDouble profile
 *             profile = MixedStrategyProfileDouble()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.LogitQREMixedStrategyProfile.profile.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_profile);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":310
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_1logit_estimate(PyObject *__pyx_self, PyObject *__pyx_v_p_profile); /*proto*/
static char __pyx_doc_6gambit_3lib_9libgambit_logit_estimate[] = "Estimate QRE corresponding to mixed strategy profile using\n    maximum likelihood along the principal branch.\n    ";
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_1logit_estimate = {"logit_estimate", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_1logit_estimate, METH_O, __pyx_doc_6gambit_3lib_9libgambit_logit_estimate};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_1logit_estimate(PyObject *__pyx_self, PyObject *__pyx_v_p_profile) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logit_estimate (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_profile), __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble, 1, "p_profile", 0))) __PYX_ERR(11, 310, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_logit_estimate(__pyx_self, ((struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *)__pyx_v_p_profile));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_logit_estimate(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble *__pyx_v_p_profile) {
  struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("logit_estimate", 0);

  /* "gambit/lib/nash.pxi":315
 *     """
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()             # <<<<<<<<<<<<<<
 *     ret.thisptr = _logit_estimate(p_profile.profile)
 *     return ret
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 315, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/nash.pxi":316
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_estimate(p_profile.profile)             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->thisptr = logit_estimate(__pyx_v_p_profile->profile);

  /* "gambit/lib/nash.pxi":317
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_estimate(p_profile.profile)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * def logit_atlambda(Game p_game, double p_lambda):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":310
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.logit_estimate", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":319
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_3logit_atlambda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6gambit_3lib_9libgambit_2logit_atlambda[] = "Compute the first QRE along the principal branch with the given\n    lambda parameter.\n    ";
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_3logit_atlambda = {"logit_atlambda", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_3logit_atlambda, METH_VARARGS|METH_KEYWORDS, __pyx_doc_6gambit_3lib_9libgambit_2logit_atlambda};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_3logit_atlambda(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_p_game = 0;
  double __pyx_v_p_lambda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logit_atlambda (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_game,&__pyx_n_s_p_lambda,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_game)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_lambda)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("logit_atlambda", 1, 2, 2, 1); __PYX_ERR(11, 319, __pyx_L3_error)
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "logit_atlambda") < 0)) __PYX_ERR(11, 319, __pyx_L3_error)
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_p_game = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)values[0]);
    __pyx_v_p_lambda = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p_lambda == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 319, __pyx_L3_error)
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("logit_atlambda", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 319, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.logit_atlambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "p_game", 0))) __PYX_ERR(11, 319, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_2logit_atlambda(__pyx_self, __pyx_v_p_game, __pyx_v_p_lambda);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_2logit_atlambda(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_lambda) {
  struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_ret = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  __Pyx_RefNannySetupContext("logit_atlambda", 0);

  /* "gambit/lib/nash.pxi":324
 *     """
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()             # <<<<<<<<<<<<<<
 *     ret.thisptr = _logit_atlambda(p_game.game, p_lambda)
 *     return ret
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 324, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/nash.pxi":325
 *     cdef LogitQREMixedStrategyProfile ret
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_atlambda(p_game.game, p_lambda)             # <<<<<<<<<<<<<<
 *     return ret
 * 
 */
  __pyx_v_ret->thisptr = logit_atlambda(__pyx_v_p_game->game, __pyx_v_p_lambda);

  /* "gambit/lib/nash.pxi":326
 *     ret = LogitQREMixedStrategyProfile()
 *     ret.thisptr = _logit_atlambda(p_game.game, p_lambda)
 *     return ret             # <<<<<<<<<<<<<<
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_ret));
  __pyx_r = ((PyObject *)__pyx_v_ret);
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":319
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("gambit.lib.libgambit.logit_atlambda", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ret);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "gambit/lib/nash.pxi":328
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */

/* Python wrapper */
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_5logit_principal_branch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6gambit_3lib_9libgambit_5logit_principal_branch = {"logit_principal_branch", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_5logit_principal_branch, METH_VARARGS|METH_KEYWORDS, 0};
static PyObject *__pyx_pw_6gambit_3lib_9libgambit_5logit_principal_branch(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_p_game = 0;
  double __pyx_v_p_maxLambda;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("logit_principal_branch (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_p_game,&__pyx_n_s_p_maxLambda,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_game)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_p_maxLambda);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "logit_principal_branch") < 0)) __PYX_ERR(11, 328, __pyx_L3_error)
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_p_game = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)values[0]);
    if (values[1]) {
      __pyx_v_p_maxLambda = __pyx_PyFloat_AsDouble(values[1]); if (unlikely((__pyx_v_p_maxLambda == (double)-1) && PyErr_Occurred())) __PYX_ERR(11, 328, __pyx_L3_error)
    } else {
      __pyx_v_p_maxLambda = ((double)100000.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("logit_principal_branch", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); __PYX_ERR(11, 328, __pyx_L3_error)
  __pyx_L3_error:;
  __Pyx_AddTraceback("gambit.lib.libgambit.logit_principal_branch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_p_game), __pyx_ptype_6gambit_3lib_9libgambit_Game, 1, "p_game", 0))) __PYX_ERR(11, 328, __pyx_L1_error)
  __pyx_r = __pyx_pf_6gambit_3lib_9libgambit_4logit_principal_branch(__pyx_self, __pyx_v_p_game, __pyx_v_p_maxLambda);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6gambit_3lib_9libgambit_4logit_principal_branch(CYTHON_UNUSED PyObject *__pyx_self, struct __pyx_obj_6gambit_3lib_9libgambit_Game *__pyx_v_p_game, double __pyx_v_p_maxLambda) {
  List<LogitQREMixedStrategyProfile>  __pyx_v_solns;
  struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *__pyx_v_p = 0;
  PyObject *__pyx_v_ret = NULL;
  PyObject *__pyx_v_i = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  Py_ssize_t __pyx_t_3;
  PyObject *(*__pyx_t_4)(PyObject *);
  int __pyx_t_5;
  int __pyx_t_6;
  __Pyx_RefNannySetupContext("logit_principal_branch", 0);

  /* "gambit/lib/nash.pxi":331
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)             # <<<<<<<<<<<<<<
 *     ret = [ ]
 *     for i in xrange(solns.Length()):
 */
  __pyx_v_solns = logit_principal_branch(__pyx_v_p_game->game, __pyx_v_p_maxLambda);

  /* "gambit/lib/nash.pxi":332
 *     cdef LogitQREMixedStrategyProfile p
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)
 *     ret = [ ]             # <<<<<<<<<<<<<<
 *     for i in xrange(solns.Length()):
 *         p = LogitQREMixedStrategyProfile()
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 332, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_ret = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "gambit/lib/nash.pxi":333
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)
 *     ret = [ ]
 *     for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 */
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_solns.Length()); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_xrange, __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 333, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (likely(PyList_CheckExact(__pyx_t_1)) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_2 = __pyx_t_1; __Pyx_INCREF(__pyx_t_2); __pyx_t_3 = 0;
    __pyx_t_4 = NULL;
  } else {
    __pyx_t_3 = -1; __pyx_t_2 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 333, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_4 = Py_TYPE(__pyx_t_2)->tp_iternext; if (unlikely(!__pyx_t_4)) __PYX_ERR(11, 333, __pyx_L1_error)
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (likely(!__pyx_t_4)) {
      if (likely(PyList_CheckExact(__pyx_t_2))) {
        if (__pyx_t_3 >= PyList_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(11, 333, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      } else {
        if (__pyx_t_3 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_3); __Pyx_INCREF(__pyx_t_1); __pyx_t_3++; if (unlikely(0 < 0)) __PYX_ERR(11, 333, __pyx_L1_error)
        #else
        __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_3); __pyx_t_3++; if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 333, __pyx_L1_error)
        __Pyx_GOTREF(__pyx_t_1);
        #endif
      }
    } else {
      __pyx_t_1 = __pyx_t_4(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else __PYX_ERR(11, 333, __pyx_L1_error)
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_i, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "gambit/lib/nash.pxi":334
 *     ret = [ ]
 *     for i in xrange(solns.Length()):
 *         p = LogitQREMixedStrategyProfile()             # <<<<<<<<<<<<<<
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 *         ret.append(p)
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 334, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_p, ((struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "gambit/lib/nash.pxi":335
 *     for i in xrange(solns.Length()):
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)             # <<<<<<<<<<<<<<
 *         ret.append(p)
 *     return ret
 */
    __pyx_t_1 = __Pyx_PyInt_AddObjC(__pyx_v_i, __pyx_int_1, 1, 0); if (unlikely(!__pyx_t_1)) __PYX_ERR(11, 335, __pyx_L1_error)
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) __PYX_ERR(11, 335, __pyx_L1_error)
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_p->thisptr = copyitem(__pyx_v_solns, __pyx_t_5);

    /* "gambit/lib/nash.pxi":336
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 *         ret.append(p)             # <<<<<<<<<<<<<<
 *     return ret
 */
    __pyx_t_6 = __Pyx_PyList_Append(__pyx_v_ret, ((PyObject *)__pyx_v_p)); if (unlikely(__pyx_t_6 == -1)) __PYX_ERR(11, 336, __pyx_L1_error)

    /* "gambit/lib/nash.pxi":333
 *     solns = _logit_principal_branch(p_game.game, p_maxLambda)
 *     ret = [ ]
 *     for i in xrange(solns.Length()):             # <<<<<<<<<<<<<<
 *         p = LogitQREMixedStrategyProfile()
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":337
 *         p.thisptr = copyitem_list_qrem(solns, i+1)
 *         ret.append(p)
 *     return ret             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_ret);
  __pyx_r = __pyx_v_ret;
  goto __pyx_L0;

  /* "gambit/lib/nash.pxi":328
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("gambit.lib.libgambit.logit_principal_branch", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_p);
  __Pyx_XDECREF(__pyx_v_ret);
  __Pyx_XDECREF(__pyx_v_i);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Collection(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Collection(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Collection[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Collection = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Collection, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Collection = {
  0, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Collection = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Collection", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Collection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Collection, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Collection, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of related objects in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Collection, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Collection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Action(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Action *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Action *)o);
  new((void*)&(p->action)) GameObjectPtr<GameActionRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Action(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Action *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Action *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->action);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Action_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Action_5label_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_6Action_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_6Action_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Action_infoset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Action_7infoset_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Action_prob(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Action_4prob_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_6Action_prob(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_6Action_4prob_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Action[] = {
  {"delete", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_6Action_7delete, METH_NOARGS, 0},
  {"precedes", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_6Action_9precedes, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Action[] = {
  {(char *)"label", __pyx_getprop_6gambit_3lib_9libgambit_6Action_label, __pyx_setprop_6gambit_3lib_9libgambit_6Action_label, (char *)0, 0},
  {(char *)"infoset", __pyx_getprop_6gambit_3lib_9libgambit_6Action_infoset, 0, (char *)0, 0},
  {(char *)"prob", __pyx_getprop_6gambit_3lib_9libgambit_6Action_prob, __pyx_setprop_6gambit_3lib_9libgambit_6Action_prob, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Action = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Action", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Action), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Action, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_6Action_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_6Action_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_6Action_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Action, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Action, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Action, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Members(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Members *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Members *)o);
  new((void*)&(p->infoset)) GameObjectPtr<GameInfosetRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Members(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Members *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Members *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->infoset);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Members(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Members[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Members = {
  __pyx_pw_6gambit_3lib_9libgambit_7Members_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Members, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Members = {
  __pyx_pw_6gambit_3lib_9libgambit_7Members_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_7Members_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Members = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Members", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Members), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Members, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Members, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Members, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of members of an infoset.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Members, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Members, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Actions(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Actions *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Actions *)o);
  new((void*)&(p->infoset)) GameObjectPtr<GameInfosetRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Actions(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Actions *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Actions *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->infoset);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Actions(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Actions[] = {
  {"add", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_7Actions_1add, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Actions = {
  __pyx_pw_6gambit_3lib_9libgambit_7Actions_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Actions, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Actions = {
  __pyx_pw_6gambit_3lib_9libgambit_7Actions_3__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_7Actions_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Actions = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Actions", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Actions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Actions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Actions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Actions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of actions at an infoset.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Actions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Actions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Infoset(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)o);
  new((void*)&(p->infoset)) GameObjectPtr<GameInfosetRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Infoset(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Infoset *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->infoset);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Infoset_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_4game_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Infoset_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_5label_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_7Infoset_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Infoset_is_chance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_9is_chance_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Infoset_actions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_7actions_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Infoset_members(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_7members_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Infoset_player(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_6player_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_7Infoset_player(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_7Infoset_6player_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Infoset[] = {
  {"precedes", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_7Infoset_7precedes, METH_O, 0},
  {"reveal", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_7Infoset_9reveal, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Infoset[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_7Infoset_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_6gambit_3lib_9libgambit_7Infoset_label, __pyx_setprop_6gambit_3lib_9libgambit_7Infoset_label, (char *)0, 0},
  {(char *)"is_chance", __pyx_getprop_6gambit_3lib_9libgambit_7Infoset_is_chance, 0, (char *)0, 0},
  {(char *)"actions", __pyx_getprop_6gambit_3lib_9libgambit_7Infoset_actions, 0, (char *)0, 0},
  {(char *)"members", __pyx_getprop_6gambit_3lib_9libgambit_7Infoset_members, 0, (char *)0, 0},
  {(char *)"player", __pyx_getprop_6gambit_3lib_9libgambit_7Infoset_player, __pyx_setprop_6gambit_3lib_9libgambit_7Infoset_player, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Infoset = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Infoset", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Infoset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Infoset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_7Infoset_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_7Infoset_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_7Infoset_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Infoset, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Infoset, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Infoset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Strategy(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)o);
  new((void*)&(p->strategy)) GameObjectPtr<GameStrategyRep>();
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Strategy(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->strategy);
  Py_CLEAR(p->restriction);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit_Strategy(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)o;
  if (p->restriction) {
    e = (*v)(((PyObject*)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit_Strategy(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Strategy *)o;
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_8Strategy_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_8Strategy_5label_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_8Strategy_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_8Strategy_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_8Strategy_player(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_8Strategy_6player_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_8Strategy_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_8Strategy_6number_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Strategy[] = {
  {"unrestrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_8Strategy_7unrestrict, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Strategy[] = {
  {(char *)"label", __pyx_getprop_6gambit_3lib_9libgambit_8Strategy_label, __pyx_setprop_6gambit_3lib_9libgambit_8Strategy_label, (char *)0, 0},
  {(char *)"player", __pyx_getprop_6gambit_3lib_9libgambit_8Strategy_player, 0, (char *)0, 0},
  {(char *)"number", __pyx_getprop_6gambit_3lib_9libgambit_8Strategy_number, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Strategy = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Strategy", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Strategy), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Strategy, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_8Strategy_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_8Strategy_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit_Strategy, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit_Strategy, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_8Strategy_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Strategy, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Strategy, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Strategy, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Infosets(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *)o);
  new((void*)&(p->player)) GameObjectPtr<GamePlayerRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Infosets(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Infosets *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->player);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Infosets(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Infosets[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Infosets = {
  __pyx_pw_6gambit_3lib_9libgambit_8Infosets_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Infosets, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Infosets = {
  __pyx_pw_6gambit_3lib_9libgambit_8Infosets_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_8Infosets_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Infosets = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Infosets", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Infosets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Infosets, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Infosets, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Infosets, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of infosets for a player.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Infosets, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Infosets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Strategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *)o);
  new((void*)&(p->player)) GameObjectPtr<GamePlayerRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Strategies(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Strategies *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->player);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Strategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Strategies[] = {
  {"add", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_10Strategies_1add, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Strategies = {
  __pyx_pw_6gambit_3lib_9libgambit_10Strategies_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Strategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Strategies = {
  __pyx_pw_6gambit_3lib_9libgambit_10Strategies_3__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_10Strategies_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Strategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Strategies", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Strategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Strategies, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Strategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Strategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of strategies for a player.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Strategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Strategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_PlayerSupportStrategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)o);
  p->player = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)Py_None); Py_INCREF(Py_None);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->player);
  Py_CLEAR(p->restriction);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)o;
  e = ((likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6gambit_3lib_9libgambit_PlayerSupportStrategies)); if (e) return e;
  if (p->player) {
    e = (*v)(((PyObject*)p->player), a); if (e) return e;
  }
  if (p->restriction) {
    e = (*v)(((PyObject*)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies *)o;
  if (likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6gambit_3lib_9libgambit_PlayerSupportStrategies);
  tmp = ((PyObject*)p->player);
  p->player = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_PlayerSupportStrategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_PlayerSupportStrategies[] = {
  {"add", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_1add, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_PlayerSupportStrategies = {
  __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_PlayerSupportStrategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_PlayerSupportStrategies = {
  __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_5__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_7__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_PlayerSupportStrategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.PlayerSupportStrategies", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_PlayerSupportStrategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_PlayerSupportStrategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_PlayerSupportStrategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of strategies for a player in a restriction", /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6gambit_3lib_9libgambit_23PlayerSupportStrategies_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_PlayerSupportStrategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Player(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Player *)o);
  new((void*)&(p->player)) GameObjectPtr<GamePlayerRep>();
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Player(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Player *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->player);
  Py_CLEAR(p->restriction);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit_Player(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Player *)o;
  if (p->restriction) {
    e = (*v)(((PyObject*)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit_Player(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit_Player *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Player *)o;
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_4game_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_5label_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_6Player_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_6Player_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_number(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_6number_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_is_chance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_9is_chance_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_strategies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_10strategies_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_infosets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_8infosets_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_min_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_10min_payoff_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_6Player_max_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_6Player_10max_payoff_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Player[] = {
  {"unrestrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_6Player_7unrestrict, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Player[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_6Player_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_6gambit_3lib_9libgambit_6Player_label, __pyx_setprop_6gambit_3lib_9libgambit_6Player_label, (char *)0, 0},
  {(char *)"number", __pyx_getprop_6gambit_3lib_9libgambit_6Player_number, 0, (char *)0, 0},
  {(char *)"is_chance", __pyx_getprop_6gambit_3lib_9libgambit_6Player_is_chance, 0, (char *)0, 0},
  {(char *)"strategies", __pyx_getprop_6gambit_3lib_9libgambit_6Player_strategies, 0, (char *)0, 0},
  {(char *)"infosets", __pyx_getprop_6gambit_3lib_9libgambit_6Player_infosets, 0, (char *)0, 0},
  {(char *)"min_payoff", __pyx_getprop_6gambit_3lib_9libgambit_6Player_min_payoff, 0, (char *)0, 0},
  {(char *)"max_payoff", __pyx_getprop_6gambit_3lib_9libgambit_6Player_max_payoff, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Player = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Player", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Player), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Player, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_6Player_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_6Player_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit_Player, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit_Player, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_6Player_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Player, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Player, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Player, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Outcome(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)o);
  new((void*)&(p->outcome)) GameObjectPtr<GameOutcomeRep>();
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Outcome(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->outcome);
  Py_CLEAR(p->restriction);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit_Outcome(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)o;
  if (p->restriction) {
    e = (*v)(((PyObject*)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit_Outcome(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Outcome *)o;
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Outcome(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_Outcome(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_7Outcome_11__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Outcome_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Outcome_4game_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Outcome_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Outcome_5label_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_7Outcome_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_7Outcome_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Outcome[] = {
  {"delete", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_7Outcome_7delete, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_7Outcome_13unrestrict, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Outcome[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_7Outcome_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_6gambit_3lib_9libgambit_7Outcome_label, __pyx_setprop_6gambit_3lib_9libgambit_7Outcome_label, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Outcome = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Outcome, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Outcome = {
  0, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_7Outcome_9__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_Outcome, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Outcome = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Outcome", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Outcome), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Outcome, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_7Outcome_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Outcome, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Outcome, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_7Outcome_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit_Outcome, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit_Outcome, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_7Outcome_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Outcome, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Outcome, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Outcome, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_TreeGameOutcome(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)o);
  new((void*)&(p->c_game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_TreeGameOutcome(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *p = (struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->c_game);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_TreeGameOutcome(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_TreeGameOutcome(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_9__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_15TreeGameOutcome_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_4game_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_15TreeGameOutcome_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_15TreeGameOutcome_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_TreeGameOutcome[] = {
  {"__del__", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_1__del__, METH_NOARGS, 0},
  {"delete", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_11delete, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_TreeGameOutcome[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_15TreeGameOutcome_game, 0, (char *)0, 0},
  {(char *)"label", __pyx_getprop_6gambit_3lib_9libgambit_15TreeGameOutcome_label, __pyx_setprop_6gambit_3lib_9libgambit_15TreeGameOutcome_label, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_TreeGameOutcome = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_TreeGameOutcome, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_TreeGameOutcome = {
  0, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_7__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_TreeGameOutcome, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_TreeGameOutcome = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.TreeGameOutcome", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_TreeGameOutcome), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_TreeGameOutcome, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_3__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_TreeGameOutcome, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_TreeGameOutcome, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents an outcome in a strategic game derived from an extensive game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_15TreeGameOutcome_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_TreeGameOutcome, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_TreeGameOutcome, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_TreeGameOutcome, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Children(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Children *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Children *)o);
  new((void*)&(p->parent)) GameObjectPtr<GameNodeRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Children(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Children *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Children *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->parent);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Children(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Children[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Children = {
  __pyx_pw_6gambit_3lib_9libgambit_8Children_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Children, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Children = {
  __pyx_pw_6gambit_3lib_9libgambit_8Children_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_8Children_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Children = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Children", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Children), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Children, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Children, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Children, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents the collection of direct children of a node.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Children, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Children, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Node(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Node *)o);
  new((void*)&(p->node)) GameObjectPtr<GameNodeRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Node(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Node *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Node *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->node);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_label(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_5label_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_4Node_label(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_4Node_5label_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_children(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_8children_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_4game_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_infoset(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_7infoset_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_4Node_infoset(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_4Node_7infoset_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_player(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_6player_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_parent(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_6parent_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_prior_action(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_12prior_action_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_prior_sibling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_13prior_sibling_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_next_sibling(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_12next_sibling_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_is_terminal(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_11is_terminal_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Node_outcome(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Node_7outcome_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_4Node_outcome(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_4Node_7outcome_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Node[] = {
  {"is_successor_of", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_7is_successor_of, METH_O, 0},
  {"is_subgame_root", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_9is_subgame_root, METH_NOARGS, 0},
  {"append_move", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_11append_move, METH_VARARGS|METH_KEYWORDS, 0},
  {"insert_move", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_13insert_move, METH_VARARGS|METH_KEYWORDS, 0},
  {"leave_infoset", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_15leave_infoset, METH_NOARGS, 0},
  {"delete_parent", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_17delete_parent, METH_NOARGS, 0},
  {"delete_tree", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_19delete_tree, METH_NOARGS, 0},
  {"copy_tree", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_21copy_tree, METH_O, 0},
  {"move_tree", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Node_23move_tree, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Node[] = {
  {(char *)"label", __pyx_getprop_6gambit_3lib_9libgambit_4Node_label, __pyx_setprop_6gambit_3lib_9libgambit_4Node_label, (char *)0, 0},
  {(char *)"children", __pyx_getprop_6gambit_3lib_9libgambit_4Node_children, 0, (char *)0, 0},
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_4Node_game, 0, (char *)0, 0},
  {(char *)"infoset", __pyx_getprop_6gambit_3lib_9libgambit_4Node_infoset, __pyx_setprop_6gambit_3lib_9libgambit_4Node_infoset, (char *)0, 0},
  {(char *)"player", __pyx_getprop_6gambit_3lib_9libgambit_4Node_player, 0, (char *)0, 0},
  {(char *)"parent", __pyx_getprop_6gambit_3lib_9libgambit_4Node_parent, 0, (char *)0, 0},
  {(char *)"prior_action", __pyx_getprop_6gambit_3lib_9libgambit_4Node_prior_action, 0, (char *)0, 0},
  {(char *)"prior_sibling", __pyx_getprop_6gambit_3lib_9libgambit_4Node_prior_sibling, 0, (char *)0, 0},
  {(char *)"next_sibling", __pyx_getprop_6gambit_3lib_9libgambit_4Node_next_sibling, 0, (char *)0, 0},
  {(char *)"is_terminal", __pyx_getprop_6gambit_3lib_9libgambit_4Node_is_terminal, 0, (char *)0, 0},
  {(char *)"outcome", __pyx_getprop_6gambit_3lib_9libgambit_4Node_outcome, __pyx_setprop_6gambit_3lib_9libgambit_4Node_outcome, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Node = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Node", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Node), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Node, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_4Node_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_4Node_5__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_4Node_3__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Node, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Node, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Node, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_BaseGame(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_BaseGame(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_BaseGame = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.BaseGame", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_BaseGame), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_BaseGame, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_BaseGame, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_StrategySupportProfile(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_StrategySupportProfile(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_StrategySupportProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_22StrategySupportProfile_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_StrategySupportProfile[] = {
  {"remove", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_17remove, METH_O, 0},
  {"difference", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_19difference, METH_O, 0},
  {"intersection", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_21intersection, METH_O, 0},
  {"is_valid", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_23is_valid, METH_VARARGS|METH_KEYWORDS, 0},
  {"issubset", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_25issubset, METH_O, 0},
  {"issuperset", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_27issuperset, METH_O, 0},
  {"restrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_29restrict, METH_NOARGS, 0},
  {"undominated", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_31undominated, METH_VARARGS|METH_KEYWORDS, 0},
  {"union", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_33union, METH_O, 0},
  {"unique", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_35unique, METH_O, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_StrategySupportProfile[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_22StrategySupportProfile_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PyNumberMethods __pyx_tp_as_number_StrategySupportProfile = {
  0, /*nb_add*/
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_15__sub__, /*nb_subtract*/
  0, /*nb_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_divide*/
  #endif
  0, /*nb_remainder*/
  0, /*nb_divmod*/
  0, /*nb_power*/
  0, /*nb_negative*/
  0, /*nb_positive*/
  0, /*nb_absolute*/
  0, /*nb_nonzero*/
  0, /*nb_invert*/
  0, /*nb_lshift*/
  0, /*nb_rshift*/
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_11__and__, /*nb_and*/
  0, /*nb_xor*/
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_13__or__, /*nb_or*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_coerce*/
  #endif
  0, /*nb_int*/
  #if PY_MAJOR_VERSION < 3
  0, /*nb_long*/
  #else
  0, /*reserved*/
  #endif
  0, /*nb_float*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_oct*/
  #endif
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_hex*/
  #endif
  0, /*nb_inplace_add*/
  0, /*nb_inplace_subtract*/
  0, /*nb_inplace_multiply*/
  #if PY_MAJOR_VERSION < 3 || CYTHON_COMPILING_IN_PYPY
  0, /*nb_inplace_divide*/
  #endif
  0, /*nb_inplace_remainder*/
  0, /*nb_inplace_power*/
  0, /*nb_inplace_lshift*/
  0, /*nb_inplace_rshift*/
  0, /*nb_inplace_and*/
  0, /*nb_inplace_xor*/
  0, /*nb_inplace_or*/
  0, /*nb_floor_divide*/
  0, /*nb_true_divide*/
  0, /*nb_inplace_floor_divide*/
  0, /*nb_inplace_true_divide*/
  0, /*nb_index*/
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_matrix_multiply*/
  #endif
  #if PY_VERSION_HEX >= 0x03050000
  0, /*nb_inplace_matrix_multiply*/
  #endif
};

static PySequenceMethods __pyx_tp_as_sequence_StrategySupportProfile = {
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_5__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_StrategySupportProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StrategySupportProfile = {
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_5__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_StrategySupportProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.StrategySupportProfile", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_StrategySupportProfile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  &__pyx_tp_as_number_StrategySupportProfile, /*tp_as_number*/
  &__pyx_tp_as_sequence_StrategySupportProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StrategySupportProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A set-like object representing a subset of the strategies in game, incorporating\n    the restriction that each player must have at least one strategy in the set.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_StrategySupportProfile, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_StrategySupportProfile, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6gambit_3lib_9libgambit_22StrategySupportProfile_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_StrategySupportProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_RestrictionOutcomes(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)o);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *p = (struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->restriction);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *p = (struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)o;
  e = ((likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6gambit_3lib_9libgambit_RestrictionOutcomes)); if (e) return e;
  if (p->restriction) {
    e = (*v)(((PyObject*)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *p = (struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes *)o;
  if (likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6gambit_3lib_9libgambit_RestrictionOutcomes);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_RestrictionOutcomes(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_RestrictionOutcomes[] = {
  {"add", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_7add, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_RestrictionOutcomes = {
  __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_RestrictionOutcomes, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RestrictionOutcomes = {
  __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_3__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_RestrictionOutcomes = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.RestrictionOutcomes", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionOutcomes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_RestrictionOutcomes, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_RestrictionOutcomes, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RestrictionOutcomes, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of outcomes in a restriction.", /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit_RestrictionOutcomes, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit_RestrictionOutcomes, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_RestrictionOutcomes, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6gambit_3lib_9libgambit_19RestrictionOutcomes_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_RestrictionOutcomes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_RestrictionStrategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)o);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_RestrictionStrategies(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->restriction);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit_RestrictionStrategies(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)o;
  e = ((likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6gambit_3lib_9libgambit_RestrictionStrategies)); if (e) return e;
  if (p->restriction) {
    e = (*v)(((PyObject*)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit_RestrictionStrategies(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies *)o;
  if (likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6gambit_3lib_9libgambit_RestrictionStrategies);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_RestrictionStrategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_RestrictionStrategies[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_RestrictionStrategies = {
  __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_RestrictionStrategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_RestrictionStrategies = {
  __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_3__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_RestrictionStrategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.RestrictionStrategies", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_RestrictionStrategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_RestrictionStrategies, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_RestrictionStrategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_RestrictionStrategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of strategies in a restriction.", /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit_RestrictionStrategies, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit_RestrictionStrategies, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_RestrictionStrategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6gambit_3lib_9libgambit_21RestrictionStrategies_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_RestrictionStrategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_StrategicRestriction(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_BaseGame(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_StrategicRestriction(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_BaseGame(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_StrategicRestriction(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_title(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_5title_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_players(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7players_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_strategies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10strategies_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_outcomes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_8outcomes_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_is_tree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7is_tree_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_is_const_sum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_12is_const_sum_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_is_perfect_recall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_17is_perfect_recall_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_min_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10min_payoff_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_max_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_10max_payoff_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_StrategicRestriction[] = {
  {"write", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_11write, METH_VARARGS|METH_KEYWORDS, 0},
  {"undominated", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_13undominated, METH_VARARGS|METH_KEYWORDS, 0},
  {"num_strategies_player", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_15num_strategies_player, METH_O, 0},
  {"support_profile", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_17support_profile, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_19unrestrict, METH_NOARGS, 0},
  {"_get_contingency", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_21_get_contingency, METH_VARARGS|METH_KEYWORDS, 0},
  {"mixed_strategy_profile", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_25mixed_strategy_profile, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_StrategicRestriction[] = {
  {(char *)"title", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_title, 0, (char *)0, 0},
  {(char *)"players", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_players, 0, (char *)0, 0},
  {(char *)"strategies", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_strategies, 0, (char *)0, 0},
  {(char *)"outcomes", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_outcomes, 0, (char *)0, 0},
  {(char *)"is_tree", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_is_tree, 0, (char *)0, 0},
  {(char *)"is_const_sum", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_is_const_sum, 0, (char *)0, 0},
  {(char *)"is_perfect_recall", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_is_perfect_recall, 0, (char *)0, 0},
  {(char *)"min_payoff", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_min_payoff, 0, (char *)0, 0},
  {(char *)"max_payoff", __pyx_getprop_6gambit_3lib_9libgambit_20StrategicRestriction_max_payoff, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_StrategicRestriction = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_StrategicRestriction, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_StrategicRestriction = {
  0, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_23__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_StrategicRestriction = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.StrategicRestriction", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_StrategicRestriction, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_StrategicRestriction, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_StrategicRestriction, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_9__hash__, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "\n    A StrategicRestriction is a read-only view on a game, defined by a\n    subset of the strategies on the original game.\n    ", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_7__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_StrategicRestriction, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_StrategicRestriction, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6gambit_3lib_9libgambit_20StrategicRestriction_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_StrategicRestriction, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfile(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfile(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_MixedStrategyProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_MixedStrategyProfile(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_11__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_MixedStrategyProfile[] = {
  {"_repr_latex_", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_3_repr_latex_, METH_NOARGS, 0},
  {"_resolve_index", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_7_resolve_index, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setprob_player", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_13_setprob_player, METH_VARARGS|METH_KEYWORDS, 0},
  {"payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_15payoff, METH_VARARGS|METH_KEYWORDS, 0},
  {"strategy_value", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_17strategy_value, METH_O, 0},
  {"strategy_values", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_19strategy_values, METH_VARARGS|METH_KEYWORDS, 0},
  {"strategy_value_deriv", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_21strategy_value_deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedStrategyProfile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_MixedStrategyProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedStrategyProfile = {
  0, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_MixedStrategyProfile, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.MixedStrategyProfile", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedStrategyProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedStrategyProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_MixedStrategyProfile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfileDouble(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfile(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_MixedStrategyProfileDouble[] = {
  {"_strategy_index", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_5_strategy_index, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_7_getprob, METH_O, 0},
  {"_getprob_strategy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_9_getprob_strategy, METH_O, 0},
  {"_setprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setprob_strategy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_13_setprob_strategy, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_15_payoff, METH_O, 0},
  {"_strategy_value", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_17_strategy_value, METH_O, 0},
  {"_strategy_value_deriv", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_19_strategy_value_deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_21liap_value, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_23copy, METH_NOARGS, 0},
  {"as_behavior", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_25as_behavior, METH_NOARGS, 0},
  {"restriction", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_27restriction, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_29unrestrict, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_31set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_33normalize, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_MixedStrategyProfileDouble[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedStrategyProfileDouble = {
  __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedStrategyProfileDouble = {
  __pyx_pw_6gambit_3lib_9libgambit_26MixedStrategyProfileDouble_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.MixedStrategyProfileDouble", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedStrategyProfileDouble, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedStrategyProfileDouble, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfileDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfileRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfileRational(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfile(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_MixedStrategyProfileRational[] = {
  {"_strategy_index", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_5_strategy_index, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_7_getprob, METH_O, 0},
  {"_getprob_strategy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_9_getprob_strategy, METH_O, 0},
  {"_setprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setprob_strategy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_13_setprob_strategy, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_15_payoff, METH_O, 0},
  {"_strategy_value", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_17_strategy_value, METH_O, 0},
  {"_strategy_value_deriv", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_19_strategy_value_deriv, METH_VARARGS|METH_KEYWORDS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_21liap_value, METH_NOARGS, 0},
  {"copy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_23copy, METH_NOARGS, 0},
  {"as_behavior", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_25as_behavior, METH_NOARGS, 0},
  {"restriction", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_27restriction, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_29unrestrict, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_31set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_33normalize, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_MixedStrategyProfileRational[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedStrategyProfileRational = {
  __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedStrategyProfileRational = {
  __pyx_pw_6gambit_3lib_9libgambit_28MixedStrategyProfileRational_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_9__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.MixedStrategyProfileRational", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_MixedStrategyProfileRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedStrategyProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedStrategyProfileRational, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedStrategyProfileRational, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_MixedStrategyProfileRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfile(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfile(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_MixedBehaviorProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static int __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_MixedBehaviorProfile(PyObject *o, PyObject *i, PyObject *v) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_15__setitem__(o, i, v);
  }
  else {
    PyErr_Format(PyExc_NotImplementedError,
      "Subscript deletion not supported by %.200s", Py_TYPE(o)->tp_name);
    return -1;
  }
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_MixedBehaviorProfile[] = {
  {"_repr_latex_", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_3_repr_latex_, METH_NOARGS, 0},
  {"_resolve_index", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_7_resolve_index, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setinfoset", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_9_setinfoset, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setplayer", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_11_setplayer, METH_VARARGS|METH_KEYWORDS, 0},
  {"is_defined_at", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_17is_defined_at, METH_O, 0},
  {"belief", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_19belief, METH_O, 0},
  {"action_prob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_21action_prob, METH_O, 0},
  {"payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_23payoff, METH_O, 0},
  {"realiz_prob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_25realiz_prob, METH_O, 0},
  {"regret", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_27regret, METH_O, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedBehaviorProfile = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_MixedBehaviorProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedBehaviorProfile = {
  0, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__, /*mp_subscript*/
  __pyx_mp_ass_subscript_6gambit_3lib_9libgambit_MixedBehaviorProfile, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.MixedBehaviorProfile", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedBehaviorProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedBehaviorProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_5__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_MixedBehaviorProfile, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfile(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble[] = {
  {"_is_defined_at", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_5_is_defined_at, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_7_getprob, METH_O, 0},
  {"_getaction", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_9_getaction, METH_O, 0},
  {"_setprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setaction", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_13_setaction, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_15_payoff, METH_O, 0},
  {"_belief", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_17_belief, METH_O, 0},
  {"_infoset_prob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_19_infoset_prob, METH_O, 0},
  {"_infoset_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_21_infoset_payoff, METH_O, 0},
  {"_action_prob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_23_action_prob, METH_O, 0},
  {"_action_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_25_action_payoff, METH_O, 0},
  {"_regret", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_27_regret, METH_O, 0},
  {"copy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_29copy, METH_NOARGS, 0},
  {"as_strategy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_31as_strategy, METH_NOARGS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_33liap_value, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_35set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_37normalize, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedBehaviorProfileDouble = {
  __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedBehaviorProfileDouble = {
  __pyx_pw_6gambit_3lib_9libgambit_26MixedBehaviorProfileDouble_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.MixedBehaviorProfileDouble", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedBehaviorProfileDouble, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedBehaviorProfileDouble, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfileRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfile(t, a, k);
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfileRational(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfile(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_4game_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_MixedBehaviorProfileRational[] = {
  {"_is_defined_at", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_5_is_defined_at, METH_O, 0},
  {"_getprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_7_getprob, METH_O, 0},
  {"_getaction", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_9_getaction, METH_O, 0},
  {"_setprob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_11_setprob, METH_VARARGS|METH_KEYWORDS, 0},
  {"_setaction", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_13_setaction, METH_VARARGS|METH_KEYWORDS, 0},
  {"_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_15_payoff, METH_O, 0},
  {"_belief", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_17_belief, METH_O, 0},
  {"_infoset_prob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_19_infoset_prob, METH_O, 0},
  {"_infoset_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_21_infoset_payoff, METH_O, 0},
  {"_action_prob", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_23_action_prob, METH_O, 0},
  {"_action_payoff", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_25_action_payoff, METH_O, 0},
  {"_regret", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_27_regret, METH_O, 0},
  {"copy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_29copy, METH_NOARGS, 0},
  {"as_strategy", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_31as_strategy, METH_NOARGS, 0},
  {"liap_value", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_33liap_value, METH_NOARGS, 0},
  {"set_centroid", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_35set_centroid, METH_NOARGS, 0},
  {"normalize", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_37normalize, METH_NOARGS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_MixedBehaviorProfileRational[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_game, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_MixedBehaviorProfileRational = {
  __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  0, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_MixedBehaviorProfileRational = {
  __pyx_pw_6gambit_3lib_9libgambit_28MixedBehaviorProfileRational_3__len__, /*mp_length*/
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_13__getitem__, /*mp_subscript*/
  #else
  0, /*mp_subscript*/
  #endif
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.MixedBehaviorProfileRational", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_MixedBehaviorProfileRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_20MixedBehaviorProfile_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_MixedBehaviorProfileRational, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_MixedBehaviorProfileRational, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_MixedBehaviorProfileRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Outcomes(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Outcomes(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Outcomes(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Outcomes[] = {
  {"add", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_8Outcomes_5add, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Outcomes = {
  __pyx_pw_6gambit_3lib_9libgambit_8Outcomes_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Outcomes, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Outcomes = {
  __pyx_pw_6gambit_3lib_9libgambit_8Outcomes_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_8Outcomes_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Outcomes = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Outcomes", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Outcomes), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Outcomes, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Outcomes, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Outcomes, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of outcomes in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Outcomes, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Outcomes, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Players(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Players *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Players *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Players(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Players *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Players *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  __Pyx_call_destructor(p->game);
  Py_CLEAR(p->restriction);
  #if CYTHON_COMPILING_IN_CPYTHON
  if (PyType_IS_GC(Py_TYPE(o)->tp_base))
  #endif
  PyObject_GC_Track(o);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit_Players(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit_Players *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Players *)o;
  e = ((likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) ? ((__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse) ? __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_traverse(o, v, a) : 0) : __Pyx_call_next_tp_traverse(o, v, a, __pyx_tp_traverse_6gambit_3lib_9libgambit_Players)); if (e) return e;
  if (p->restriction) {
    e = (*v)(((PyObject*)p->restriction), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit_Players(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit_Players *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Players *)o;
  if (likely(__pyx_ptype_6gambit_3lib_9libgambit_Collection)) { if (__pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear) __pyx_ptype_6gambit_3lib_9libgambit_Collection->tp_clear(o); } else __Pyx_call_next_tp_clear(o, __pyx_tp_clear_6gambit_3lib_9libgambit_Players);
  tmp = ((PyObject*)p->restriction);
  p->restriction = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategicRestriction *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Players(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_7Players_chance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_7Players_6chance_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Players[] = {
  {"add", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_7Players_5add, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Players[] = {
  {(char *)"chance", __pyx_getprop_6gambit_3lib_9libgambit_7Players_chance, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Players = {
  __pyx_pw_6gambit_3lib_9libgambit_7Players_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Players, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Players = {
  __pyx_pw_6gambit_3lib_9libgambit_7Players_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_7Players_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Players = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Players", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Players), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Players, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Players, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Players, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  "Represents a collection of players in a game.", /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit_Players, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit_Players, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Players, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Players, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Players, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_GameActions(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_GameActions(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *p = (struct __pyx_obj_6gambit_3lib_9libgambit_GameActions *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_GameActions(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_GameActions[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GameActions = {
  __pyx_pw_6gambit_3lib_9libgambit_11GameActions_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_GameActions, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GameActions = {
  __pyx_pw_6gambit_3lib_9libgambit_11GameActions_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_11GameActions_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_GameActions = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.GameActions", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_GameActions), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_GameActions, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GameActions, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GameActions, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of actions in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_GameActions, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_GameActions, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_GameInfosets(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_GameInfosets(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *p = (struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_GameInfosets(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_GameInfosets[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GameInfosets = {
  __pyx_pw_6gambit_3lib_9libgambit_12GameInfosets_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_GameInfosets, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GameInfosets = {
  __pyx_pw_6gambit_3lib_9libgambit_12GameInfosets_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_12GameInfosets_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_GameInfosets = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.GameInfosets", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_GameInfosets), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_GameInfosets, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GameInfosets, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GameInfosets, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of infosets in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_GameInfosets, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_GameInfosets, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_GameStrategies(PyTypeObject *t, PyObject *a, PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *p;
  PyObject *o = __pyx_tp_new_6gambit_3lib_9libgambit_Collection(t, a, k);
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_GameStrategies(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *p = (struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Collection(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_GameStrategies(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_GameStrategies[] = {
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_GameStrategies = {
  __pyx_pw_6gambit_3lib_9libgambit_14GameStrategies_1__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_GameStrategies, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_GameStrategies = {
  __pyx_pw_6gambit_3lib_9libgambit_14GameStrategies_1__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_14GameStrategies_3__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_GameStrategies = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.GameStrategies", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_GameStrategies), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_GameStrategies, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  #if CYTHON_COMPILING_IN_PYPY
  __pyx_pw_6gambit_3lib_9libgambit_10Collection_1__repr__, /*tp_repr*/
  #else
  0, /*tp_repr*/
  #endif
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_GameStrategies, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_GameStrategies, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "Represents a collection of strategies in a game.", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_GameStrategies, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_GameStrategies, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_Game(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)o);
  new((void*)&(p->game)) GameObjectPtr<GameRep>();
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_Game(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit_Game *p = (struct __pyx_obj_6gambit_3lib_9libgambit_Game *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->game);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_Game(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_is_tree(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_7is_tree_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_title(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_5title_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_4Game_title(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_4Game_5title_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_comment(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_7comment_1__get__(o);
}

static int __pyx_setprop_6gambit_3lib_9libgambit_4Game_comment(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_6gambit_3lib_9libgambit_4Game_7comment_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_actions(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_7actions_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_infosets(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_8infosets_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_players(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_7players_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_strategies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_10strategies_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_outcomes(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_8outcomes_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_contingencies(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_13contingencies_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_root(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_4root_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_is_const_sum(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_12is_const_sum_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_is_perfect_recall(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_17is_perfect_recall_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_min_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_10min_payoff_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_4Game_max_payoff(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_4Game_10max_payoff_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_Game[] = {
  {"new_tree", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_1new_tree, METH_NOARGS, 0},
  {"new_table", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_3new_table, METH_O, 0},
  {"from_arrays", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_5from_arrays, METH_VARARGS|METH_KEYWORDS, 0},
  {"read_game", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_7read_game, METH_O, 0},
  {"parse_game", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_9parse_game, METH_O, 0},
  {"_get_contingency", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_19_get_contingency, METH_VARARGS|METH_KEYWORDS, 0},
  {"mixed_strategy_profile", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_23mixed_strategy_profile, METH_VARARGS|METH_KEYWORDS, 0},
  {"mixed_behavior_profile", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_25mixed_behavior_profile, METH_VARARGS|METH_KEYWORDS, 0},
  {"support_profile", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_27support_profile, METH_NOARGS, 0},
  {"num_nodes", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_29num_nodes, METH_NOARGS, 0},
  {"unrestrict", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_31unrestrict, METH_NOARGS, 0},
  {"write", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_4Game_33write, METH_VARARGS|METH_KEYWORDS, 0},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_Game[] = {
  {(char *)"is_tree", __pyx_getprop_6gambit_3lib_9libgambit_4Game_is_tree, 0, (char *)0, 0},
  {(char *)"title", __pyx_getprop_6gambit_3lib_9libgambit_4Game_title, __pyx_setprop_6gambit_3lib_9libgambit_4Game_title, (char *)0, 0},
  {(char *)"comment", __pyx_getprop_6gambit_3lib_9libgambit_4Game_comment, __pyx_setprop_6gambit_3lib_9libgambit_4Game_comment, (char *)0, 0},
  {(char *)"actions", __pyx_getprop_6gambit_3lib_9libgambit_4Game_actions, 0, (char *)0, 0},
  {(char *)"infosets", __pyx_getprop_6gambit_3lib_9libgambit_4Game_infosets, 0, (char *)0, 0},
  {(char *)"players", __pyx_getprop_6gambit_3lib_9libgambit_4Game_players, 0, (char *)0, 0},
  {(char *)"strategies", __pyx_getprop_6gambit_3lib_9libgambit_4Game_strategies, 0, (char *)0, 0},
  {(char *)"outcomes", __pyx_getprop_6gambit_3lib_9libgambit_4Game_outcomes, 0, (char *)0, 0},
  {(char *)"contingencies", __pyx_getprop_6gambit_3lib_9libgambit_4Game_contingencies, 0, (char *)0, 0},
  {(char *)"root", __pyx_getprop_6gambit_3lib_9libgambit_4Game_root, 0, (char *)0, 0},
  {(char *)"is_const_sum", __pyx_getprop_6gambit_3lib_9libgambit_4Game_is_const_sum, 0, (char *)0, 0},
  {(char *)"is_perfect_recall", __pyx_getprop_6gambit_3lib_9libgambit_4Game_is_perfect_recall, 0, (char *)0, 0},
  {(char *)"min_payoff", __pyx_getprop_6gambit_3lib_9libgambit_4Game_min_payoff, 0, (char *)0, 0},
  {(char *)"max_payoff", __pyx_getprop_6gambit_3lib_9libgambit_4Game_max_payoff, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_Game = {
  0, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_Game, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_Game = {
  0, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_4Game_21__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_Game = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.Game", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_Game), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_Game, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_4Game_13__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_Game, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_Game, /*tp_as_mapping*/
  __pyx_pw_6gambit_3lib_9libgambit_4Game_17__hash__, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6gambit_3lib_9libgambit_4Game_11__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  __pyx_pw_6gambit_3lib_9libgambit_4Game_15__richcmp__, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_Game, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_Game, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_Game, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_EnumPureStrategySolver(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_EnumPureStrategySolver(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_EnumPureStrategySolver[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22EnumPureStrategySolver_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_EnumPureStrategySolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.EnumPureStrategySolver", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureStrategySolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_EnumPureStrategySolver, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_EnumPureStrategySolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_EnumPureStrategySolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_EnumPureAgentSolver(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_EnumPureAgentSolver(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_EnumPureAgentSolver[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_19EnumPureAgentSolver_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_EnumPureAgentSolver = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.EnumPureAgentSolver", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_EnumPureAgentSolver), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_EnumPureAgentSolver, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_EnumPureAgentSolver, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_EnumPureAgentSolver, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_23LCPBehaviorSolverDouble_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LCPBehaviorSolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPBehaviorSolverRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPBehaviorSolverRational(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LCPBehaviorSolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_25LCPBehaviorSolverRational_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LCPBehaviorSolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LCPBehaviorSolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPBehaviorSolverRational, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LCPBehaviorSolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LCPBehaviorSolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPStrategySolverDouble(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPStrategySolverDouble(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LCPStrategySolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_23LCPStrategySolverDouble_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LCPStrategySolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPStrategySolverDouble, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LCPStrategySolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LCPStrategySolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LCPStrategySolverRational(PyTypeObject *t, PyObject *a, PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_1__cinit__(o, a, k) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPStrategySolverRational(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LCPStrategySolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_25LCPStrategySolverRational_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LCPStrategySolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LCPStrategySolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LCPStrategySolverRational, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LCPStrategySolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LCPStrategySolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPBehaviorSolverDouble(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPBehaviorSolverDouble(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LPBehaviorSolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22LPBehaviorSolverDouble_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LPBehaviorSolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPBehaviorSolverDouble, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LPBehaviorSolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LPBehaviorSolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPBehaviorSolverRational(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPBehaviorSolverRational(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LPBehaviorSolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_24LPBehaviorSolverRational_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LPBehaviorSolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LPBehaviorSolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPBehaviorSolverRational, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LPBehaviorSolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LPBehaviorSolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPStrategySolverDouble(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPStrategySolverDouble(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LPStrategySolverDouble[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_22LPStrategySolverDouble_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LPStrategySolverDouble = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LPStrategySolverDouble", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverDouble), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPStrategySolverDouble, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LPStrategySolverDouble, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LPStrategySolverDouble, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LPStrategySolverRational(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  if (unlikely(__pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPStrategySolverRational(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LPStrategySolverRational[] = {
  {"solve", (PyCFunction)__pyx_pw_6gambit_3lib_9libgambit_24LPStrategySolverRational_5solve, METH_O, 0},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LPStrategySolverRational = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LPStrategySolverRational", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LPStrategySolverRational), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LPStrategySolverRational, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LPStrategySolverRational, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LPStrategySolverRational, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_game(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_4game_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_lam(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_3lam_1__get__(o);
}

static PyObject *__pyx_getprop_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_profile(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7profile_1__get__(o);
}

static PyMethodDef __pyx_methods_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile[] = {
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile[] = {
  {(char *)"game", __pyx_getprop_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_game, 0, (char *)0, 0},
  {(char *)"lam", __pyx_getprop_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_lam, 0, (char *)0, 0},
  {(char *)"profile", __pyx_getprop_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_profile, 0, (char *)0, 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_LogitQREMixedStrategyProfile = {
  __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_LogitQREMixedStrategyProfile = {
  __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_7__len__, /*mp_length*/
  __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.LogitQREMixedStrategyProfile", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_5__repr__, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_LogitQREMixedStrategyProfile, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_LogitQREMixedStrategyProfile, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6gambit_3lib_9libgambit_28LogitQREMixedStrategyProfile_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct__remove[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct__remove = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct__remove(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct__remove > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct__remove[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct__remove];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct__remove(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_strategy);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct__remove < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct__remove[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct__remove++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct__remove(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *)o;
  if (p->__pyx_v_strategy) {
    e = (*v)(p->__pyx_v_strategy, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct__remove(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove *)o;
  tmp = ((PyObject*)p->__pyx_v_strategy);
  p->__pyx_v_strategy = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct__remove = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct__remove", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct__remove), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct__remove, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_other);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o;
  if (p->__pyx_v_other) {
    e = (*v)(((PyObject*)p->__pyx_v_other), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference *)o;
  tmp = ((PyObject*)p->__pyx_v_other);
  p->__pyx_v_other = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_1_difference", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_other);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o;
  if (p->__pyx_v_other) {
    e = (*v)(((PyObject*)p->__pyx_v_other), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection *)o;
  tmp = ((PyObject*)p->__pyx_v_other);
  p->__pyx_v_other = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_2_intersection", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_other);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o;
  if (p->__pyx_v_other) {
    e = (*v)(((PyObject*)p->__pyx_v_other), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset *)o;
  tmp = ((PyObject*)p->__pyx_v_other);
  p->__pyx_v_other = ((struct __pyx_obj_6gambit_3lib_9libgambit_StrategySupportProfile *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_3_issubset", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_index);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o;
  if (p->__pyx_v_index) {
    e = (*v)(p->__pyx_v_index, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index *)o;
  tmp = ((PyObject*)p->__pyx_v_index);
  p->__pyx_v_index = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_4__resolve_index", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_5__repr_latex_", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_6_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_index);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o;
  if (p->__pyx_v_index) {
    e = (*v)(p->__pyx_v_index, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index *)o;
  tmp = ((PyObject*)p->__pyx_v_index);
  p->__pyx_v_index = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_7__resolve_index", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_8__repr_latex_", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_9_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_self);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o;
  if (p->__pyx_v_self) {
    e = (*v)(p->__pyx_v_self, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)o;
  tmp = ((PyObject*)p->__pyx_v_self);
  p->__pyx_v_self = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_10__repr_latex_", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_i);
  Py_CLEAR(p->__pyx_t_0);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_i) {
    e = (*v)(p->__pyx_v_i, a); if (e) return e;
  }
  if (p->__pyx_t_0) {
    e = (*v)(p->__pyx_t_0, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_i);
  p->__pyx_v_i = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_t_0);
  p->__pyx_t_0 = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_11_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_v_arrays);
  Py_CLEAR(p->__pyx_v_g);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o;
  if (p->__pyx_v_arrays) {
    e = (*v)(p->__pyx_v_arrays, a); if (e) return e;
  }
  if (p->__pyx_v_g) {
    e = (*v)(((PyObject*)p->__pyx_v_g), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)o;
  tmp = ((PyObject*)p->__pyx_v_arrays);
  p->__pyx_v_arrays = ((PyObject*)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_g);
  p->__pyx_v_g = ((struct __pyx_obj_6gambit_3lib_9libgambit_Game *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_12_from_arrays", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  Py_CLEAR(p->__pyx_v_a);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  if (p->__pyx_v_a) {
    e = (*v)(p->__pyx_v_a, a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  tmp = ((PyObject*)p->__pyx_v_a);
  p->__pyx_v_a = Py_None; Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_13_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr[8];
static int __pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = 0;

static PyObject *__pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  PyObject *o;
  if (CYTHON_COMPILING_IN_CPYTHON && likely((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr > 0) & (t->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr)))) {
    o = (PyObject*)__pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr[--__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr];
    memset(o, 0, sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr));
    (void) PyObject_INIT(o, t);
    PyObject_GC_Track(o);
  } else {
    o = (*t->tp_alloc)(t, 0);
    if (unlikely(!o)) return 0;
  }
  return o;
}

static void __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyObject *o) {
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)o;
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->__pyx_outer_scope);
  if (CYTHON_COMPILING_IN_CPYTHON && ((__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr < 8) & (Py_TYPE(o)->tp_basicsize == sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr)))) {
    __pyx_freelist_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr[__pyx_freecount_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr++] = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)o);
  } else {
    (*Py_TYPE(o)->tp_free)(o);
  }
}

static int __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)o;
  if (p->__pyx_outer_scope) {
    e = (*v)(((PyObject*)p->__pyx_outer_scope), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *p = (struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr *)o;
  tmp = ((PyObject*)p->__pyx_outer_scope);
  p->__pyx_outer_scope = ((struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}

static PyTypeObject __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = {
  PyVarObject_HEAD_INIT(0, 0)
  "gambit.lib.libgambit.__pyx_scope_struct_14_genexpr", /*tp_name*/
  sizeof(struct __pyx_obj_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, /*tp_traverse*/
  __pyx_tp_clear_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  0, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "libgambit",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_Action_d_s_at_infoset_s_for_pla, __pyx_k_Action_d_s_at_infoset_s_for_pla, sizeof(__pyx_k_Action_d_s_at_infoset_s_for_pla), 0, 0, 1, 0},
  {&__pyx_kp_s_Adding_strategies_is_only_applic, __pyx_k_Adding_strategies_is_only_applic, sizeof(__pyx_k_Adding_strategies_is_only_applic), 0, 0, 1, 0},
  {&__pyx_kp_s_Adding_strategies_is_only_applic_2, __pyx_k_Adding_strategies_is_only_applic_2, sizeof(__pyx_k_Adding_strategies_is_only_applic_2), 0, 0, 1, 0},
  {&__pyx_kp_s_All_specified_arrays_must_have_t, __pyx_k_All_specified_arrays_must_have_t, sizeof(__pyx_k_All_specified_arrays_must_have_t), 0, 0, 1, 0},
  {&__pyx_kp_s_Another_outcome_with_an_identica, __pyx_k_Another_outcome_with_an_identica, sizeof(__pyx_k_Another_outcome_with_an_identica), 0, 0, 1, 0},
  {&__pyx_kp_s_Another_player_with_an_identical, __pyx_k_Another_player_with_an_identical, sizeof(__pyx_k_Another_player_with_an_identical), 0, 0, 1, 0},
  {&__pyx_kp_s_Cannot_modify_outcomes_in_a_deri, __pyx_k_Cannot_modify_outcomes_in_a_deri, sizeof(__pyx_k_Cannot_modify_outcomes_in_a_deri), 0, 0, 1, 0},
  {&__pyx_kp_s_Changing_objects_in_a_restrictio, __pyx_k_Changing_objects_in_a_restrictio, sizeof(__pyx_k_Changing_objects_in_a_restrictio), 0, 0, 1, 0},
  {&__pyx_kp_s_Changing_objects_in_a_support_is, __pyx_k_Changing_objects_in_a_support_is, sizeof(__pyx_k_Changing_objects_in_a_support_is), 0, 0, 1, 0},
  {&__pyx_n_s_Contingencies, __pyx_k_Contingencies, sizeof(__pyx_k_Contingencies), 0, 0, 1, 1},
  {&__pyx_n_s_Decimal, __pyx_k_Decimal, sizeof(__pyx_k_Decimal), 0, 0, 1, 1},
  {&__pyx_n_s_Filler, __pyx_k_Filler, sizeof(__pyx_k_Filler), 0, 0, 1, 1},
  {&__pyx_n_s_Fraction, __pyx_k_Fraction, sizeof(__pyx_k_Fraction), 0, 0, 1, 1},
  {&__pyx_kp_s_Game_must_have_a_tree_representa, __pyx_k_Game_must_have_a_tree_representa, sizeof(__pyx_k_Game_must_have_a_tree_representa), 0, 0, 1, 0},
  {&__pyx_kp_s_Game_s, __pyx_k_Game_s, sizeof(__pyx_k_Game_s), 0, 0, 1, 0},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_kp_s_Index_out_of_range, __pyx_k_Index_out_of_range, sizeof(__pyx_k_Index_out_of_range), 0, 0, 1, 0},
  {&__pyx_kp_s_Infoset_d_s_for_player_s_in_gam, __pyx_k_Infoset_d_s_for_player_s_in_gam, sizeof(__pyx_k_Infoset_d_s_for_player_s_in_gam), 0, 0, 1, 0},
  {&__pyx_n_s_KeyError, __pyx_k_KeyError, sizeof(__pyx_k_KeyError), 0, 0, 1, 1},
  {&__pyx_kp_s_LogitQREMixedStrategyProfile_lam, __pyx_k_LogitQREMixedStrategyProfile_lam, sizeof(__pyx_k_LogitQREMixedStrategyProfile_lam), 0, 0, 1, 0},
  {&__pyx_n_s_MismatchError, __pyx_k_MismatchError, sizeof(__pyx_k_MismatchError), 0, 0, 1, 1},
  {&__pyx_n_s_MixedBehav, __pyx_k_MixedBehav, sizeof(__pyx_k_MixedBehav), 0, 0, 1, 1},
  {&__pyx_n_s_MixedBehavInfoset, __pyx_k_MixedBehavInfoset, sizeof(__pyx_k_MixedBehavInfoset), 0, 0, 1, 1},
  {&__pyx_n_s_MixedStrategy, __pyx_k_MixedStrategy, sizeof(__pyx_k_MixedStrategy), 0, 0, 1, 1},
  {&__pyx_kp_s_Mixed_behavior_profiles_are_not, __pyx_k_Mixed_behavior_profiles_are_not, sizeof(__pyx_k_Mixed_behavior_profiles_are_not), 0, 0, 1, 0},
  {&__pyx_kp_s_Mixed_strategies_not_supported_f, __pyx_k_Mixed_strategies_not_supported_f, sizeof(__pyx_k_Mixed_strategies_not_supported_f), 0, 0, 1, 0},
  {&__pyx_kp_s_Must_use_a_tuple_of_ints_strateg, __pyx_k_Must_use_a_tuple_of_ints_strateg, sizeof(__pyx_k_Must_use_a_tuple_of_ints_strateg), 0, 0, 1, 0},
  {&__pyx_kp_s_Node_d_s_in_game_s, __pyx_k_Node_d_s_in_game_s, sizeof(__pyx_k_Node_d_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_kp_s_Number_of_strategies_is_not_equa, __pyx_k_Number_of_strategies_is_not_equa, sizeof(__pyx_k_Number_of_strategies_is_not_equa), 0, 0, 1, 0},
  {&__pyx_kp_s_Operation_only_defined_for_games, __pyx_k_Operation_only_defined_for_games, sizeof(__pyx_k_Operation_only_defined_for_games), 0, 0, 1, 0},
  {&__pyx_kp_s_Outcome_d_s_in_game_s, __pyx_k_Outcome_d_s_in_game_s, sizeof(__pyx_k_Outcome_d_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Outcome_s_in_game_s, __pyx_k_Outcome_s_in_game_s, sizeof(__pyx_k_Outcome_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Player_CHANCE_in_game_s, __pyx_k_Player_CHANCE_in_game_s, sizeof(__pyx_k_Player_CHANCE_in_game_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Player_d_s_in_game_s, __pyx_k_Player_d_s_in_game_s, sizeof(__pyx_k_Player_d_s_in_game_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Precedes_takes_a_Node_object_as, __pyx_k_Precedes_takes_a_Node_object_as, sizeof(__pyx_k_Precedes_takes_a_Node_object_as), 0, 0, 1, 0},
  {&__pyx_kp_s_Provided_strategy_index_d_out_of, __pyx_k_Provided_strategy_index_d_out_of, sizeof(__pyx_k_Provided_strategy_index_d_out_of), 0, 0, 1, 0},
  {&__pyx_kp_s_Provided_strategy_label_s_not_de, __pyx_k_Provided_strategy_label_s_not_de, sizeof(__pyx_k_Provided_strategy_label_s_not_de), 0, 0, 1, 0},
  {&__pyx_kp_s_Provided_strategy_s_not_availabl, __pyx_k_Provided_strategy_s_not_availabl, sizeof(__pyx_k_Provided_strategy_s_not_availabl), 0, 0, 1, 0},
  {&__pyx_n_s_Rational, __pyx_k_Rational, sizeof(__pyx_k_Rational), 0, 0, 1, 1},
  {&__pyx_n_s_Rational__repr_latex, __pyx_k_Rational__repr_latex, sizeof(__pyx_k_Rational__repr_latex), 0, 0, 1, 1},
  {&__pyx_kp_s_Restriction_from_Game_s, __pyx_k_Restriction_from_Game_s, sizeof(__pyx_k_Restriction_from_Game_s), 0, 0, 1, 0},
  {&__pyx_kp_s_Reveal_takes_a_Player_object_as, __pyx_k_Reveal_takes_a_Player_object_as, sizeof(__pyx_k_Reveal_takes_a_Player_object_as), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Strategy_d_s_for_player_s_in_ga, __pyx_k_Strategy_d_s_for_player_s_in_ga, sizeof(__pyx_k_Strategy_d_s_for_player_s_in_ga), 0, 0, 1, 0},
  {&__pyx_kp_s_The_new_action_should_be_from_th, __pyx_k_The_new_action_should_be_from_th, sizeof(__pyx_k_The_new_action_should_be_from_th), 0, 0, 1, 0},
  {&__pyx_kp_s_This_player_has_another_strategy, __pyx_k_This_player_has_another_strategy, sizeof(__pyx_k_This_player_has_another_strategy), 0, 0, 1, 0},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_read_game_from_file_s, __pyx_k_Unable_to_read_game_from_file_s, sizeof(__pyx_k_Unable_to_read_game_from_file_s), 0, 0, 1, 0},
  {&__pyx_n_s_UndefinedOperationError, __pyx_k_UndefinedOperationError, sizeof(__pyx_k_UndefinedOperationError), 0, 0, 1, 1},
  {&__pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_k_Users_arbiter_git_gambit_src_py, sizeof(__pyx_k_Users_arbiter_git_gambit_src_py), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_k_Users_arbiter_git_gambit_src_py_2, sizeof(__pyx_k_Users_arbiter_git_gambit_src_py_2), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_arbiter_git_gambit_src_py_3, __pyx_k_Users_arbiter_git_gambit_src_py_3, sizeof(__pyx_k_Users_arbiter_git_gambit_src_py_3), 0, 0, 1, 0},
  {&__pyx_kp_s_Users_arbiter_git_gambit_src_py_4, __pyx_k_Users_arbiter_git_gambit_src_py_4, sizeof(__pyx_k_Users_arbiter_git_gambit_src_py_4), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_kp_s__18, __pyx_k__18, sizeof(__pyx_k__18), 0, 0, 1, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_kp_s__42, __pyx_k__42, sizeof(__pyx_k__42), 0, 0, 1, 0},
  {&__pyx_kp_s__8, __pyx_k__8, sizeof(__pyx_k__8), 0, 0, 1, 0},
  {&__pyx_n_s_acc, __pyx_k_acc, sizeof(__pyx_k_acc), 0, 0, 1, 1},
  {&__pyx_n_s_action, __pyx_k_action, sizeof(__pyx_k_action), 0, 0, 1, 1},
  {&__pyx_n_s_action_payoff, __pyx_k_action_payoff, sizeof(__pyx_k_action_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_action_prob, __pyx_k_action_prob, sizeof(__pyx_k_action_prob), 0, 0, 1, 1},
  {&__pyx_n_s_actions, __pyx_k_actions, sizeof(__pyx_k_actions), 0, 0, 1, 1},
  {&__pyx_kp_s_append_move_accepts_either_a_Pla, __pyx_k_append_move_accepts_either_a_Pla, sizeof(__pyx_k_append_move_accepts_either_a_Pla), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_can_only_be_applied, __pyx_k_append_move_can_only_be_applied, sizeof(__pyx_k_append_move_can_only_be_applied), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_can_only_be_applied_2, __pyx_k_append_move_can_only_be_applied_2, sizeof(__pyx_k_append_move_can_only_be_applied_2), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_requires_actions_1, __pyx_k_append_move_requires_actions_1, sizeof(__pyx_k_append_move_requires_actions_1), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_with_a_Player_requir, __pyx_k_append_move_with_a_Player_requir, sizeof(__pyx_k_append_move_with_a_Player_requir), 0, 0, 1, 0},
  {&__pyx_kp_s_append_move_with_an_Infoset_cann, __pyx_k_append_move_with_an_Infoset_cann, sizeof(__pyx_k_append_move_with_an_Infoset_cann), 0, 0, 1, 0},
  {&__pyx_n_s_args, __pyx_k_args, sizeof(__pyx_k_args), 0, 0, 1, 1},
  {&__pyx_n_s_belief, __pyx_k_belief, sizeof(__pyx_k_belief), 0, 0, 1, 1},
  {&__pyx_kp_s_cannot_remove_last_strategy_of_a, __pyx_k_cannot_remove_last_strategy_of_a, sizeof(__pyx_k_cannot_remove_last_strategy_of_a), 0, 0, 1, 0},
  {&__pyx_n_s_children, __pyx_k_children, sizeof(__pyx_k_children), 0, 0, 1, 1},
  {&__pyx_n_s_class, __pyx_k_class, sizeof(__pyx_k_class), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_kp_s_collection_indexes_must_be_int_o, __pyx_k_collection_indexes_must_be_int_o, sizeof(__pyx_k_collection_indexes_must_be_int_o), 0, 0, 1, 0},
  {&__pyx_kp_s_contingency_must_be_a_tuple_like, __pyx_k_contingency_must_be_a_tuple_like, sizeof(__pyx_k_contingency_must_be_a_tuple_like), 0, 0, 1, 0},
  {&__pyx_kp_s_copy_tree_can_only_be_applied_be, __pyx_k_copy_tree_can_only_be_applied_be, sizeof(__pyx_k_copy_tree_can_only_be_applied_be), 0, 0, 1, 0},
  {&__pyx_kp_s_copy_tree_takes_a_Node_object_as, __pyx_k_copy_tree_takes_a_Node_object_as, sizeof(__pyx_k_copy_tree_takes_a_Node_object_as), 0, 0, 1, 0},
  {&__pyx_n_s_count, __pyx_k_count, sizeof(__pyx_k_count), 0, 0, 1, 1},
  {&__pyx_n_s_decimal, __pyx_k_decimal, sizeof(__pyx_k_decimal), 0, 0, 1, 1},
  {&__pyx_kp_s_delete_requires_a_Strategy_objec, __pyx_k_delete_requires_a_Strategy_objec, sizeof(__pyx_k_delete_requires_a_Strategy_objec), 0, 0, 1, 0},
  {&__pyx_n_s_denominator, __pyx_k_denominator, sizeof(__pyx_k_denominator), 0, 0, 1, 1},
  {&__pyx_n_s_difference, __pyx_k_difference, sizeof(__pyx_k_difference), 0, 0, 1, 1},
  {&__pyx_n_s_difference_locals_lambda, __pyx_k_difference_locals_lambda, sizeof(__pyx_k_difference_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_enumerate, __pyx_k_enumerate, sizeof(__pyx_k_enumerate), 0, 0, 1, 1},
  {&__pyx_n_s_eq, __pyx_k_eq, sizeof(__pyx_k_eq), 0, 0, 1, 1},
  {&__pyx_n_s_external, __pyx_k_external, sizeof(__pyx_k_external), 0, 0, 1, 1},
  {&__pyx_n_s_fillvalue, __pyx_k_fillvalue, sizeof(__pyx_k_fillvalue), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_format, __pyx_k_format, sizeof(__pyx_k_format), 0, 0, 1, 1},
  {&__pyx_kp_s_frac_s_s, __pyx_k_frac_s_s, sizeof(__pyx_k_frac_s_s), 0, 0, 1, 0},
  {&__pyx_n_s_fractions, __pyx_k_fractions, sizeof(__pyx_k_fractions), 0, 0, 1, 1},
  {&__pyx_n_s_from_arrays, __pyx_k_from_arrays, sizeof(__pyx_k_from_arrays), 0, 0, 1, 1},
  {&__pyx_n_s_from_arrays_locals_genexpr, __pyx_k_from_arrays_locals_genexpr, sizeof(__pyx_k_from_arrays_locals_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_gambit, __pyx_k_gambit, sizeof(__pyx_k_gambit), 0, 0, 1, 1},
  {&__pyx_n_s_gambit_gameiter, __pyx_k_gambit_gameiter, sizeof(__pyx_k_gambit_gameiter), 0, 0, 1, 1},
  {&__pyx_n_s_gambit_gte, __pyx_k_gambit_gte, sizeof(__pyx_k_gambit_gte), 0, 0, 1, 1},
  {&__pyx_n_s_gambit_lib_error, __pyx_k_gambit_lib_error, sizeof(__pyx_k_gambit_lib_error), 0, 0, 1, 1},
  {&__pyx_n_s_gambit_lib_libgambit, __pyx_k_gambit_lib_libgambit, sizeof(__pyx_k_gambit_lib_libgambit), 0, 0, 1, 1},
  {&__pyx_n_s_game, __pyx_k_game, sizeof(__pyx_k_game), 0, 0, 1, 1},
  {&__pyx_n_s_gameiter, __pyx_k_gameiter, sizeof(__pyx_k_gameiter), 0, 0, 1, 1},
  {&__pyx_n_s_genexpr, __pyx_k_genexpr, sizeof(__pyx_k_genexpr), 0, 0, 1, 1},
  {&__pyx_n_s_get_contingency, __pyx_k_get_contingency, sizeof(__pyx_k_get_contingency), 0, 0, 1, 1},
  {&__pyx_n_s_getaction, __pyx_k_getaction, sizeof(__pyx_k_getaction), 0, 0, 1, 1},
  {&__pyx_n_s_getitem, __pyx_k_getitem, sizeof(__pyx_k_getitem), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav, __pyx_k_getitem___locals_MixedBehav, sizeof(__pyx_k_getitem___locals_MixedBehav), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf, __pyx_k_getitem___locals_MixedBehavInf, sizeof(__pyx_k_getitem___locals_MixedBehavInf), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_2, __pyx_k_getitem___locals_MixedBehavInf_2, sizeof(__pyx_k_getitem___locals_MixedBehavInf_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_3, __pyx_k_getitem___locals_MixedBehavInf_3, sizeof(__pyx_k_getitem___locals_MixedBehavInf_3), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_4, __pyx_k_getitem___locals_MixedBehavInf_4, sizeof(__pyx_k_getitem___locals_MixedBehavInf_4), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_5, __pyx_k_getitem___locals_MixedBehavInf_5, sizeof(__pyx_k_getitem___locals_MixedBehavInf_5), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_6, __pyx_k_getitem___locals_MixedBehavInf_6, sizeof(__pyx_k_getitem___locals_MixedBehavInf_6), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_7, __pyx_k_getitem___locals_MixedBehavInf_7, sizeof(__pyx_k_getitem___locals_MixedBehavInf_7), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_8, __pyx_k_getitem___locals_MixedBehavInf_8, sizeof(__pyx_k_getitem___locals_MixedBehavInf_8), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehavInf_9, __pyx_k_getitem___locals_MixedBehavInf_9, sizeof(__pyx_k_getitem___locals_MixedBehavInf_9), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_2, __pyx_k_getitem___locals_MixedBehav_2, sizeof(__pyx_k_getitem___locals_MixedBehav_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_3, __pyx_k_getitem___locals_MixedBehav_3, sizeof(__pyx_k_getitem___locals_MixedBehav_3), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_4, __pyx_k_getitem___locals_MixedBehav_4, sizeof(__pyx_k_getitem___locals_MixedBehav_4), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_5, __pyx_k_getitem___locals_MixedBehav_5, sizeof(__pyx_k_getitem___locals_MixedBehav_5), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_6, __pyx_k_getitem___locals_MixedBehav_6, sizeof(__pyx_k_getitem___locals_MixedBehav_6), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav_7, __pyx_k_getitem___locals_MixedBehav_7, sizeof(__pyx_k_getitem___locals_MixedBehav_7), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav__r, __pyx_k_getitem___locals_MixedBehav__r, sizeof(__pyx_k_getitem___locals_MixedBehav__r), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedBehav__r_2, __pyx_k_getitem___locals_MixedBehav__r_2, sizeof(__pyx_k_getitem___locals_MixedBehav__r_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy, __pyx_k_getitem___locals_MixedStrategy, sizeof(__pyx_k_getitem___locals_MixedStrategy), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_2, __pyx_k_getitem___locals_MixedStrategy_2, sizeof(__pyx_k_getitem___locals_MixedStrategy_2), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_3, __pyx_k_getitem___locals_MixedStrategy_3, sizeof(__pyx_k_getitem___locals_MixedStrategy_3), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_4, __pyx_k_getitem___locals_MixedStrategy_4, sizeof(__pyx_k_getitem___locals_MixedStrategy_4), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_5, __pyx_k_getitem___locals_MixedStrategy_5, sizeof(__pyx_k_getitem___locals_MixedStrategy_5), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_6, __pyx_k_getitem___locals_MixedStrategy_6, sizeof(__pyx_k_getitem___locals_MixedStrategy_6), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_7, __pyx_k_getitem___locals_MixedStrategy_7, sizeof(__pyx_k_getitem___locals_MixedStrategy_7), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_8, __pyx_k_getitem___locals_MixedStrategy_8, sizeof(__pyx_k_getitem___locals_MixedStrategy_8), 0, 0, 1, 1},
  {&__pyx_n_s_getitem___locals_MixedStrategy_9, __pyx_k_getitem___locals_MixedStrategy_9, sizeof(__pyx_k_getitem___locals_MixedStrategy_9), 0, 0, 1, 1},
  {&__pyx_n_s_getprob, __pyx_k_getprob, sizeof(__pyx_k_getprob), 0, 0, 1, 1},
  {&__pyx_n_s_getprob_strategy, __pyx_k_getprob_strategy, sizeof(__pyx_k_getprob_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_gte, __pyx_k_gte, sizeof(__pyx_k_gte), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_infoset, __pyx_k_infoset, sizeof(__pyx_k_infoset), 0, 0, 1, 1},
  {&__pyx_n_s_infoset_payoff, __pyx_k_infoset_payoff, sizeof(__pyx_k_infoset_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_infoset_prob, __pyx_k_infoset_prob, sizeof(__pyx_k_infoset_prob), 0, 0, 1, 1},
  {&__pyx_n_s_infosets, __pyx_k_infosets, sizeof(__pyx_k_infosets), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_kp_s_insert_action_takes_an_Action_ob, __pyx_k_insert_action_takes_an_Action_ob, sizeof(__pyx_k_insert_action_takes_an_Action_ob), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_accepts_either_a_Pla, __pyx_k_insert_move_accepts_either_a_Pla, sizeof(__pyx_k_insert_move_accepts_either_a_Pla), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_requires_actions_1, __pyx_k_insert_move_requires_actions_1, sizeof(__pyx_k_insert_move_requires_actions_1), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_with_a_Player_requir, __pyx_k_insert_move_with_a_Player_requir, sizeof(__pyx_k_insert_move_with_a_Player_requir), 0, 0, 1, 0},
  {&__pyx_kp_s_insert_move_with_an_Infoset_cann, __pyx_k_insert_move_with_an_Infoset_cann, sizeof(__pyx_k_insert_move_with_an_Infoset_cann), 0, 0, 1, 0},
  {&__pyx_n_s_intersection, __pyx_k_intersection, sizeof(__pyx_k_intersection), 0, 0, 1, 1},
  {&__pyx_n_s_intersection_locals_lambda, __pyx_k_intersection_locals_lambda, sizeof(__pyx_k_intersection_locals_lambda), 0, 0, 1, 1},
  {&__pyx_kp_s_invalid_set_of_strategies, __pyx_k_invalid_set_of_strategies, sizeof(__pyx_k_invalid_set_of_strategies), 0, 0, 1, 0},
  {&__pyx_n_s_is_chance, __pyx_k_is_chance, sizeof(__pyx_k_is_chance), 0, 0, 1, 1},
  {&__pyx_n_s_is_const_sum, __pyx_k_is_const_sum, sizeof(__pyx_k_is_const_sum), 0, 0, 1, 1},
  {&__pyx_n_s_is_defined_at, __pyx_k_is_defined_at, sizeof(__pyx_k_is_defined_at), 0, 0, 1, 1},
  {&__pyx_n_s_is_perfect_recall, __pyx_k_is_perfect_recall, sizeof(__pyx_k_is_perfect_recall), 0, 0, 1, 1},
  {&__pyx_kp_s_is_successor_of_takes_a_Node_obj, __pyx_k_is_successor_of_takes_a_Node_obj, sizeof(__pyx_k_is_successor_of_takes_a_Node_obj), 0, 0, 1, 0},
  {&__pyx_n_s_is_tree, __pyx_k_is_tree, sizeof(__pyx_k_is_tree), 0, 0, 1, 1},
  {&__pyx_n_s_is_valid, __pyx_k_is_valid, sizeof(__pyx_k_is_valid), 0, 0, 1, 1},
  {&__pyx_n_s_issubset, __pyx_k_issubset, sizeof(__pyx_k_issubset), 0, 0, 1, 1},
  {&__pyx_n_s_issubset_locals_lambda, __pyx_k_issubset_locals_lambda, sizeof(__pyx_k_issubset_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_issuperset, __pyx_k_issuperset, sizeof(__pyx_k_issuperset), 0, 0, 1, 1},
  {&__pyx_kp_s_it_is_not_possible_to_delete_the, __pyx_k_it_is_not_possible_to_delete_the, sizeof(__pyx_k_it_is_not_possible_to_delete_the), 0, 0, 1, 0},
  {&__pyx_n_s_itertools, __pyx_k_itertools, sizeof(__pyx_k_itertools), 0, 0, 1, 1},
  {&__pyx_n_s_izip_longest, __pyx_k_izip_longest, sizeof(__pyx_k_izip_longest), 0, 0, 1, 1},
  {&__pyx_n_s_join, __pyx_k_join, sizeof(__pyx_k_join), 0, 0, 1, 1},
  {&__pyx_n_s_label, __pyx_k_label, sizeof(__pyx_k_label), 0, 0, 1, 1},
  {&__pyx_n_s_lam, __pyx_k_lam, sizeof(__pyx_k_lam), 0, 0, 1, 1},
  {&__pyx_kp_s_left, __pyx_k_left, sizeof(__pyx_k_left), 0, 0, 1, 0},
  {&__pyx_n_s_len, __pyx_k_len, sizeof(__pyx_k_len), 0, 0, 1, 1},
  {&__pyx_n_s_logit_atlambda, __pyx_k_logit_atlambda, sizeof(__pyx_k_logit_atlambda), 0, 0, 1, 1},
  {&__pyx_n_s_logit_estimate, __pyx_k_logit_estimate, sizeof(__pyx_k_logit_estimate), 0, 0, 1, 1},
  {&__pyx_n_s_logit_principal_branch, __pyx_k_logit_principal_branch, sizeof(__pyx_k_logit_principal_branch), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_max_payoff, __pyx_k_max_payoff, sizeof(__pyx_k_max_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_members, __pyx_k_members, sizeof(__pyx_k_members), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_min_payoff, __pyx_k_min_payoff, sizeof(__pyx_k_min_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_mixed_strategy_profile, __pyx_k_mixed_strategy_profile, sizeof(__pyx_k_mixed_strategy_profile), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_kp_s_move_tree_takes_a_Node_object_as, __pyx_k_move_tree_takes_a_Node_object_as, sizeof(__pyx_k_move_tree_takes_a_Node_object_as), 0, 0, 1, 0},
  {&__pyx_kp_s_multiple_actions_matching_label, __pyx_k_multiple_actions_matching_label, sizeof(__pyx_k_multiple_actions_matching_label), 0, 0, 1, 0},
  {&__pyx_kp_s_multiple_infosets_matching_label, __pyx_k_multiple_infosets_matching_label, sizeof(__pyx_k_multiple_infosets_matching_label), 0, 0, 1, 0},
  {&__pyx_kp_s_multiple_strategies_matching_lab, __pyx_k_multiple_strategies_matching_lab, sizeof(__pyx_k_multiple_strategies_matching_lab), 0, 0, 1, 0},
  {&__pyx_kp_s_must_specify_exactly_one_value_p, __pyx_k_must_specify_exactly_one_value_p, sizeof(__pyx_k_must_specify_exactly_one_value_p), 0, 0, 1, 0},
  {&__pyx_kp_s_must_support_iteration, __pyx_k_must_support_iteration, sizeof(__pyx_k_must_support_iteration), 0, 0, 1, 0},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_n_s_native, __pyx_k_native, sizeof(__pyx_k_native), 0, 0, 1, 1},
  {&__pyx_n_s_new_table, __pyx_k_new_table, sizeof(__pyx_k_new_table), 0, 0, 1, 1},
  {&__pyx_n_s_new_tree, __pyx_k_new_tree, sizeof(__pyx_k_new_tree), 0, 0, 1, 1},
  {&__pyx_n_s_nfg, __pyx_k_nfg, sizeof(__pyx_k_nfg), 0, 0, 1, 1},
  {&__pyx_kp_s_no_action_matching_label_s, __pyx_k_no_action_matching_label_s, sizeof(__pyx_k_no_action_matching_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_infoset_matching_label_s, __pyx_k_no_infoset_matching_label_s, sizeof(__pyx_k_no_infoset_matching_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_infoset_or_action_matching_la, __pyx_k_no_infoset_or_action_matching_la, sizeof(__pyx_k_no_infoset_or_action_matching_la), 0, 0, 1, 0},
  {&__pyx_kp_s_no_matching_label_s, __pyx_k_no_matching_label_s, sizeof(__pyx_k_no_matching_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_object_with_label_s, __pyx_k_no_object_with_label_s, sizeof(__pyx_k_no_object_with_label_s), 0, 0, 1, 0},
  {&__pyx_kp_s_no_player_infoset_or_action_matc, __pyx_k_no_player_infoset_or_action_matc, sizeof(__pyx_k_no_player_infoset_or_action_matc), 0, 0, 1, 0},
  {&__pyx_kp_s_no_player_or_strategy_matching_l, __pyx_k_no_player_or_strategy_matching_l, sizeof(__pyx_k_no_player_or_strategy_matching_l), 0, 0, 1, 0},
  {&__pyx_kp_s_no_strategy_matching_label_s, __pyx_k_no_strategy_matching_label_s, sizeof(__pyx_k_no_strategy_matching_label_s), 0, 0, 1, 0},
  {&__pyx_n_s_num_players, __pyx_k_num_players, sizeof(__pyx_k_num_players), 0, 0, 1, 1},
  {&__pyx_n_s_num_strategies_player, __pyx_k_num_strategies_player, sizeof(__pyx_k_num_strategies_player), 0, 0, 1, 1},
  {&__pyx_n_s_number, __pyx_k_number, sizeof(__pyx_k_number), 0, 0, 1, 1},
  {&__pyx_n_s_numerator, __pyx_k_numerator, sizeof(__pyx_k_numerator), 0, 0, 1, 1},
  {&__pyx_kp_s_numeric_argument_required_for_ac, __pyx_k_numeric_argument_required_for_ac, sizeof(__pyx_k_numeric_argument_required_for_ac), 0, 0, 1, 0},
  {&__pyx_kp_s_numeric_argument_required_for_pa, __pyx_k_numeric_argument_required_for_pa, sizeof(__pyx_k_numeric_argument_required_for_pa), 0, 0, 1, 0},
  {&__pyx_n_s_object, __pyx_k_object, sizeof(__pyx_k_object), 0, 0, 1, 1},
  {&__pyx_n_s_other, __pyx_k_other, sizeof(__pyx_k_other), 0, 0, 1, 1},
  {&__pyx_n_s_outcomes, __pyx_k_outcomes, sizeof(__pyx_k_outcomes), 0, 0, 1, 1},
  {&__pyx_n_s_p, __pyx_k_p, sizeof(__pyx_k_p), 0, 0, 1, 1},
  {&__pyx_n_s_p_game, __pyx_k_p_game, sizeof(__pyx_k_p_game), 0, 0, 1, 1},
  {&__pyx_n_s_p_lambda, __pyx_k_p_lambda, sizeof(__pyx_k_p_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_p_maxDepth, __pyx_k_p_maxDepth, sizeof(__pyx_k_p_maxDepth), 0, 0, 1, 1},
  {&__pyx_n_s_p_maxLambda, __pyx_k_p_maxLambda, sizeof(__pyx_k_p_maxLambda), 0, 0, 1, 1},
  {&__pyx_n_s_p_profile, __pyx_k_p_profile, sizeof(__pyx_k_p_profile), 0, 0, 1, 1},
  {&__pyx_n_s_p_stopAfter, __pyx_k_p_stopAfter, sizeof(__pyx_k_p_stopAfter), 0, 0, 1, 1},
  {&__pyx_n_s_parse_game, __pyx_k_parse_game, sizeof(__pyx_k_parse_game), 0, 0, 1, 1},
  {&__pyx_n_s_payoff, __pyx_k_payoff, sizeof(__pyx_k_payoff), 0, 0, 1, 1},
  {&__pyx_n_s_payoff_2, __pyx_k_payoff_2, sizeof(__pyx_k_payoff_2), 0, 0, 1, 1},
  {&__pyx_n_s_pl, __pyx_k_pl, sizeof(__pyx_k_pl), 0, 0, 1, 1},
  {&__pyx_n_s_player, __pyx_k_player, sizeof(__pyx_k_player), 0, 0, 1, 1},
  {&__pyx_kp_s_player_at_an_infoset_must_belong, __pyx_k_player_at_an_infoset_must_belong, sizeof(__pyx_k_player_at_an_infoset_must_belong), 0, 0, 1, 0},
  {&__pyx_kp_s_player_index_must_be_int_str_or, __pyx_k_player_index_must_be_int_str_or, sizeof(__pyx_k_player_index_must_be_int_str_or), 0, 0, 1, 0},
  {&__pyx_n_s_players, __pyx_k_players, sizeof(__pyx_k_players), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_product, __pyx_k_product, sizeof(__pyx_k_product), 0, 0, 1, 1},
  {&__pyx_n_s_profile, __pyx_k_profile, sizeof(__pyx_k_profile), 0, 0, 1, 1},
  {&__pyx_kp_s_profile_action_probability_index, __pyx_k_profile_action_probability_index, sizeof(__pyx_k_profile_action_probability_index), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_belief_index_must_be_Nod, __pyx_k_profile_belief_index_must_be_Nod, sizeof(__pyx_k_profile_belief_index_must_be_Nod), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_indexes_must_be_int_str, __pyx_k_profile_indexes_must_be_int_str, sizeof(__pyx_k_profile_indexes_must_be_int_str), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_indexes_must_be_int_str_2, __pyx_k_profile_indexes_must_be_int_str_2, sizeof(__pyx_k_profile_indexes_must_be_int_str_2), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_infoset_index_must_be_st, __pyx_k_profile_infoset_index_must_be_st, sizeof(__pyx_k_profile_infoset_index_must_be_st), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_payoffs_index_must_be_in, __pyx_k_profile_payoffs_index_must_be_in, sizeof(__pyx_k_profile_payoffs_index_must_be_in), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_payoffs_index_must_be_in_2, __pyx_k_profile_payoffs_index_must_be_in_2, sizeof(__pyx_k_profile_payoffs_index_must_be_in_2), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_probability_index_must_b, __pyx_k_profile_probability_index_must_b, sizeof(__pyx_k_profile_probability_index_must_b), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_regret_index_must_be_str, __pyx_k_profile_regret_index_must_be_str, sizeof(__pyx_k_profile_regret_index_must_be_str), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_strategy_index_must_be_s, __pyx_k_profile_strategy_index_must_be_s, sizeof(__pyx_k_profile_strategy_index_must_be_s), 0, 0, 1, 0},
  {&__pyx_kp_s_profile_strategy_value_index_mus, __pyx_k_profile_strategy_value_index_mus, sizeof(__pyx_k_profile_strategy_value_index_mus), 0, 0, 1, 0},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_rational, __pyx_k_rational, sizeof(__pyx_k_rational), 0, 0, 1, 1},
  {&__pyx_kp_s_rational_precision_profile_requi, __pyx_k_rational_precision_profile_requi, sizeof(__pyx_k_rational_precision_profile_requi), 0, 0, 1, 0},
  {&__pyx_n_s_read_game, __pyx_k_read_game, sizeof(__pyx_k_read_game), 0, 0, 1, 1},
  {&__pyx_n_s_reduce, __pyx_k_reduce, sizeof(__pyx_k_reduce), 0, 0, 1, 1},
  {&__pyx_n_s_regret, __pyx_k_regret, sizeof(__pyx_k_regret), 0, 0, 1, 1},
  {&__pyx_n_s_remove, __pyx_k_remove, sizeof(__pyx_k_remove), 0, 0, 1, 1},
  {&__pyx_n_s_remove_locals_lambda, __pyx_k_remove_locals_lambda, sizeof(__pyx_k_remove_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_replace, __pyx_k_replace, sizeof(__pyx_k_replace), 0, 0, 1, 1},
  {&__pyx_n_s_repr, __pyx_k_repr, sizeof(__pyx_k_repr), 0, 0, 1, 1},
  {&__pyx_n_s_repr_latex, __pyx_k_repr_latex, sizeof(__pyx_k_repr_latex), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_index, __pyx_k_resolve_index, sizeof(__pyx_k_resolve_index), 0, 0, 1, 1},
  {&__pyx_n_s_resolve_index_locals_lambda, __pyx_k_resolve_index_locals_lambda, sizeof(__pyx_k_resolve_index_locals_lambda), 0, 0, 1, 1},
  {&__pyx_n_s_restrict, __pyx_k_restrict, sizeof(__pyx_k_restrict), 0, 0, 1, 1},
  {&__pyx_n_s_restriction, __pyx_k_restriction, sizeof(__pyx_k_restriction), 0, 0, 1, 1},
  {&__pyx_n_s_ret, __pyx_k_ret, sizeof(__pyx_k_ret), 0, 0, 1, 1},
  {&__pyx_kp_s_right, __pyx_k_right, sizeof(__pyx_k_right), 0, 0, 1, 0},
  {&__pyx_kp_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 0},
  {&__pyx_n_s_s1, __pyx_k_s1, sizeof(__pyx_k_s1), 0, 0, 1, 1},
  {&__pyx_n_s_s2, __pyx_k_s2, sizeof(__pyx_k_s2), 0, 0, 1, 1},
  {&__pyx_kp_s_s_2, __pyx_k_s_2, sizeof(__pyx_k_s_2), 0, 0, 1, 0},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_send, __pyx_k_send, sizeof(__pyx_k_send), 0, 0, 1, 1},
  {&__pyx_n_s_setaction, __pyx_k_setaction, sizeof(__pyx_k_setaction), 0, 0, 1, 1},
  {&__pyx_n_s_setinfoset, __pyx_k_setinfoset, sizeof(__pyx_k_setinfoset), 0, 0, 1, 1},
  {&__pyx_n_s_setitem, __pyx_k_setitem, sizeof(__pyx_k_setitem), 0, 0, 1, 1},
  {&__pyx_n_s_setplayer, __pyx_k_setplayer, sizeof(__pyx_k_setplayer), 0, 0, 1, 1},
  {&__pyx_n_s_setprob, __pyx_k_setprob, sizeof(__pyx_k_setprob), 0, 0, 1, 1},
  {&__pyx_n_s_setprob_player, __pyx_k_setprob_player, sizeof(__pyx_k_setprob_player), 0, 0, 1, 1},
  {&__pyx_n_s_setprob_player_locals_Filler, __pyx_k_setprob_player_locals_Filler, sizeof(__pyx_k_setprob_player_locals_Filler), 0, 0, 1, 1},
  {&__pyx_n_s_setprob_strategy, __pyx_k_setprob_strategy, sizeof(__pyx_k_setprob_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_shape, __pyx_k_shape, sizeof(__pyx_k_shape), 0, 0, 1, 1},
  {&__pyx_n_s_solns, __pyx_k_solns, sizeof(__pyx_k_solns), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_strategies, __pyx_k_strategies, sizeof(__pyx_k_strategies), 0, 0, 1, 1},
  {&__pyx_n_s_strategy, __pyx_k_strategy, sizeof(__pyx_k_strategy), 0, 0, 1, 1},
  {&__pyx_n_s_strategy1, __pyx_k_strategy1, sizeof(__pyx_k_strategy1), 0, 0, 1, 1},
  {&__pyx_n_s_strategy2, __pyx_k_strategy2, sizeof(__pyx_k_strategy2), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_value, __pyx_k_strategy_value, sizeof(__pyx_k_strategy_value), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_value_2, __pyx_k_strategy_value_2, sizeof(__pyx_k_strategy_value_2), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_value_deriv, __pyx_k_strategy_value_deriv, sizeof(__pyx_k_strategy_value_deriv), 0, 0, 1, 1},
  {&__pyx_n_s_strategy_values, __pyx_k_strategy_values, sizeof(__pyx_k_strategy_values), 0, 0, 1, 1},
  {&__pyx_kp_s_strategy_values_index_must_be_st, __pyx_k_strategy_values_index_must_be_st, sizeof(__pyx_k_strategy_values_index_must_be_st), 0, 0, 1, 0},
  {&__pyx_n_s_strict, __pyx_k_strict, sizeof(__pyx_k_strict), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_throw, __pyx_k_throw, sizeof(__pyx_k_throw), 0, 0, 1, 1},
  {&__pyx_n_s_title, __pyx_k_title, sizeof(__pyx_k_title), 0, 0, 1, 1},
  {&__pyx_kp_s_type_Infoset_required_for_settin, __pyx_k_type_Infoset_required_for_settin, sizeof(__pyx_k_type_Infoset_required_for_settin), 0, 0, 1, 0},
  {&__pyx_kp_s_type_Outcome_required_for_settin, __pyx_k_type_Outcome_required_for_settin, sizeof(__pyx_k_type_Outcome_required_for_settin), 0, 0, 1, 0},
  {&__pyx_kp_s_type_Player_required_for_setting, __pyx_k_type_Player_required_for_setting, sizeof(__pyx_k_type_Player_required_for_setting), 0, 0, 1, 0},
  {&__pyx_n_s_union, __pyx_k_union, sizeof(__pyx_k_union), 0, 0, 1, 1},
  {&__pyx_n_s_unique, __pyx_k_unique, sizeof(__pyx_k_unique), 0, 0, 1, 1},
  {&__pyx_n_s_unrestrict, __pyx_k_unrestrict, sizeof(__pyx_k_unrestrict), 0, 0, 1, 1},
  {&__pyx_n_s_value, __pyx_k_value, sizeof(__pyx_k_value), 0, 0, 1, 1},
  {&__pyx_kp_s_value_list_length_must_be_s_not, __pyx_k_value_list_length_must_be_s_not, sizeof(__pyx_k_value_list_length_must_be_s_not), 0, 0, 1, 0},
  {&__pyx_kp_s_value_vector_must_support_iterat, __pyx_k_value_vector_must_support_iterat, sizeof(__pyx_k_value_vector_must_support_iterat), 0, 0, 1, 0},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_warn, __pyx_k_warn, sizeof(__pyx_k_warn), 0, 0, 1, 1},
  {&__pyx_n_s_warnings, __pyx_k_warnings, sizeof(__pyx_k_warnings), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_write_game, __pyx_k_write_game, sizeof(__pyx_k_write_game), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_xrange, __pyx_k_xrange, sizeof(__pyx_k_xrange), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_zip, __pyx_k_zip, sizeof(__pyx_k_zip), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) __PYX_ERR(0, 81, __pyx_L1_error)
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) __PYX_ERR(0, 125, __pyx_L1_error)
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) __PYX_ERR(0, 140, __pyx_L1_error)
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) __PYX_ERR(0, 315, __pyx_L1_error)
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) __PYX_ERR(0, 360, __pyx_L1_error)
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) __PYX_ERR(0, 402, __pyx_L1_error)
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) __PYX_ERR(1, 72, __pyx_L1_error)
  __pyx_builtin_filter = __Pyx_GetBuiltinName(__pyx_n_s_filter); if (!__pyx_builtin_filter) __PYX_ERR(1, 96, __pyx_L1_error)
  __pyx_builtin_reduce = __Pyx_GetBuiltinName(__pyx_n_s_reduce); if (!__pyx_builtin_reduce) __PYX_ERR(1, 118, __pyx_L1_error)
  __pyx_builtin_enumerate = __Pyx_GetBuiltinName(__pyx_n_s_enumerate); if (!__pyx_builtin_enumerate) __PYX_ERR(1, 307, __pyx_L1_error)
  __pyx_builtin_KeyError = __Pyx_GetBuiltinName(__pyx_n_s_KeyError); if (!__pyx_builtin_KeyError) __PYX_ERR(1, 321, __pyx_L1_error)
  __pyx_builtin_object = __Pyx_GetBuiltinName(__pyx_n_s_object); if (!__pyx_builtin_object) __PYX_ERR(2, 79, __pyx_L1_error)
  __pyx_builtin_zip = __Pyx_GetBuiltinName(__pyx_n_s_zip); if (!__pyx_builtin_zip) __PYX_ERR(3, 82, __pyx_L1_error)
  #if PY_MAJOR_VERSION >= 3
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_xrange) __PYX_ERR(4, 152, __pyx_L1_error)
  #else
  __pyx_builtin_xrange = __Pyx_GetBuiltinName(__pyx_n_s_xrange); if (!__pyx_builtin_xrange) __PYX_ERR(4, 152, __pyx_L1_error)
  #endif
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "gambit/lib/action.pxi":55
 *     def delete(self):
 *         if len(self.infoset.actions) == 1:
 *             raise UndefinedOperationError("it is not possible to delete the \             # <<<<<<<<<<<<<<
 *                                             last action of an infoset")
 *         self.action.deref().DeleteAction()
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_it_is_not_possible_to_delete_the); if (unlikely(!__pyx_tuple_)) __PYX_ERR(5, 55, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "gambit/lib/action.pxi":63
 *             return self.action.deref().Precedes(((<Node>node).node))
 *         else:
 *             raise TypeError("Precedes takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Precedes_takes_a_Node_object_as); if (unlikely(!__pyx_tuple__2)) __PYX_ERR(5, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "gambit/lib/infoset.pxi":44
 *         elif isinstance(action, Action):
 *             if (<Infoset>action.infoset).infoset != self.infoset:
 *                 raise MismatchError("The new action should be from the same infoset")             # <<<<<<<<<<<<<<
 *             self.infoset.deref().InsertAction((<Action>action).action)
 *         else:
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_The_new_action_should_be_from_th); if (unlikely(!__pyx_tuple__4)) __PYX_ERR(6, 44, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "gambit/lib/infoset.pxi":47
 *             self.infoset.deref().InsertAction((<Action>action).action)
 *         else:
 *             raise TypeError("insert_action takes an Action object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):     return self.infoset.deref().NumActions()
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_insert_action_takes_an_Action_ob); if (unlikely(!__pyx_tuple__5)) __PYX_ERR(6, 47, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "gambit/lib/strategy.pxi":58
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             if value in [ i.label for i in self.player.strategies ]:
 *                 warnings.warn("This player has another strategy with an identical label")
 */
  __pyx_tuple__6 = PyTuple_Pack(1, __pyx_kp_s_Changing_objects_in_a_restrictio); if (unlikely(!__pyx_tuple__6)) __PYX_ERR(7, 58, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__6);
  __Pyx_GIVEREF(__pyx_tuple__6);

  /* "gambit/lib/strategy.pxi":60
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.player.strategies ]:
 *                 warnings.warn("This player has another strategy with an identical label")             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s_This_player_has_another_strategy); if (unlikely(!__pyx_tuple__7)) __PYX_ERR(7, 60, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);

  /* "gambit/lib/player.pxi":65
 * 
 *     def add(self, label=""):
 *         raise UndefinedOperationError("Adding strategies is only applicable"\             # <<<<<<<<<<<<<<
 *                                       "to players in a game, not in a restriction")
 * 
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Adding_strategies_is_only_applic_2); if (unlikely(!__pyx_tuple__9)) __PYX_ERR(8, 65, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "gambit/lib/player.pxi":128
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             # check to see if the player's name has been used elsewhere
 *             if value in [ i.label for i in self.game.players ]:
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Changing_objects_in_a_restrictio); if (unlikely(!__pyx_tuple__10)) __PYX_ERR(8, 128, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "gambit/lib/player.pxi":131
 *             # check to see if the player's name has been used elsewhere
 *             if value in [ i.label for i in self.game.players ]:
 *                 warnings.warn("Another player with an identical label exists")             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Another_player_with_an_identical); if (unlikely(!__pyx_tuple__11)) __PYX_ERR(8, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);

  /* "gambit/lib/outcome.pxi":52
 *     def delete(self):
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *         (<Game>self.game).game.deref().DeleteOutcome(self.outcome)
 * 
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_Changing_objects_in_a_restrictio); if (unlikely(!__pyx_tuple__12)) __PYX_ERR(9, 52, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "gambit/lib/outcome.pxi":69
 *         def __set__(self, char *value):
 *             if self.restriction is not None:
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *             if value in [ i.label for i in self.game.outcomes ]:
 *                 warnings.warn("Another outcome with an identical label exists")
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Changing_objects_in_a_restrictio); if (unlikely(!__pyx_tuple__13)) __PYX_ERR(9, 69, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "gambit/lib/outcome.pxi":71
 *                 raise UndefinedOperationError("Changing objects in a restriction is not supported")
 *             if value in [ i.label for i in self.game.outcomes ]:
 *                 warnings.warn("Another outcome with an identical label exists")             # <<<<<<<<<<<<<<
 *             cdef cxx_string s
 *             s.assign(value)
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_Another_outcome_with_an_identica); if (unlikely(!__pyx_tuple__14)) __PYX_ERR(9, 71, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "gambit/lib/outcome.pxi":92
 *     def __setitem__(self, pl, value):
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a support is not supported")             # <<<<<<<<<<<<<<
 *         cdef cxx_string s
 *         if isinstance(value, int) or isinstance(value, decimal.Decimal) or \
 */
  __pyx_tuple__15 = PyTuple_Pack(1, __pyx_kp_s_Changing_objects_in_a_support_is); if (unlikely(!__pyx_tuple__15)) __PYX_ERR(9, 92, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__15);
  __Pyx_GIVEREF(__pyx_tuple__15);

  /* "gambit/lib/outcome.pxi":157
 * 
 *     def __setitem__(self, pl, value):
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 * 
 *     def delete(self):
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s_Cannot_modify_outcomes_in_a_deri); if (unlikely(!__pyx_tuple__16)) __PYX_ERR(9, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "gambit/lib/outcome.pxi":160
 * 
 *     def delete(self):
 *         raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_Cannot_modify_outcomes_in_a_deri); if (unlikely(!__pyx_tuple__17)) __PYX_ERR(9, 160, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "gambit/lib/outcome.pxi":166
 *             return "(%s)" % ( ",".join( [ self.psp.deref().GetStrategy((<Player>player).player).deref().GetLabel().c_str() for player in self.game.players ] ) )
 *         def __set__(self, char *value):
 *             raise NotImplementedError("Cannot modify outcomes in a derived strategic game.")             # <<<<<<<<<<<<<<
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_Cannot_modify_outcomes_in_a_deri); if (unlikely(!__pyx_tuple__19)) __PYX_ERR(9, 166, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "gambit/lib/node.pxi":74
 *         cdef Infoset i
 *         if len(self.children) > 0:
 *             raise UndefinedOperationError("append_move can only be applied at a terminal node")             # <<<<<<<<<<<<<<
 *         if isinstance(player, Player):
 *             if actions is None:
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_append_move_can_only_be_applied); if (unlikely(!__pyx_tuple__20)) __PYX_ERR(10, 74, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "gambit/lib/node.pxi":77
 *         if isinstance(player, Player):
 *             if actions is None:
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")             # <<<<<<<<<<<<<<
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 */
  __pyx_tuple__21 = PyTuple_Pack(1, __pyx_kp_s_append_move_with_a_Player_requir); if (unlikely(!__pyx_tuple__21)) __PYX_ERR(10, 77, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);

  /* "gambit/lib/node.pxi":79
 *                 raise UndefinedOperationError("append_move with a Player requires actions to be specified")
 *             if actions < 1:
 *                 raise UndefinedOperationError("append_move requires actions >= 1")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
  __pyx_tuple__22 = PyTuple_Pack(1, __pyx_kp_s_append_move_requires_actions_1); if (unlikely(!__pyx_tuple__22)) __PYX_ERR(10, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__22);
  __Pyx_GIVEREF(__pyx_tuple__22);

  /* "gambit/lib/node.pxi":81
 *                 raise UndefinedOperationError("append_move requires actions >= 1")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Player>player).player), actions)
 */
  __pyx_tuple__23 = PyTuple_Pack(1, __pyx_kp_s_append_move_can_only_be_applied_2); if (unlikely(!__pyx_tuple__23)) __PYX_ERR(10, 81, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);

  /* "gambit/lib/node.pxi":87
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_kp_s_append_move_with_an_Infoset_cann); if (unlikely(!__pyx_tuple__24)) __PYX_ERR(10, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "gambit/lib/node.pxi":89
 *                 raise UndefinedOperationError("append_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().AppendMove(((<Infoset>player).infoset))
 */
  __pyx_tuple__25 = PyTuple_Pack(1, __pyx_kp_s_append_move_can_only_be_applied_2); if (unlikely(!__pyx_tuple__25)) __PYX_ERR(10, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);

  /* "gambit/lib/node.pxi":99
 *         if isinstance(player, Player):
 *             if actions is None:
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")             # <<<<<<<<<<<<<<
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 */
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_kp_s_insert_move_with_a_Player_requir); if (unlikely(!__pyx_tuple__26)) __PYX_ERR(10, 99, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "gambit/lib/node.pxi":101
 *                 raise UndefinedOperationError("insert_move with a Player requires actions to be specified")
 *             if actions < 1:
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
  __pyx_tuple__27 = PyTuple_Pack(1, __pyx_kp_s_insert_move_requires_actions_1); if (unlikely(!__pyx_tuple__27)) __PYX_ERR(10, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);

  /* "gambit/lib/node.pxi":103
 *                 raise UndefinedOperationError("insert_move requires actions >= 1")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Player>player).player), actions)
 */
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_kp_s_append_move_can_only_be_applied_2); if (unlikely(!__pyx_tuple__28)) __PYX_ERR(10, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "gambit/lib/node.pxi":109
 *         elif isinstance(player, Infoset):
 *             if actions is not None:
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")             # <<<<<<<<<<<<<<
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_s_insert_move_with_an_Infoset_cann); if (unlikely(!__pyx_tuple__29)) __PYX_ERR(10, 109, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "gambit/lib/node.pxi":111
 *                 raise UndefinedOperationError("insert_move with an Infoset cannot specify number of actions")
 *             if player.game != self.game:
 *                 raise MismatchError("append_move can only be applied between objects of the same game")             # <<<<<<<<<<<<<<
 *             i = Infoset()
 *             i.infoset = self.node.deref().InsertMove(((<Infoset>player).infoset))
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_s_append_move_can_only_be_applied_2); if (unlikely(!__pyx_tuple__30)) __PYX_ERR(10, 111, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "gambit/lib/node.pxi":132
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \             # <<<<<<<<<<<<<<
 *                                     objects of the same game")
 *             self.node.deref().CopyTree((<Node>node).node)
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_s_copy_tree_can_only_be_applied_be); if (unlikely(!__pyx_tuple__31)) __PYX_ERR(10, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "gambit/lib/node.pxi":136
 *             self.node.deref().CopyTree((<Node>node).node)
 *         else:
 *             raise TypeError("copy_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     def move_tree(self, node):
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_s_copy_tree_takes_a_Node_object_as); if (unlikely(!__pyx_tuple__32)) __PYX_ERR(10, 136, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "gambit/lib/node.pxi":141
 *         if isinstance(node, Node):
 *             if node.game != self.game:
 *                 raise MismatchError("copy_tree can only be applied between \             # <<<<<<<<<<<<<<
 *                                     objects of the same game")
 *             self.node.deref().MoveTree((<Node>node).node)
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_s_copy_tree_can_only_be_applied_be); if (unlikely(!__pyx_tuple__33)) __PYX_ERR(10, 141, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "gambit/lib/node.pxi":145
 *             self.node.deref().MoveTree((<Node>node).node)
 *         else:
 *             raise TypeError("move_tree takes a Node object as its input")             # <<<<<<<<<<<<<<
 * 
 *     property label:
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_s_move_tree_takes_a_Node_object_as); if (unlikely(!__pyx_tuple__34)) __PYX_ERR(10, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "gambit/lib/stratspt.pxi":42
 *                     self.support.RemoveStrategy((<Strategy>strategy).strategy)
 *        else:
 *             raise ValueError("invalid set of strategies")             # <<<<<<<<<<<<<<
 *     def __dealloc__(self):
 *         if self.support != (<c_StrategySupportProfile *>0):
 */
  __pyx_tuple__35 = PyTuple_Pack(1, __pyx_kp_s_invalid_set_of_strategies); if (unlikely(!__pyx_tuple__35)) __PYX_ERR(1, 42, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);

  /* "gambit/lib/stratspt.pxi":79
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 *     # Set-like methods
 *     def __and__(self, other):
 */
  __pyx_tuple__36 = PyTuple_Pack(1, __pyx_kp_s_Index_out_of_range); if (unlikely(!__pyx_tuple__36)) __PYX_ERR(1, 79, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__36);
  __Pyx_GIVEREF(__pyx_tuple__36);

  /* "gambit/lib/stratspt.pxi":101
 *                 return StrategySupportProfile(strategies, self.game)
 *             else:
 *                 raise UndefinedOperationError("cannot remove last strategy"\             # <<<<<<<<<<<<<<
 *                                               " of a player")
 *         raise TypeError("delete requires a Strategy object")
 */
  __pyx_tuple__37 = PyTuple_Pack(1, __pyx_kp_s_cannot_remove_last_strategy_of_a); if (unlikely(!__pyx_tuple__37)) __PYX_ERR(1, 101, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);

  /* "gambit/lib/stratspt.pxi":103
 *                 raise UndefinedOperationError("cannot remove last strategy"\
 *                                               " of a player")
 *         raise TypeError("delete requires a Strategy object")             # <<<<<<<<<<<<<<
 * 
 *     def difference(self, StrategySupportProfile other):
 */
  __pyx_tuple__38 = PyTuple_Pack(1, __pyx_kp_s_delete_requires_a_Strategy_objec); if (unlikely(!__pyx_tuple__38)) __PYX_ERR(1, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__38);
  __Pyx_GIVEREF(__pyx_tuple__38);

  /* "gambit/lib/stratspt.pxi":167
 * 
 *     def add(self, label=""):
 *         raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 * 
 * cdef class RestrictionStrategies(Collection):
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_Changing_objects_in_a_restrictio); if (unlikely(!__pyx_tuple__39)) __PYX_ERR(1, 167, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "gambit/lib/stratspt.pxi":189
 *                 return s
 *             strat = strat - num_strategies.getitem(i)
 *         raise IndexError("Index out of range")             # <<<<<<<<<<<<<<
 * 
 * cdef class StrategicRestriction(BaseGame):
 */
  __pyx_tuple__40 = PyTuple_Pack(1, __pyx_kp_s_Index_out_of_range); if (unlikely(!__pyx_tuple__40)) __PYX_ERR(1, 189, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);

  /* "gambit/lib/stratspt.pxi":341
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")             # <<<<<<<<<<<<<<
 *         return self._get_contingency(*tuple(cont))
 * 
 */
  __pyx_tuple__41 = PyTuple_Pack(1, __pyx_kp_s_Must_use_a_tuple_of_ints_strateg); if (unlikely(!__pyx_tuple__41)) __PYX_ERR(1, 341, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__41);
  __Pyx_GIVEREF(__pyx_tuple__41);

  /* "gambit/lib/mixed.pxi":33
 * 
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(MixedStrategyProfile self, other, whichop):
 */
  __pyx_tuple__43 = PyTuple_Pack(2, __pyx_kp_s__42, __pyx_kp_s__8); if (unlikely(!__pyx_tuple__43)) __PYX_ERR(2, 33, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__43);
  __Pyx_GIVEREF(__pyx_tuple__43);

  /* "gambit/lib/mixed.pxi":91
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
  __pyx_tuple__44 = PyTuple_Pack(2, __pyx_kp_s__42, __pyx_kp_s__8); if (unlikely(!__pyx_tuple__44)) __PYX_ERR(2, 91, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);

  /* "gambit/lib/mixed.pxi":80
 *         elif isinstance(index, Player):
 *             class MixedStrategy(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
  __pyx_tuple__45 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_profile, __pyx_n_s_player); if (unlikely(!__pyx_tuple__45)) __PYX_ERR(2, 80, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__45);
  __Pyx_GIVEREF(__pyx_tuple__45);
  __pyx_codeobj__46 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__45, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_n_s_init, 80, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__46)) __PYX_ERR(2, 80, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":83
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
  __pyx_tuple__47 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other); if (unlikely(!__pyx_tuple__47)) __PYX_ERR(2, 83, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__47);
  __Pyx_GIVEREF(__pyx_tuple__47);
  __pyx_codeobj__48 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__47, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_n_s_eq, 83, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__48)) __PYX_ERR(2, 83, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":85
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.strategies)
 *                 def __repr__(self):
 */
  __pyx_tuple__49 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__49)) __PYX_ERR(2, 85, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__49);
  __Pyx_GIVEREF(__pyx_tuple__49);
  __pyx_codeobj__50 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__49, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_n_s_len, 85, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__50)) __PYX_ERR(2, 85, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":87
 *                 def __len__(self):
 *                     return len(self.player.strategies)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
  __pyx_tuple__51 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__51)) __PYX_ERR(2, 87, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__51);
  __Pyx_GIVEREF(__pyx_tuple__51);
  __pyx_codeobj__52 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__51, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_n_s_repr, 87, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__52)) __PYX_ERR(2, 87, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":89
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedStrategyProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.strategies) + r"\right]$"
 */
  __pyx_tuple__53 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__53)) __PYX_ERR(2, 89, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__53);
  __Pyx_GIVEREF(__pyx_tuple__53);
  __pyx_codeobj__54 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__53, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_n_s_repr_latex, 89, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__54)) __PYX_ERR(2, 89, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":94
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):
 */
  __pyx_tuple__55 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_index); if (unlikely(!__pyx_tuple__55)) __PYX_ERR(2, 94, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__55);
  __Pyx_GIVEREF(__pyx_tuple__55);
  __pyx_codeobj__56 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__55, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_n_s_getitem, 94, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__56)) __PYX_ERR(2, 94, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":96
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.strategies[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.strategies[index]] = value
 *             return MixedStrategy(self, index)
 */
  __pyx_tuple__57 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_value); if (unlikely(!__pyx_tuple__57)) __PYX_ERR(2, 96, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__57);
  __Pyx_GIVEREF(__pyx_tuple__57);
  __pyx_codeobj__58 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__57, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py, __pyx_n_s_setitem, 96, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__58)) __PYX_ERR(2, 96, __pyx_L1_error)

  /* "gambit/lib/mixed.pxi":123
 *             for (s, v) in itertools.izip_longest(player.strategies, value, fillvalue=Filler()):
 *                 if isinstance(s, Filler) or isinstance(v, Filler):
 *                      raise ValueError("must specify exactly one value per strategy")             # <<<<<<<<<<<<<<
 *                 self[s] = v
 *         except TypeError as e:
 */
  __pyx_tuple__59 = PyTuple_Pack(1, __pyx_kp_s_must_specify_exactly_one_value_p); if (unlikely(!__pyx_tuple__59)) __PYX_ERR(2, 123, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__59);
  __Pyx_GIVEREF(__pyx_tuple__59);

  /* "gambit/lib/mixed.pxi":127
 *         except TypeError as e:
 *             if "must support iteration" in str(e):
 *                 raise TypeError("value vector must support iteration")             # <<<<<<<<<<<<<<
 *             else:
 *                 raise e
 */
  __pyx_tuple__60 = PyTuple_Pack(1, __pyx_kp_s_value_vector_must_support_iterat); if (unlikely(!__pyx_tuple__60)) __PYX_ERR(2, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__60);
  __Pyx_GIVEREF(__pyx_tuple__60);

  /* "gambit/lib/mixed.pxi":213
 *         cdef MixedBehaviorProfileDouble behav
 *         if not self.game.is_tree:
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\             # <<<<<<<<<<<<<<
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileDouble()
 */
  __pyx_tuple__61 = PyTuple_Pack(1, __pyx_kp_s_Mixed_behavior_profiles_are_not); if (unlikely(!__pyx_tuple__61)) __PYX_ERR(2, 213, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__61);
  __Pyx_GIVEREF(__pyx_tuple__61);

  /* "gambit/lib/mixed.pxi":286
 *         cdef MixedBehaviorProfileRational behav
 *         if not self.game.is_tree:
 *             raise UndefinedOperationError("Mixed behavior profiles are not "\             # <<<<<<<<<<<<<<
 *                                           "defined for strategic games")
 *         behav = MixedBehaviorProfileRational()
 */
  __pyx_tuple__62 = PyTuple_Pack(1, __pyx_kp_s_Mixed_behavior_profiles_are_not); if (unlikely(!__pyx_tuple__62)) __PYX_ERR(2, 286, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__62);
  __Pyx_GIVEREF(__pyx_tuple__62);

  /* "gambit/lib/behav.pxi":29
 *         return str([ self[player] for player in self.game.players ])
 *     def _repr_latex_(self):
 *         return r"$\left[" + ",".join([ self[player]._repr_latex_().replace("$","") for player in self.game.players ]) + r"\right]$"             # <<<<<<<<<<<<<<
 * 
 *     def __richcmp__(MixedBehaviorProfile self, other, whichop):
 */
  __pyx_tuple__63 = PyTuple_Pack(2, __pyx_kp_s__42, __pyx_kp_s__8); if (unlikely(!__pyx_tuple__63)) __PYX_ERR(3, 29, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__63);
  __Pyx_GIVEREF(__pyx_tuple__63);

  /* "gambit/lib/behav.pxi":114
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
  __pyx_tuple__64 = PyTuple_Pack(2, __pyx_kp_s__42, __pyx_kp_s__8); if (unlikely(!__pyx_tuple__64)) __PYX_ERR(3, 114, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__64);
  __Pyx_GIVEREF(__pyx_tuple__64);

  /* "gambit/lib/behav.pxi":135
 *                 def _repr_latex_(self):
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"             # <<<<<<<<<<<<<<
 *                     else:
 *                        return repr(self)
 */
  __pyx_tuple__65 = PyTuple_Pack(2, __pyx_kp_s__42, __pyx_kp_s__8); if (unlikely(!__pyx_tuple__65)) __PYX_ERR(3, 135, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__65);
  __Pyx_GIVEREF(__pyx_tuple__65);

  /* "gambit/lib/behav.pxi":103
 *         elif isinstance(index, Infoset):
 *             class MixedBehavInfoset(object):
 *                 def __init__(self, profile, infoset):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.infoset = infoset
 */
  __pyx_tuple__66 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_profile, __pyx_n_s_infoset); if (unlikely(!__pyx_tuple__66)) __PYX_ERR(3, 103, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__66);
  __Pyx_GIVEREF(__pyx_tuple__66);
  __pyx_codeobj__67 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__66, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_init, 103, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__67)) __PYX_ERR(3, 103, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":106
 *                     self.profile = profile
 *                     self.infoset = infoset
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
  __pyx_tuple__68 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other); if (unlikely(!__pyx_tuple__68)) __PYX_ERR(3, 106, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__68);
  __Pyx_GIVEREF(__pyx_tuple__68);
  __pyx_codeobj__69 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__68, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_eq, 106, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__69)) __PYX_ERR(3, 106, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":108
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):
 */
  __pyx_tuple__70 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__70)) __PYX_ERR(3, 108, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__70);
  __Pyx_GIVEREF(__pyx_tuple__70);
  __pyx_codeobj__71 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__70, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_len, 108, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__71)) __PYX_ERR(3, 108, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":110
 *                 def __len__(self):
 *                     return len(self.infoset.actions)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):
 */
  __pyx_tuple__72 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__72)) __PYX_ERR(3, 110, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__72);
  __Pyx_GIVEREF(__pyx_tuple__72);
  __pyx_codeobj__73 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__72, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_repr, 110, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__73)) __PYX_ERR(3, 110, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":112
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.infoset]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.infoset.actions) + r"\right]$"
 */
  __pyx_tuple__74 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__74)) __PYX_ERR(3, 112, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__74);
  __Pyx_GIVEREF(__pyx_tuple__74);
  __pyx_codeobj__75 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__74, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_repr_latex, 112, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__75)) __PYX_ERR(3, 112, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":117
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):
 */
  __pyx_tuple__76 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_index); if (unlikely(!__pyx_tuple__76)) __PYX_ERR(3, 117, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__76);
  __Pyx_GIVEREF(__pyx_tuple__76);
  __pyx_codeobj__77 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__76, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_getitem, 117, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__77)) __PYX_ERR(3, 117, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":119
 *                 def __getitem__(self, index):
 *                     return self.profile[self.infoset.actions[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.infoset.actions[index]] = value
 *             return MixedBehavInfoset(self, index)
 */
  __pyx_tuple__78 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_value); if (unlikely(!__pyx_tuple__78)) __PYX_ERR(3, 119, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__78);
  __Pyx_GIVEREF(__pyx_tuple__78);
  __pyx_codeobj__79 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__78, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_setitem, 119, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__79)) __PYX_ERR(3, 119, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":124
 *         elif isinstance(index, Player):
 *             class MixedBehav(object):
 *                 def __init__(self, profile, player):             # <<<<<<<<<<<<<<
 *                     self.profile = profile
 *                     self.player = player
 */
  __pyx_tuple__80 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_profile, __pyx_n_s_player); if (unlikely(!__pyx_tuple__80)) __PYX_ERR(3, 124, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__80);
  __Pyx_GIVEREF(__pyx_tuple__80);
  __pyx_codeobj__81 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__80, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_init, 124, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__81)) __PYX_ERR(3, 124, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":127
 *                     self.profile = profile
 *                     self.player = player
 *                 def __eq__(self, other):             # <<<<<<<<<<<<<<
 *                     return list(self) == list(other)
 *                 def __len__(self):
 */
  __pyx_tuple__82 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_other); if (unlikely(!__pyx_tuple__82)) __PYX_ERR(3, 127, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__82);
  __Pyx_GIVEREF(__pyx_tuple__82);
  __pyx_codeobj__83 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__82, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_eq, 127, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__83)) __PYX_ERR(3, 127, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":129
 *                 def __eq__(self, other):
 *                     return list(self) == list(other)
 *                 def __len__(self):             # <<<<<<<<<<<<<<
 *                     return len(self.player.infosets)
 *                 def __repr__(self):
 */
  __pyx_tuple__84 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__84)) __PYX_ERR(3, 129, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__84);
  __Pyx_GIVEREF(__pyx_tuple__84);
  __pyx_codeobj__85 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__84, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_len, 129, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__85)) __PYX_ERR(3, 129, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":131
 *                 def __len__(self):
 *                     return len(self.player.infosets)
 *                 def __repr__(self):             # <<<<<<<<<<<<<<
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):
 */
  __pyx_tuple__86 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__86)) __PYX_ERR(3, 131, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__86);
  __Pyx_GIVEREF(__pyx_tuple__86);
  __pyx_codeobj__87 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__86, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_repr, 131, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__87)) __PYX_ERR(3, 131, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":133
 *                 def __repr__(self):
 *                     return str(list(self.profile[self.player]))
 *                 def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *                     if isinstance(self.profile, MixedBehaviorProfileRational):
 *                        return r"$\left[" + ",".join(self.profile[i]._repr_latex_().replace("$","") for i in self.player.infosets) + r"\right]$"
 */
  __pyx_tuple__88 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_genexpr, __pyx_n_s_genexpr); if (unlikely(!__pyx_tuple__88)) __PYX_ERR(3, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__88);
  __Pyx_GIVEREF(__pyx_tuple__88);
  __pyx_codeobj__89 = (PyObject*)__Pyx_PyCode_New(1, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__88, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_repr_latex, 133, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__89)) __PYX_ERR(3, 133, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":138
 *                     else:
 *                        return repr(self)
 *                 def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):
 */
  __pyx_tuple__90 = PyTuple_Pack(2, __pyx_n_s_self, __pyx_n_s_index); if (unlikely(!__pyx_tuple__90)) __PYX_ERR(3, 138, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__90);
  __Pyx_GIVEREF(__pyx_tuple__90);
  __pyx_codeobj__91 = (PyObject*)__Pyx_PyCode_New(2, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__90, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_getitem, 138, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__91)) __PYX_ERR(3, 138, __pyx_L1_error)

  /* "gambit/lib/behav.pxi":140
 *                 def __getitem__(self, index):
 *                     return self.profile[self.player.infosets[index]]
 *                 def __setitem__(self, index, value):             # <<<<<<<<<<<<<<
 *                     self.profile[self.player.infosets[index]] = value
 *             return MixedBehav(self, index)
 */
  __pyx_tuple__92 = PyTuple_Pack(3, __pyx_n_s_self, __pyx_n_s_index, __pyx_n_s_value); if (unlikely(!__pyx_tuple__92)) __PYX_ERR(3, 140, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__92);
  __Pyx_GIVEREF(__pyx_tuple__92);
  __pyx_codeobj__93 = (PyObject*)__Pyx_PyCode_New(3, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__92, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_2, __pyx_n_s_setitem, 140, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__93)) __PYX_ERR(3, 140, __pyx_L1_error)

  /* "gambit/lib/game.pxi":63
 *         cdef Player p
 *         if self.restriction is not None:
 *             raise UndefinedOperationError("Changing objects in a restriction is not supported")             # <<<<<<<<<<<<<<
 *         p = Player()
 *         p.player = self.game.deref().NewPlayer()
 */
  __pyx_tuple__94 = PyTuple_Pack(1, __pyx_kp_s_Changing_objects_in_a_restrictio); if (unlikely(!__pyx_tuple__94)) __PYX_ERR(4, 63, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__94);
  __Pyx_GIVEREF(__pyx_tuple__94);

  /* "gambit/lib/game.pxi":148
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 *             raise ValueError("All specified arrays must have the same shape")             # <<<<<<<<<<<<<<
 *         g = Game.new_table(arrays[0].shape)
 *         for profile in itertools.product(*(xrange(arrays[0].shape[i])
 */
  __pyx_tuple__95 = PyTuple_Pack(1, __pyx_kp_s_All_specified_arrays_must_have_t); if (unlikely(!__pyx_tuple__95)) __PYX_ERR(4, 148, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__95);
  __Pyx_GIVEREF(__pyx_tuple__95);

  /* "gambit/lib/game.pxi":227
 *                 a.game = self.game
 *                 return a
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __pyx_tuple__96 = PyTuple_Pack(1, __pyx_kp_s_Operation_only_defined_for_games); if (unlikely(!__pyx_tuple__96)) __PYX_ERR(4, 227, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__96);
  __Pyx_GIVEREF(__pyx_tuple__96);

  /* "gambit/lib/game.pxi":237
 *                 i.game = self.game
 *                 return i
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __pyx_tuple__97 = PyTuple_Pack(1, __pyx_kp_s_Operation_only_defined_for_games); if (unlikely(!__pyx_tuple__97)) __PYX_ERR(4, 237, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__97);
  __Pyx_GIVEREF(__pyx_tuple__97);

  /* "gambit/lib/game.pxi":272
 *                 n.node = self.game.deref().GetRoot()
 *                 return n
 *             raise UndefinedOperationError("Operation only defined for "\             # <<<<<<<<<<<<<<
 *                                            "games with a tree representation")
 * 
 */
  __pyx_tuple__98 = PyTuple_Pack(1, __pyx_kp_s_Operation_only_defined_for_games); if (unlikely(!__pyx_tuple__98)) __PYX_ERR(4, 272, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__98);
  __Pyx_GIVEREF(__pyx_tuple__98);

  /* "gambit/lib/game.pxi":338
 *                     raise IndexError, "Provided strategy '%s' not available to player" % st
 *             else:
 *                 raise TypeError("Must use a tuple of ints, strategy labels, or strategies")             # <<<<<<<<<<<<<<
 *         return self._get_contingency(*tuple(cont))
 * 
 */
  __pyx_tuple__99 = PyTuple_Pack(1, __pyx_kp_s_Must_use_a_tuple_of_ints_strateg); if (unlikely(!__pyx_tuple__99)) __PYX_ERR(4, 338, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__99);
  __Pyx_GIVEREF(__pyx_tuple__99);

  /* "gambit/lib/game.pxi":347
 *         cdef c_Rational dummy_rat
 *         if not self.is_perfect_recall:
 *             raise UndefinedOperationError("Mixed strategies not supported for games with imperfect recall.")             # <<<<<<<<<<<<<<
 *         if not rational:
 *             mspd = MixedStrategyProfileDouble()
 */
  __pyx_tuple__100 = PyTuple_Pack(1, __pyx_kp_s_Mixed_strategies_not_supported_f); if (unlikely(!__pyx_tuple__100)) __PYX_ERR(4, 347, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__100);
  __Pyx_GIVEREF(__pyx_tuple__100);

  /* "gambit/lib/game.pxi":370
 *                 return mbpr
 *         else:
 *             raise UndefinedOperationError("Game must have a tree representation"\             # <<<<<<<<<<<<<<
 *                                       " to create a mixed behavior profile")
 * 
 */
  __pyx_tuple__101 = PyTuple_Pack(1, __pyx_kp_s_Game_must_have_a_tree_representa); if (unlikely(!__pyx_tuple__101)) __PYX_ERR(4, 370, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__101);
  __Pyx_GIVEREF(__pyx_tuple__101);

  /* "gambit/lib/libgambit.pyx":32
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */
  __pyx_tuple__102 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__102)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__102);
  __Pyx_GIVEREF(__pyx_tuple__102);
  __pyx_codeobj__103 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__102, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_3, __pyx_n_s_repr_latex, 32, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__103)) __PYX_ERR(0, 32, __pyx_L1_error)

  /* "gambit/lib/nash.pxi":310
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */
  __pyx_tuple__104 = PyTuple_Pack(2, __pyx_n_s_p_profile, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__104)) __PYX_ERR(11, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__104);
  __Pyx_GIVEREF(__pyx_tuple__104);
  __pyx_codeobj__105 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__104, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_4, __pyx_n_s_logit_estimate, 310, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__105)) __PYX_ERR(11, 310, __pyx_L1_error)

  /* "gambit/lib/nash.pxi":319
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */
  __pyx_tuple__106 = PyTuple_Pack(3, __pyx_n_s_p_game, __pyx_n_s_p_lambda, __pyx_n_s_ret); if (unlikely(!__pyx_tuple__106)) __PYX_ERR(11, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__106);
  __Pyx_GIVEREF(__pyx_tuple__106);
  __pyx_codeobj__107 = (PyObject*)__Pyx_PyCode_New(2, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__106, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_4, __pyx_n_s_logit_atlambda, 319, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__107)) __PYX_ERR(11, 319, __pyx_L1_error)

  /* "gambit/lib/nash.pxi":328
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */
  __pyx_tuple__108 = PyTuple_Pack(6, __pyx_n_s_p_game, __pyx_n_s_p_maxLambda, __pyx_n_s_solns, __pyx_n_s_p, __pyx_n_s_ret, __pyx_n_s_i); if (unlikely(!__pyx_tuple__108)) __PYX_ERR(11, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_tuple__108);
  __Pyx_GIVEREF(__pyx_tuple__108);
  __pyx_codeobj__109 = (PyObject*)__Pyx_PyCode_New(2, 0, 6, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__108, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_Users_arbiter_git_gambit_src_py_4, __pyx_n_s_logit_principal_branch, 328, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__109)) __PYX_ERR(11, 328, __pyx_L1_error)
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_2 = PyInt_FromLong(2); if (unlikely(!__pyx_int_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_3 = PyInt_FromLong(3); if (unlikely(!__pyx_int_3)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_4 = PyInt_FromLong(4); if (unlikely(!__pyx_int_4)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_int_5 = PyInt_FromLong(5); if (unlikely(!__pyx_int_5)) __PYX_ERR(0, 1, __pyx_L1_error)
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initlibgambit(void); /*proto*/
PyMODINIT_FUNC initlibgambit(void)
#else
PyMODINIT_FUNC PyInit_libgambit(void); /*proto*/
PyMODINIT_FUNC PyInit_libgambit(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_libgambit(void)", 0);
  if (__Pyx_check_binary_version() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_empty_unicode = PyUnicode_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_unicode)) __PYX_ERR(0, 1, __pyx_L1_error)
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("libgambit", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) __PYX_ERR(0, 1, __pyx_L1_error)
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) __PYX_ERR(0, 1, __pyx_L1_error)
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) __PYX_ERR(0, 1, __pyx_L1_error)
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) __PYX_ERR(0, 1, __pyx_L1_error);
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif
  if (__pyx_module_is_main_gambit__lib__libgambit) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) __PYX_ERR(0, 1, __pyx_L1_error)
    if (!PyDict_GetItemString(modules, "gambit.lib.libgambit")) {
      if (unlikely(PyDict_SetItemString(modules, "gambit.lib.libgambit", __pyx_m) < 0)) __PYX_ERR(0, 1, __pyx_L1_error)
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Collection) < 0) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Collection.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Collection", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Collection) < 0) __PYX_ERR(0, 391, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Collection = &__pyx_type_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Action) < 0) __PYX_ERR(5, 24, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Action.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Action", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Action) < 0) __PYX_ERR(5, 24, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Action = &__pyx_type_6gambit_3lib_9libgambit_Action;
  __pyx_type_6gambit_3lib_9libgambit_Members.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Members) < 0) __PYX_ERR(6, 24, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Members.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Members", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Members) < 0) __PYX_ERR(6, 24, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Members = &__pyx_type_6gambit_3lib_9libgambit_Members;
  __pyx_type_6gambit_3lib_9libgambit_Actions.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Actions) < 0) __PYX_ERR(6, 35, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Actions.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Actions", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Actions) < 0) __PYX_ERR(6, 35, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Actions = &__pyx_type_6gambit_3lib_9libgambit_Actions;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Infoset) < 0) __PYX_ERR(6, 57, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Infoset.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Infoset", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Infoset) < 0) __PYX_ERR(6, 57, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Infoset = &__pyx_type_6gambit_3lib_9libgambit_Infoset;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Strategy) < 0) __PYX_ERR(7, 24, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Strategy.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Strategy", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Strategy) < 0) __PYX_ERR(7, 24, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Strategy = &__pyx_type_6gambit_3lib_9libgambit_Strategy;
  __pyx_type_6gambit_3lib_9libgambit_Infosets.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Infosets) < 0) __PYX_ERR(8, 24, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Infosets.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Infosets", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Infosets) < 0) __PYX_ERR(8, 24, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Infosets = &__pyx_type_6gambit_3lib_9libgambit_Infosets;
  __pyx_type_6gambit_3lib_9libgambit_Strategies.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Strategies) < 0) __PYX_ERR(8, 35, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Strategies.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Strategies", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Strategies) < 0) __PYX_ERR(8, 35, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Strategies = &__pyx_type_6gambit_3lib_9libgambit_Strategies;
  __pyx_type_6gambit_3lib_9libgambit_PlayerSupportStrategies.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_PlayerSupportStrategies) < 0) __PYX_ERR(8, 59, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_PlayerSupportStrategies.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PlayerSupportStrategies", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_PlayerSupportStrategies) < 0) __PYX_ERR(8, 59, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_PlayerSupportStrategies = &__pyx_type_6gambit_3lib_9libgambit_PlayerSupportStrategies;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Player) < 0) __PYX_ERR(8, 83, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Player.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Player", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Player) < 0) __PYX_ERR(8, 83, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Player = &__pyx_type_6gambit_3lib_9libgambit_Player;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Outcome) < 0) __PYX_ERR(9, 22, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Outcome.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Outcome", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Outcome) < 0) __PYX_ERR(9, 22, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Outcome = &__pyx_type_6gambit_3lib_9libgambit_Outcome;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_TreeGameOutcome) < 0) __PYX_ERR(9, 108, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_TreeGameOutcome.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "TreeGameOutcome", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_TreeGameOutcome) < 0) __PYX_ERR(9, 108, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_TreeGameOutcome = &__pyx_type_6gambit_3lib_9libgambit_TreeGameOutcome;
  __pyx_type_6gambit_3lib_9libgambit_Children.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Children) < 0) __PYX_ERR(10, 24, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Children.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Children", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Children) < 0) __PYX_ERR(10, 24, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Children = &__pyx_type_6gambit_3lib_9libgambit_Children;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Node) < 0) __PYX_ERR(10, 35, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Node.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Node", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Node) < 0) __PYX_ERR(10, 35, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Node = &__pyx_type_6gambit_3lib_9libgambit_Node;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_BaseGame) < 0) __PYX_ERR(12, 22, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_BaseGame.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "BaseGame", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_BaseGame) < 0) __PYX_ERR(12, 22, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_BaseGame = &__pyx_type_6gambit_3lib_9libgambit_BaseGame;
  __pyx_type_6gambit_3lib_9libgambit_StrategySupportProfile.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_StrategySupportProfile) < 0) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_StrategySupportProfile.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "StrategySupportProfile", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_StrategySupportProfile) < 0) __PYX_ERR(1, 26, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_StrategySupportProfile = &__pyx_type_6gambit_3lib_9libgambit_StrategySupportProfile;
  __pyx_type_6gambit_3lib_9libgambit_RestrictionOutcomes.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_RestrictionOutcomes) < 0) __PYX_ERR(1, 151, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_RestrictionOutcomes.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "RestrictionOutcomes", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_RestrictionOutcomes) < 0) __PYX_ERR(1, 151, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_RestrictionOutcomes = &__pyx_type_6gambit_3lib_9libgambit_RestrictionOutcomes;
  __pyx_type_6gambit_3lib_9libgambit_RestrictionStrategies.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_RestrictionStrategies) < 0) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_RestrictionStrategies.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "RestrictionStrategies", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_RestrictionStrategies) < 0) __PYX_ERR(1, 169, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_RestrictionStrategies = &__pyx_type_6gambit_3lib_9libgambit_RestrictionStrategies;
  __pyx_type_6gambit_3lib_9libgambit_StrategicRestriction.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_BaseGame;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_StrategicRestriction) < 0) __PYX_ERR(1, 191, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_StrategicRestriction.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "StrategicRestriction", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_StrategicRestriction) < 0) __PYX_ERR(1, 191, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_StrategicRestriction = &__pyx_type_6gambit_3lib_9libgambit_StrategicRestriction;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfile) < 0) __PYX_ERR(2, 28, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfile.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "MixedStrategyProfile", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfile) < 0) __PYX_ERR(2, 28, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfile = &__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfile;
  __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileDouble.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfile;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileDouble) < 0) __PYX_ERR(2, 177, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileDouble.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "MixedStrategyProfileDouble", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileDouble) < 0) __PYX_ERR(2, 177, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileDouble = &__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileDouble;
  __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileRational.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfile;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileRational) < 0) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileRational.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "MixedStrategyProfileRational", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileRational) < 0) __PYX_ERR(2, 238, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_MixedStrategyProfileRational = &__pyx_type_6gambit_3lib_9libgambit_MixedStrategyProfileRational;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfile) < 0) __PYX_ERR(3, 25, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfile.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "MixedBehaviorProfile", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfile) < 0) __PYX_ERR(3, 25, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfile = &__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfile;
  __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfile;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble) < 0) __PYX_ERR(3, 236, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "MixedBehaviorProfileDouble", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble) < 0) __PYX_ERR(3, 236, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble = &__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileDouble;
  __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileRational.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfile;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileRational) < 0) __PYX_ERR(3, 293, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileRational.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "MixedBehaviorProfileRational", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileRational) < 0) __PYX_ERR(3, 293, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_MixedBehaviorProfileRational = &__pyx_type_6gambit_3lib_9libgambit_MixedBehaviorProfileRational;
  __pyx_type_6gambit_3lib_9libgambit_Outcomes.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Outcomes) < 0) __PYX_ERR(4, 28, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Outcomes.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Outcomes", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Outcomes) < 0) __PYX_ERR(4, 28, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Outcomes = &__pyx_type_6gambit_3lib_9libgambit_Outcomes;
  __pyx_type_6gambit_3lib_9libgambit_Players.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Players) < 0) __PYX_ERR(4, 46, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Players.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Players", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Players) < 0) __PYX_ERR(4, 46, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Players = &__pyx_type_6gambit_3lib_9libgambit_Players;
  __pyx_type_6gambit_3lib_9libgambit_GameActions.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_GameActions) < 0) __PYX_ERR(4, 77, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_GameActions.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "GameActions", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_GameActions) < 0) __PYX_ERR(4, 77, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_GameActions = &__pyx_type_6gambit_3lib_9libgambit_GameActions;
  __pyx_type_6gambit_3lib_9libgambit_GameInfosets.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_GameInfosets) < 0) __PYX_ERR(4, 90, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_GameInfosets.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "GameInfosets", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_GameInfosets) < 0) __PYX_ERR(4, 90, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_GameInfosets = &__pyx_type_6gambit_3lib_9libgambit_GameInfosets;
  __pyx_type_6gambit_3lib_9libgambit_GameStrategies.tp_base = __pyx_ptype_6gambit_3lib_9libgambit_Collection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_GameStrategies) < 0) __PYX_ERR(4, 109, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_GameStrategies.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "GameStrategies", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_GameStrategies) < 0) __PYX_ERR(4, 109, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_GameStrategies = &__pyx_type_6gambit_3lib_9libgambit_GameStrategies;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_Game) < 0) __PYX_ERR(4, 122, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_Game.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "Game", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_Game) < 0) __PYX_ERR(4, 122, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_Game = &__pyx_type_6gambit_3lib_9libgambit_Game;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_EnumPureStrategySolver) < 0) __PYX_ERR(11, 32, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_EnumPureStrategySolver.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "EnumPureStrategySolver", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_EnumPureStrategySolver) < 0) __PYX_ERR(11, 32, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_EnumPureStrategySolver = &__pyx_type_6gambit_3lib_9libgambit_EnumPureStrategySolver;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_EnumPureAgentSolver) < 0) __PYX_ERR(11, 50, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_EnumPureAgentSolver.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "EnumPureAgentSolver", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_EnumPureAgentSolver) < 0) __PYX_ERR(11, 50, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_EnumPureAgentSolver = &__pyx_type_6gambit_3lib_9libgambit_EnumPureAgentSolver;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble) < 0) __PYX_ERR(11, 88, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LCPBehaviorSolverDouble", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble) < 0) __PYX_ERR(11, 88, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble = &__pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverDouble;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverRational) < 0) __PYX_ERR(11, 106, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverRational.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LCPBehaviorSolverRational", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverRational) < 0) __PYX_ERR(11, 106, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LCPBehaviorSolverRational = &__pyx_type_6gambit_3lib_9libgambit_LCPBehaviorSolverRational;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverDouble) < 0) __PYX_ERR(11, 124, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverDouble.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LCPStrategySolverDouble", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverDouble) < 0) __PYX_ERR(11, 124, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LCPStrategySolverDouble = &__pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverDouble;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverRational) < 0) __PYX_ERR(11, 142, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverRational.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LCPStrategySolverRational", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverRational) < 0) __PYX_ERR(11, 142, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LCPStrategySolverRational = &__pyx_type_6gambit_3lib_9libgambit_LCPStrategySolverRational;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverDouble) < 0) __PYX_ERR(11, 180, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverDouble.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LPBehaviorSolverDouble", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverDouble) < 0) __PYX_ERR(11, 180, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LPBehaviorSolverDouble = &__pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverDouble;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverRational) < 0) __PYX_ERR(11, 198, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverRational.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LPBehaviorSolverRational", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverRational) < 0) __PYX_ERR(11, 198, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LPBehaviorSolverRational = &__pyx_type_6gambit_3lib_9libgambit_LPBehaviorSolverRational;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LPStrategySolverDouble) < 0) __PYX_ERR(11, 216, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LPStrategySolverDouble.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LPStrategySolverDouble", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LPStrategySolverDouble) < 0) __PYX_ERR(11, 216, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LPStrategySolverDouble = &__pyx_type_6gambit_3lib_9libgambit_LPStrategySolverDouble;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LPStrategySolverRational) < 0) __PYX_ERR(11, 234, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LPStrategySolverRational.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LPStrategySolverRational", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LPStrategySolverRational) < 0) __PYX_ERR(11, 234, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LPStrategySolverRational = &__pyx_type_6gambit_3lib_9libgambit_LPStrategySolverRational;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile) < 0) __PYX_ERR(11, 277, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "LogitQREMixedStrategyProfile", (PyObject *)&__pyx_type_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile) < 0) __PYX_ERR(11, 277, __pyx_L1_error)
  __pyx_ptype_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile = &__pyx_type_6gambit_3lib_9libgambit_LogitQREMixedStrategyProfile;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct__remove) < 0) __PYX_ERR(1, 94, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct__remove.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct__remove = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct__remove;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference) < 0) __PYX_ERR(1, 105, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_1_difference;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection) < 0) __PYX_ERR(1, 108, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_2_intersection;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset) < 0) __PYX_ERR(1, 117, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_3_issubset;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index) < 0) __PYX_ERR(2, 49, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_4__resolve_index;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_) < 0) __PYX_ERR(2, 89, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_ = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_5__repr_latex_;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr) < 0) __PYX_ERR(2, 91, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_6_genexpr;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index) < 0) __PYX_ERR(3, 45, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_7__resolve_index;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_) < 0) __PYX_ERR(3, 112, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_ = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_8__repr_latex_;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr) < 0) __PYX_ERR(3, 114, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_9_genexpr;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_) < 0) __PYX_ERR(3, 133, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_ = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_10__repr_latex_;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr) < 0) __PYX_ERR(3, 135, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_11_genexpr;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays) < 0) __PYX_ERR(4, 145, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_12_from_arrays;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr) < 0) __PYX_ERR(4, 147, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_13_genexpr;
  if (PyType_Ready(&__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr) < 0) __PYX_ERR(4, 150, __pyx_L1_error)
  __pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr.tp_print = 0;
  __pyx_ptype_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr = &__pyx_type_6gambit_3lib_9libgambit___pyx_scope_struct_14_genexpr;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  #endif

  /* "gambit/lib/libgambit.pyx":23
 * #
 * 
 * import decimal             # <<<<<<<<<<<<<<
 * import fractions
 * import warnings
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_decimal, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_decimal, __pyx_t_1) < 0) __PYX_ERR(0, 23, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/libgambit.pyx":24
 * 
 * import decimal
 * import fractions             # <<<<<<<<<<<<<<
 * import warnings
 * from libcpp cimport bool
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_fractions, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_fractions, __pyx_t_1) < 0) __PYX_ERR(0, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/libgambit.pyx":25
 * import decimal
 * import fractions
 * import warnings             # <<<<<<<<<<<<<<
 * from libcpp cimport bool
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_warnings, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_warnings, __pyx_t_1) < 0) __PYX_ERR(0, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/libgambit.pyx":28
 * from libcpp cimport bool
 * 
 * class Decimal(decimal.Decimal):             # <<<<<<<<<<<<<<
 *     pass
 * 
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_decimal); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Decimal); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Decimal, __pyx_n_s_Decimal, (PyObject *) NULL, __pyx_n_s_gambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Decimal, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Decimal, __pyx_t_4) < 0) __PYX_ERR(0, 28, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/libgambit.pyx":31
 *     pass
 * 
 * class Rational(fractions.Fraction):             # <<<<<<<<<<<<<<
 *     def _repr_latex_(self):
 *         if self.denominator != 1:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_fractions); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_Fraction); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_CalculateMetaclass(NULL, __pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_Py3MetaclassPrepare(__pyx_t_2, __pyx_t_1, __pyx_n_s_Rational, __pyx_n_s_Rational, (PyObject *) NULL, __pyx_n_s_gambit_lib_libgambit, (PyObject *) NULL); if (unlikely(!__pyx_t_3)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_3);

  /* "gambit/lib/libgambit.pyx":32
 * 
 * class Rational(fractions.Fraction):
 *     def _repr_latex_(self):             # <<<<<<<<<<<<<<
 *         if self.denominator != 1:
 *             return r'$\frac{%s}{%s}$' % (self.numerator, self.denominator)
 */
  __pyx_t_4 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_8Rational_1_repr_latex_, 0, __pyx_n_s_Rational__repr_latex, NULL, __pyx_n_s_gambit_lib_libgambit, __pyx_d, ((PyObject *)__pyx_codeobj__103)); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyObject_SetItem(__pyx_t_3, __pyx_n_s_repr_latex, __pyx_t_4) < 0) __PYX_ERR(0, 32, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "gambit/lib/libgambit.pyx":31
 *     pass
 * 
 * class Rational(fractions.Fraction):             # <<<<<<<<<<<<<<
 *     def _repr_latex_(self):
 *         if self.denominator != 1:
 */
  __pyx_t_4 = __Pyx_Py3ClassCreate(__pyx_t_2, __pyx_n_s_Rational, __pyx_t_1, __pyx_t_3, NULL, 0, 1); if (unlikely(!__pyx_t_4)) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_4);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_Rational, __pyx_t_4) < 0) __PYX_ERR(0, 31, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/libgambit.pyx":41
 *     cdef char *VERSION
 * 
 * __version__ = VERSION             # <<<<<<<<<<<<<<
 * 
 * cdef extern from "string":
 */
  __pyx_t_1 = __Pyx_PyBytes_FromString(VERSION); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_t_1) < 0) __PYX_ERR(0, 41, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/libgambit.pyx":388
 *     c_MixedBehaviorProfileRational *copyitem_list_mbpr "copyitem"(c_List[c_MixedBehaviorProfileRational], int)
 * 
 * import gambit.gameiter             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gambit_gameiter, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gambit, __pyx_t_1) < 0) __PYX_ERR(0, 388, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/action.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from gambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Action:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(5, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(5, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(5, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/infoset.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from gambit.lib.error import MismatchError             # <<<<<<<<<<<<<<
 * 
 * cdef class Members(Collection):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_MismatchError);
  __Pyx_GIVEREF(__pyx_n_s_MismatchError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_MismatchError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(6, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_2)) __PYX_ERR(6, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MismatchError, __pyx_t_2) < 0) __PYX_ERR(6, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/strategy.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from gambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Strategy:
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(7, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/player.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from gambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Infosets(Collection):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_2) < 0) __PYX_ERR(8, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/node.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * from gambit.lib.error import MismatchError, UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class Children(Collection):
 */
  __pyx_t_1 = PyList_New(2); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_MismatchError);
  __Pyx_GIVEREF(__pyx_n_s_MismatchError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_MismatchError);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 1, __pyx_n_s_UndefinedOperationError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(10, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_MismatchError); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MismatchError, __pyx_t_1) < 0) __PYX_ERR(10, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(10, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(10, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/stratspt.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * import itertools             # <<<<<<<<<<<<<<
 * from cython.operator cimport dereference as deref
 * from gambit.lib.error import UndefinedOperationError
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_2) < 0) __PYX_ERR(1, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/stratspt.pxi":24
 * import itertools
 * from cython.operator cimport dereference as deref
 * from gambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * cdef class StrategySupportProfile(Collection):
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_2) < 0) __PYX_ERR(1, 24, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * import itertools             # <<<<<<<<<<<<<<
 * 
 * from cython.operator cimport dereference as deref
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_itertools, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_1) < 0) __PYX_ERR(2, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/mixed.pxi":25
 * 
 * from cython.operator cimport dereference as deref
 * from gambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_1)) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_1) < 0) __PYX_ERR(2, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/game.pxi":22
 * # Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 * #
 * import itertools             # <<<<<<<<<<<<<<
 * 
 * from libcpp cimport bool
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_itertools, 0, -1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 22, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_itertools, __pyx_t_2) < 0) __PYX_ERR(4, 22, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/game.pxi":25
 * 
 * from libcpp cimport bool
 * from gambit.lib.error import UndefinedOperationError             # <<<<<<<<<<<<<<
 * import gambit.gte
 * 
 */
  __pyx_t_2 = PyList_New(1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_UndefinedOperationError);
  __Pyx_GIVEREF(__pyx_n_s_UndefinedOperationError);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_UndefinedOperationError);
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gambit_lib_error, __pyx_t_2, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_ImportFrom(__pyx_t_1, __pyx_n_s_UndefinedOperationError); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_UndefinedOperationError, __pyx_t_2) < 0) __PYX_ERR(4, 25, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":26
 * from libcpp cimport bool
 * from gambit.lib.error import UndefinedOperationError
 * import gambit.gte             # <<<<<<<<<<<<<<
 * 
 * cdef class Outcomes(Collection):
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_gambit_gte, 0, -1); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 26, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_gambit, __pyx_t_1) < 0) __PYX_ERR(4, 26, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "gambit/lib/game.pxi":126
 * 
 *     @classmethod
 *     def new_tree(cls):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game, __pyx_n_s_new_tree); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 126, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gambit/lib/game.pxi":125
 *     cdef c_Game game
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def new_tree(cls):
 *         cdef Game g
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 125, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_new_tree, __pyx_t_2) < 0) __PYX_ERR(4, 126, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6gambit_3lib_9libgambit_Game);

  /* "gambit/lib/game.pxi":133
 * 
 *     @classmethod
 *     def new_table(cls, dim):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         cdef Array[int] *d
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game, __pyx_n_s_new_table); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gambit/lib/game.pxi":132
 *         return g
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def new_table(cls, dim):
 *         cdef Game g
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 132, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_new_table, __pyx_t_1) < 0) __PYX_ERR(4, 133, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6gambit_3lib_9libgambit_Game);

  /* "gambit/lib/game.pxi":145
 * 
 *     @classmethod
 *     def from_arrays(cls, *arrays):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         if len(set(a.shape for a in arrays)) > 1:
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game, __pyx_n_s_from_arrays); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 145, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gambit/lib/game.pxi":144
 *         return g
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def from_arrays(cls, *arrays):
 *         cdef Game g
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 144, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_from_arrays, __pyx_t_2) < 0) __PYX_ERR(4, 145, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6gambit_3lib_9libgambit_Game);

  /* "gambit/lib/game.pxi":158
 * 
 *     @classmethod
 *     def read_game(cls, char *fn):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game, __pyx_n_s_read_game); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 158, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);

  /* "gambit/lib/game.pxi":157
 * 
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def read_game(cls, char *fn):
 *         cdef Game g
 */
  __pyx_t_1 = __Pyx_Method_ClassMethod(__pyx_t_2); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 157, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_read_game, __pyx_t_1) < 0) __PYX_ERR(4, 158, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  PyType_Modified(__pyx_ptype_6gambit_3lib_9libgambit_Game);

  /* "gambit/lib/game.pxi":169
 * 
 *     @classmethod
 *     def parse_game(cls, char *s):             # <<<<<<<<<<<<<<
 *         cdef Game g
 *         g = cls()
 */
  __pyx_t_1 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game, __pyx_n_s_parse_game); if (unlikely(!__pyx_t_1)) __PYX_ERR(4, 169, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_1);

  /* "gambit/lib/game.pxi":168
 *         return g
 * 
 *     @classmethod             # <<<<<<<<<<<<<<
 *     def parse_game(cls, char *s):
 *         cdef Game g
 */
  __pyx_t_2 = __Pyx_Method_ClassMethod(__pyx_t_1); if (unlikely(!__pyx_t_2)) __PYX_ERR(4, 168, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6gambit_3lib_9libgambit_Game->tp_dict, __pyx_n_s_parse_game, __pyx_t_2) < 0) __PYX_ERR(4, 169, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6gambit_3lib_9libgambit_Game);

  /* "gambit/lib/nash.pxi":310
 *             return profile
 * 
 * def logit_estimate(MixedStrategyProfileDouble p_profile):             # <<<<<<<<<<<<<<
 *     """Estimate QRE corresponding to mixed strategy profile using
 *     maximum likelihood along the principal branch.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_1logit_estimate, NULL, __pyx_n_s_gambit_lib_libgambit); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 310, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logit_estimate, __pyx_t_2) < 0) __PYX_ERR(11, 310, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":319
 *     return ret
 * 
 * def logit_atlambda(Game p_game, double p_lambda):             # <<<<<<<<<<<<<<
 *     """Compute the first QRE along the principal branch with the given
 *     lambda parameter.
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_3logit_atlambda, NULL, __pyx_n_s_gambit_lib_libgambit); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 319, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logit_atlambda, __pyx_t_2) < 0) __PYX_ERR(11, 319, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/nash.pxi":328
 *     return ret
 * 
 * def logit_principal_branch(Game p_game, double p_maxLambda=100000.0):             # <<<<<<<<<<<<<<
 *     cdef c_List[c_LogitQREMixedStrategyProfile] solns
 *     cdef LogitQREMixedStrategyProfile p
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6gambit_3lib_9libgambit_5logit_principal_branch, NULL, __pyx_n_s_gambit_lib_libgambit); if (unlikely(!__pyx_t_2)) __PYX_ERR(11, 328, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_logit_principal_branch, __pyx_t_2) < 0) __PYX_ERR(11, 328, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "gambit/lib/libgambit.pyx":1
 * #             # <<<<<<<<<<<<<<
 * # This file is part of Gambit
 * # Copyright (c) 1994-2014, The Gambit Project (http://www.gambit-project.org)
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) __PYX_ERR(0, 1, __pyx_L1_error)
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init gambit.lib.libgambit", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init gambit.lib.libgambit");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
/* Refnanny */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

/* GetBuiltinName */
static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

/* PyObjectCall */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallMethO */
#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

/* PyObjectCallOneArg */
#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

/* SaveResetException */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSave(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
}
static CYTHON_INLINE void __Pyx__ExceptionReset(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
#endif

/* PyErrExceptionMatches */
  #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyErr_ExceptionMatchesInState(PyThreadState* tstate, PyObject* err) {
    PyObject *exc_type = tstate->curexc_type;
    if (exc_type == err) return 1;
    if (unlikely(!exc_type)) return 0;
    return PyErr_GivenExceptionMatches(exc_type, err);
}
#endif

/* GetException */
  #if CYTHON_COMPILING_IN_CPYTHON
static int __Pyx__GetException(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
#else
static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
#endif
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

/* PyErrFetchRestore */
    #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_ErrRestoreInState(PyThreadState *tstate, PyObject *type, PyObject *value, PyObject *tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
}
static CYTHON_INLINE void __Pyx_ErrFetchInState(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
}
#endif

/* RaiseException */
    #if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    __Pyx_PyThreadState_declare
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_PyThreadState_assign
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

/* ArgTypeTest */
      static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

/* PyIntBinop */
      #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_EqObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    if (op1 == op2) {
        Py_RETURN_TRUE;
    }
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long a = PyInt_AS_LONG(op1);
        if (a == b) {
            Py_RETURN_TRUE;
        } else {
            Py_RETURN_FALSE;
        }
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    }
                #if PyLong_SHIFT < 30 && PyLong_SHIFT != 15
                default: return PyLong_Type.tp_richcompare(op1, op2, Py_EQ);
                #else
                default: Py_RETURN_FALSE;
                #endif
            }
        }
            if (a == b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            if ((double)a == (double)b) {
                Py_RETURN_TRUE;
            } else {
                Py_RETURN_FALSE;
            }
    }
    return PyObject_RichCompare(op1, op2, Py_EQ);
}
#endif

/* GetModuleGlobalName */
      static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

/* PyIntBinop */
        #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

/* RaiseDoubleKeywords */
        static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

/* ParseKeywords */
        static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

/* RaiseArgTupleInvalid */
        static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

/* None */
        static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

/* StringJoin */
        #if !CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyBytes_Join(PyObject* sep, PyObject* values) {
    return PyObject_CallMethodObjArgs(sep, __pyx_n_s_join, values, NULL);
}
#endif

/* PyObjectCallNoArg */
        #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallNoArg(PyObject *func) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_NOARGS)) {
            return __Pyx_PyObject_CallMethO(func, NULL);
        }
    }
    return __Pyx_PyObject_Call(func, __pyx_empty_tuple, NULL);
}
#endif

/* ExtTypeTest */
          static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

/* None */
          static CYTHON_INLINE void __Pyx_RaiseClosureNameError(const char *varname) {
    PyErr_Format(PyExc_NameError, "free variable '%s' referenced before assignment in enclosing scope", varname);
}

/* FetchCommonType */
          static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

/* CythonFunction */
          static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL) {
        value = Py_None;
    }
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    int result = 0;
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    #if CYTHON_COMPILING_IN_CPYTHON
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    #else
    op->defaults_tuple = PySequence_ITEM(res, 0);
    if (unlikely(!op->defaults_tuple)) result = -1;
    else {
        op->defaults_kwdict = PySequence_ITEM(res, 1);
        if (unlikely(!op->defaults_kwdict)) result = -1;
    }
    #endif
    Py_DECREF(res);
    return result;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {"__reduce__", (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
#if PY_VERSION_HEX < 0x030500A0
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func_weakreflist)
#else
#define __Pyx_CyFunction_weakreflist(cyfunc) ((cyfunc)->func.m_weakreflist)
#endif
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    __Pyx_CyFunction_weakreflist(op) = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyObject_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (__Pyx_CyFunction_weakreflist(m) != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return __Pyx_PyMethod_New(func, type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return __Pyx_PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = f->m_ml->ml_meth;
    PyObject *self = f->m_self;
    Py_ssize_t size;
    switch (f->m_ml->ml_flags & (METH_VARARGS | METH_KEYWORDS | METH_NOARGS | METH_O)) {
    case METH_VARARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0))
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 0))
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL || PyDict_Size(kw) == 0)) {
            size = PyTuple_GET_SIZE(arg);
            if (likely(size == 1)) {
                PyObject *result, *arg0 = PySequence_ITEM(arg, 0);
                if (unlikely(!arg0)) return NULL;
                result = (*meth)(self, arg0);
                Py_DECREF(arg0);
                return result;
            }
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%" CYTHON_FORMAT_SSIZE_T "d given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "cython_function_or_method",
    sizeof(__pyx_CyFunctionObject),
    0,
    (destructor) __Pyx_CyFunction_dealloc,
    0,
    0,
    0,
#if PY_MAJOR_VERSION < 3
    0,
#else
    0,
#endif
    (reprfunc) __Pyx_CyFunction_repr,
    0,
    0,
    0,
    0,
    __Pyx_CyFunction_Call,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC,
    0,
    (traverseproc) __Pyx_CyFunction_traverse,
    (inquiry) __Pyx_CyFunction_clear,
    0,
#if PY_VERSION_HEX < 0x030500A0
    offsetof(__pyx_CyFunctionObject, func_weakreflist),
#else
    offsetof(PyCFunctionObject, m_weakreflist),
#endif
    0,
    0,
    __pyx_CyFunction_methods,
    __pyx_CyFunction_members,
    __pyx_CyFunction_getsets,
    0,
    0,
    __Pyx_CyFunction_descr_get,
    0,
    offsetof(__pyx_CyFunctionObject, func_dict),
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#endif
};
static int __pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyObject_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

/* SliceTupleAndList */
              #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx_crop_slice(Py_ssize_t* _start, Py_ssize_t* _stop, Py_ssize_t* _length) {
    Py_ssize_t start = *_start, stop = *_stop, length = *_length;
    if (start < 0) {
        start += length;
        if (start < 0)
            start = 0;
    }
    if (stop < 0)
        stop += length;
    else if (stop > length)
        stop = length;
    *_length = stop - start;
    *_start = start;
    *_stop = stop;
}
static CYTHON_INLINE void __Pyx_copy_object_array(PyObject** CYTHON_RESTRICT src, PyObject** CYTHON_RESTRICT dest, Py_ssize_t length) {
    PyObject *v;
    Py_ssize_t i;
    for (i = 0; i < length; i++) {
        v = dest[i] = src[i];
        Py_INCREF(v);
    }
}
static CYTHON_INLINE PyObject* __Pyx_PyList_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyList_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyList_New(0);
    dest = PyList_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyListObject*)src)->ob_item + start,
        ((PyListObject*)dest)->ob_item,
        length);
    return dest;
}
static CYTHON_INLINE PyObject* __Pyx_PyTuple_GetSlice(
            PyObject* src, Py_ssize_t start, Py_ssize_t stop) {
    PyObject* dest;
    Py_ssize_t length = PyTuple_GET_SIZE(src);
    __Pyx_crop_slice(&start, &stop, &length);
    if (unlikely(length <= 0))
        return PyTuple_New(0);
    dest = PyTuple_New(length);
    if (unlikely(!dest))
        return NULL;
    __Pyx_copy_object_array(
        ((PyTupleObject*)src)->ob_item + start,
        ((PyTupleObject*)dest)->ob_item,
        length);
    return dest;
}
#endif

/* KeywordStringCheck */
              static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

/* BytesEquals */
              static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

/* UnicodeEquals */
              static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

/* GetItemInt */
              static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              CYTHON_NCP_UNUSED int wraparound,
                                                              CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i, int is_list,
                                                     CYTHON_NCP_UNUSED int wraparound,
                                                     CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return NULL;
                    PyErr_Clear();
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

/* CalculateMetaclass */
              static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

/* Py3ClassCreate */
              static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

/* RaiseTooManyValuesToUnpack */
              static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

/* RaiseNeedMoreValuesToUnpack */
              static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

/* IterFinish */
              static CYTHON_INLINE int __Pyx_IterFinish(void) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    PyObject* exc_type = tstate->curexc_type;
    if (unlikely(exc_type)) {
        if (likely(exc_type == PyExc_StopIteration) || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration)) {
            PyObject *exc_value, *exc_tb;
            exc_value = tstate->curexc_value;
            exc_tb = tstate->curexc_traceback;
            tstate->curexc_type = 0;
            tstate->curexc_value = 0;
            tstate->curexc_traceback = 0;
            Py_DECREF(exc_type);
            Py_XDECREF(exc_value);
            Py_XDECREF(exc_tb);
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#else
    if (unlikely(PyErr_Occurred())) {
        if (likely(PyErr_ExceptionMatches(PyExc_StopIteration))) {
            PyErr_Clear();
            return 0;
        } else {
            return -1;
        }
    }
    return 0;
#endif
}

/* UnpackItemEndCheck */
              static int __Pyx_IternextUnpackEndCheck(PyObject *retval, Py_ssize_t expected) {
    if (unlikely(retval)) {
        Py_DECREF(retval);
        __Pyx_RaiseTooManyValuesError(expected);
        return -1;
    } else {
        return __Pyx_IterFinish();
    }
    return 0;
}

/* PyIntBinop */
              #if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_SubtractObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a - b);
            if (likely((x^a) >= 0 || (x^~b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_subtract(op1, op2);
            }
        }
                x = a - b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla - llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("subtract", return NULL)
            result = ((double)a) - (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceSubtract : PyNumber_Subtract)(op1, op2);
}
#endif

/* SetItemInt */
              static CYTHON_INLINE int __Pyx_SetItemInt_Generic(PyObject *o, PyObject *j, PyObject *v) {
    int r;
    if (!j) return -1;
    r = PyObject_SetItem(o, j, v);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE int __Pyx_SetItemInt_Fast(PyObject *o, Py_ssize_t i, PyObject *v, int is_list,
                                               CYTHON_NCP_UNUSED int wraparound, CYTHON_NCP_UNUSED int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = (!wraparound) ? i : ((likely(i >= 0)) ? i : i + PyList_GET_SIZE(o));
        if ((!boundscheck) || likely((n >= 0) & (n < PyList_GET_SIZE(o)))) {
            PyObject* old = PyList_GET_ITEM(o, n);
            Py_INCREF(v);
            PyList_SET_ITEM(o, n, v);
            Py_DECREF(old);
            return 1;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_ass_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (!PyErr_ExceptionMatches(PyExc_OverflowError))
                        return -1;
                    PyErr_Clear();
                }
            }
            return m->sq_ass_item(o, i, v);
        }
    }
#else
#if CYTHON_COMPILING_IN_PYPY
    if (is_list || (PySequence_Check(o) && !PyDict_Check(o))) {
#else
    if (is_list || PySequence_Check(o)) {
#endif
        return PySequence_SetItem(o, i, v);
    }
#endif
    return __Pyx_SetItemInt_Generic(o, PyInt_FromSsize_t(i), v);
}

/* CallNextTpTraverse */
                static int __Pyx_call_next_tp_traverse(PyObject* obj, visitproc v, void *a, traverseproc current_tp_traverse) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_traverse != current_tp_traverse)
        type = type->tp_base;
    while (type && type->tp_traverse == current_tp_traverse)
        type = type->tp_base;
    if (type && type->tp_traverse)
        return type->tp_traverse(obj, v, a);
    return 0;
}

/* CallNextTpClear */
                static void __Pyx_call_next_tp_clear(PyObject* obj, inquiry current_tp_clear) {
    PyTypeObject* type = Py_TYPE(obj);
    while (type && type->tp_clear != current_tp_clear)
        type = type->tp_base;
    while (type && type->tp_clear == current_tp_clear)
        type = type->tp_base;
    if (type && type->tp_clear)
        type->tp_clear(obj);
}

/* Import */
                static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

/* ImportFrom */
                static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

/* GetNameInClass */
                static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

/* CodeObjectCache */
                static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

/* AddTraceback */
                #include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

/* CIntFromPyVerify */
                #define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

/* CIntToPy */
                static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

/* ClassMethod */
                static PyObject* __Pyx_Method_ClassMethod(PyObject *method) {
#if CYTHON_COMPILING_IN_PYPY
    if (PyObject_TypeCheck(method, &PyWrapperDescr_Type)) {
        return PyClassMethod_New(method);
    }
#else
    static PyTypeObject *methoddescr_type = NULL;
    if (methoddescr_type == NULL) {
       PyObject *meth = PyObject_GetAttrString((PyObject*)&PyList_Type, "append");
       if (!meth) return NULL;
       methoddescr_type = Py_TYPE(meth);
       Py_DECREF(meth);
    }
    if (PyObject_TypeCheck(method, methoddescr_type)) {
        PyMethodDescrObject *descr = (PyMethodDescrObject *)method;
        #if PY_VERSION_HEX < 0x03020000
        PyTypeObject *d_type = descr->d_type;
        #else
        PyTypeObject *d_type = descr->d_common.d_type;
        #endif
        return PyDescr_NewClassMethod(d_type, descr->d_method);
    }
#endif
    else if (PyMethod_Check(method)) {
        return PyClassMethod_New(PyMethod_GET_FUNCTION(method));
    }
    else if (PyCFunction_Check(method)) {
        return PyClassMethod_New(method);
    }
#ifdef __Pyx_CyFunction_USED
    else if (PyObject_TypeCheck(method, __pyx_CyFunctionType)) {
        return PyClassMethod_New(method);
    }
#endif
    PyErr_SetString(PyExc_TypeError,
                   "Class-level classmethod() can only be called on "
                   "a method_descriptor or instance method.");
    return NULL;
}

/* CIntFromPy */
                static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

/* CIntFromPy */
                static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, (sdigit) (-(sdigit)digits[0]))
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_IntOrLong(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_IntOrLong(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

/* SwapException */
                #if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE void __Pyx__ExceptionSwap(PyThreadState *tstate, PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = *type;
    tstate->exc_value = *value;
    tstate->exc_traceback = *tb;
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#else
static CYTHON_INLINE void __Pyx_ExceptionSwap(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyErr_GetExcInfo(&tmp_type, &tmp_value, &tmp_tb);
    PyErr_SetExcInfo(*type, *value, *tb);
    *type = tmp_type;
    *value = tmp_value;
    *tb = tmp_tb;
}
#endif

/* PyObjectCallMethod1 */
                static PyObject* __Pyx_PyObject_CallMethod1(PyObject* obj, PyObject* method_name, PyObject* arg) {
    PyObject *method, *result = NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
#if CYTHON_COMPILING_IN_CPYTHON
    if (likely(PyMethod_Check(method))) {
        PyObject *self = PyMethod_GET_SELF(method);
        if (likely(self)) {
            PyObject *args;
            PyObject *function = PyMethod_GET_FUNCTION(method);
            args = PyTuple_New(2);
            if (unlikely(!args)) goto bad;
            Py_INCREF(self);
            PyTuple_SET_ITEM(args, 0, self);
            Py_INCREF(arg);
            PyTuple_SET_ITEM(args, 1, arg);
            Py_INCREF(function);
            Py_DECREF(method); method = NULL;
            result = __Pyx_PyObject_Call(function, args, NULL);
            Py_DECREF(args);
            Py_DECREF(function);
            return result;
        }
    }
#endif
    result = __Pyx_PyObject_CallOneArg(method, arg);
bad:
    Py_XDECREF(method);
    return result;
}

/* CoroutineBase */
                #include <structmember.h>
#include <frameobject.h>
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value);
static PyObject *__Pyx_Coroutine_Close(PyObject *self);
static PyObject *__Pyx_Coroutine_Throw(PyObject *gen, PyObject *args);
#define __Pyx_Coroutine_Undelegate(gen) Py_CLEAR((gen)->yieldfrom)
#if 1 || PY_VERSION_HEX < 0x030300B0
static int __Pyx_PyGen_FetchStopIterationValue(PyObject **pvalue) {
    PyObject *et, *ev, *tb;
    PyObject *value = NULL;
    __Pyx_PyThreadState_declare
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&et, &ev, &tb);
    if (!et) {
        Py_XDECREF(tb);
        Py_XDECREF(ev);
        Py_INCREF(Py_None);
        *pvalue = Py_None;
        return 0;
    }
    if (likely(et == PyExc_StopIteration)) {
#if PY_VERSION_HEX >= 0x030300A0
        if (ev && Py_TYPE(ev) == (PyTypeObject*)PyExc_StopIteration) {
            value = ((PyStopIterationObject *)ev)->value;
            Py_INCREF(value);
            Py_DECREF(ev);
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = value;
            return 0;
        }
#endif
        if (!ev || !PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration)) {
            if (!ev) {
                Py_INCREF(Py_None);
                ev = Py_None;
            } else if (PyTuple_Check(ev)) {
                if (PyTuple_GET_SIZE(ev) >= 1) {
                    PyObject *value;
#if CYTHON_COMPILING_IN_CPYTHON
                    value = PySequence_ITEM(ev, 0);
#else
                    value = PyTuple_GET_ITEM(ev, 0);
                    Py_INCREF(value);
#endif
                    Py_DECREF(ev);
                    ev = value;
                } else {
                    Py_INCREF(Py_None);
                    Py_DECREF(ev);
                    ev = Py_None;
                }
            }
            Py_XDECREF(tb);
            Py_DECREF(et);
            *pvalue = ev;
            return 0;
        }
    } else if (!PyErr_GivenExceptionMatches(et, PyExc_StopIteration)) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    PyErr_NormalizeException(&et, &ev, &tb);
    if (unlikely(!PyObject_TypeCheck(ev, (PyTypeObject*)PyExc_StopIteration))) {
        __Pyx_ErrRestore(et, ev, tb);
        return -1;
    }
    Py_XDECREF(tb);
    Py_DECREF(et);
#if PY_VERSION_HEX >= 0x030300A0
    value = ((PyStopIterationObject *)ev)->value;
    Py_INCREF(value);
    Py_DECREF(ev);
#else
    {
        PyObject* args = __Pyx_PyObject_GetAttrStr(ev, __pyx_n_s_args);
        Py_DECREF(ev);
        if (likely(args)) {
            value = PySequence_GetItem(args, 0);
            Py_DECREF(args);
        }
        if (unlikely(!value)) {
            __Pyx_ErrRestore(NULL, NULL, NULL);
            Py_INCREF(Py_None);
            value = Py_None;
        }
    }
#endif
    *pvalue = value;
    return 0;
}
#endif
static CYTHON_INLINE
void __Pyx_Coroutine_ExceptionClear(__pyx_CoroutineObject *self) {
    PyObject *exc_type = self->exc_type;
    PyObject *exc_value = self->exc_value;
    PyObject *exc_traceback = self->exc_traceback;
    self->exc_type = NULL;
    self->exc_value = NULL;
    self->exc_traceback = NULL;
    Py_XDECREF(exc_type);
    Py_XDECREF(exc_value);
    Py_XDECREF(exc_traceback);
}
static CYTHON_INLINE
int __Pyx_Coroutine_CheckRunning(__pyx_CoroutineObject *gen) {
    if (unlikely(gen->is_running)) {
        PyErr_SetString(PyExc_ValueError,
                        "generator already executing");
        return 1;
    }
    return 0;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_SendEx(__pyx_CoroutineObject *self, PyObject *value) {
    PyObject *retval;
    __Pyx_PyThreadState_declare
    assert(!self->is_running);
    if (unlikely(self->resume_label == 0)) {
        if (unlikely(value && value != Py_None)) {
            PyErr_SetString(PyExc_TypeError,
                            "can't send non-None value to a "
                            "just-started generator");
            return NULL;
        }
    }
    if (unlikely(self->resume_label == -1)) {
        PyErr_SetNone(PyExc_StopIteration);
        return NULL;
    }
    __Pyx_PyThreadState_assign
    if (value) {
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_XINCREF(__pyx_tstate->frame);
            assert(f->f_back == NULL);
            f->f_back = __pyx_tstate->frame;
        }
#endif
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    self->is_running = 1;
    retval = self->body((PyObject *) self, value);
    self->is_running = 0;
    if (retval) {
        __Pyx_ExceptionSwap(&self->exc_type, &self->exc_value,
                            &self->exc_traceback);
#if CYTHON_COMPILING_IN_PYPY
#else
        if (self->exc_traceback) {
            PyTracebackObject *tb = (PyTracebackObject *) self->exc_traceback;
            PyFrameObject *f = tb->tb_frame;
            Py_CLEAR(f->f_back);
        }
#endif
    } else {
        __Pyx_Coroutine_ExceptionClear(self);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_MethodReturn(PyObject *retval) {
    if (unlikely(!retval && !PyErr_Occurred())) {
        PyErr_SetNone(PyExc_StopIteration);
    }
    return retval;
}
static CYTHON_INLINE
PyObject *__Pyx_Coroutine_FinishDelegation(__pyx_CoroutineObject *gen) {
    PyObject *ret;
    PyObject *val = NULL;
    __Pyx_Coroutine_Undelegate(gen);
    __Pyx_PyGen_FetchStopIterationValue(&val);
    ret = __Pyx_Coroutine_SendEx(gen, val);
    Py_XDECREF(val);
    return ret;
}
static PyObject *__Pyx_Coroutine_Send(PyObject *self, PyObject *value) {
    PyObject *retval;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Send(yf, value);
        } else
        #endif
        {
            if (value == Py_None)
                ret = Py_TYPE(yf)->tp_iternext(yf);
            else
                ret = __Pyx_PyObject_CallMethod1(yf, __pyx_n_s_send, value);
        }
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        retval = __Pyx_Coroutine_FinishDelegation(gen);
    } else {
        retval = __Pyx_Coroutine_SendEx(gen, value);
    }
    return __Pyx_Coroutine_MethodReturn(retval);
}
static int __Pyx_Coroutine_CloseIter(__pyx_CoroutineObject *gen, PyObject *yf) {
    PyObject *retval = NULL;
    int err = 0;
    #ifdef __Pyx_Generator_USED
    if (__Pyx_Generator_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    #ifdef __Pyx_Coroutine_USED
    if (__Pyx_Coroutine_CheckExact(yf)) {
        retval = __Pyx_Coroutine_Close(yf);
        if (!retval)
            return -1;
    } else
    #endif
    {
        PyObject *meth;
        gen->is_running = 1;
        meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_close);
        if (unlikely(!meth)) {
            if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                PyErr_WriteUnraisable(yf);
            }
            PyErr_Clear();
        } else {
            retval = PyObject_CallFunction(meth, NULL);
            Py_DECREF(meth);
            if (!retval)
                err = -1;
        }
        gen->is_running = 0;
    }
    Py_XDECREF(retval);
    return err;
}
static PyObject *__Pyx_Generator_Next(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject*) self;
    PyObject *yf = gen->yieldfrom;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        gen->is_running = 1;
        ret = Py_TYPE(yf)->tp_iternext(yf);
        gen->is_running = 0;
        if (likely(ret)) {
            return ret;
        }
        return __Pyx_Coroutine_FinishDelegation(gen);
    }
    return __Pyx_Coroutine_SendEx(gen, Py_None);
}
static PyObject *__Pyx_Coroutine_Close(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *retval, *raised_exception;
    PyObject *yf = gen->yieldfrom;
    int err = 0;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        Py_INCREF(yf);
        err = __Pyx_Coroutine_CloseIter(gen, yf);
        __Pyx_Coroutine_Undelegate(gen);
        Py_DECREF(yf);
    }
    if (err == 0)
        PyErr_SetNone(PyExc_GeneratorExit);
    retval = __Pyx_Coroutine_SendEx(gen, NULL);
    if (retval) {
        Py_DECREF(retval);
        PyErr_SetString(PyExc_RuntimeError,
                        "generator ignored GeneratorExit");
        return NULL;
    }
    raised_exception = PyErr_Occurred();
    if (!raised_exception
        || raised_exception == PyExc_StopIteration
        || raised_exception == PyExc_GeneratorExit
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_GeneratorExit)
        || PyErr_GivenExceptionMatches(raised_exception, PyExc_StopIteration))
    {
        if (raised_exception) PyErr_Clear();
        Py_INCREF(Py_None);
        return Py_None;
    }
    return NULL;
}
static PyObject *__Pyx_Coroutine_Throw(PyObject *self, PyObject *args) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject *typ;
    PyObject *tb = NULL;
    PyObject *val = NULL;
    PyObject *yf = gen->yieldfrom;
    if (!PyArg_UnpackTuple(args, (char *)"throw", 1, 3, &typ, &val, &tb))
        return NULL;
    if (unlikely(__Pyx_Coroutine_CheckRunning(gen)))
        return NULL;
    if (yf) {
        PyObject *ret;
        Py_INCREF(yf);
        if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {
            int err = __Pyx_Coroutine_CloseIter(gen, yf);
            Py_DECREF(yf);
            __Pyx_Coroutine_Undelegate(gen);
            if (err < 0)
                return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
            goto throw_here;
        }
        gen->is_running = 1;
        #ifdef __Pyx_Generator_USED
        if (__Pyx_Generator_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        #ifdef __Pyx_Coroutine_USED
        if (__Pyx_Coroutine_CheckExact(yf)) {
            ret = __Pyx_Coroutine_Throw(yf, args);
        } else
        #endif
        {
            PyObject *meth = __Pyx_PyObject_GetAttrStr(yf, __pyx_n_s_throw);
            if (unlikely(!meth)) {
                Py_DECREF(yf);
                if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {
                    gen->is_running = 0;
                    return NULL;
                }
                PyErr_Clear();
                __Pyx_Coroutine_Undelegate(gen);
                gen->is_running = 0;
                goto throw_here;
            }
            ret = PyObject_CallObject(meth, args);
            Py_DECREF(meth);
        }
        gen->is_running = 0;
        Py_DECREF(yf);
        if (!ret) {
            ret = __Pyx_Coroutine_FinishDelegation(gen);
        }
        return __Pyx_Coroutine_MethodReturn(ret);
    }
throw_here:
    __Pyx_Raise(typ, val, tb, NULL);
    return __Pyx_Coroutine_MethodReturn(__Pyx_Coroutine_SendEx(gen, NULL));
}
static int __Pyx_Coroutine_traverse(PyObject *self, visitproc visit, void *arg) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_VISIT(gen->closure);
    Py_VISIT(gen->classobj);
    Py_VISIT(gen->yieldfrom);
    Py_VISIT(gen->exc_type);
    Py_VISIT(gen->exc_value);
    Py_VISIT(gen->exc_traceback);
    return 0;
}
static int __Pyx_Coroutine_clear(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    Py_CLEAR(gen->closure);
    Py_CLEAR(gen->classobj);
    Py_CLEAR(gen->yieldfrom);
    Py_CLEAR(gen->exc_type);
    Py_CLEAR(gen->exc_value);
    Py_CLEAR(gen->exc_traceback);
    Py_CLEAR(gen->gi_name);
    Py_CLEAR(gen->gi_qualname);
    return 0;
}
static void __Pyx_Coroutine_dealloc(PyObject *self) {
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    PyObject_GC_UnTrack(gen);
    if (gen->gi_weakreflist != NULL)
        PyObject_ClearWeakRefs(self);
    if (gen->resume_label > 0) {
        PyObject_GC_Track(self);
#if PY_VERSION_HEX >= 0x030400a1
        if (PyObject_CallFinalizerFromDealloc(self))
#else
        Py_TYPE(gen)->tp_del(self);
        if (self->ob_refcnt > 0)
#endif
        {
            return;
        }
        PyObject_GC_UnTrack(self);
    }
    __Pyx_Coroutine_clear(self);
    PyObject_GC_Del(gen);
}
static void __Pyx_Coroutine_del(PyObject *self) {
    PyObject *res;
    PyObject *error_type, *error_value, *error_traceback;
    __pyx_CoroutineObject *gen = (__pyx_CoroutineObject *) self;
    __Pyx_PyThreadState_declare
    if (gen->resume_label <= 0)
        return ;
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt == 0);
    self->ob_refcnt = 1;
#endif
    __Pyx_PyThreadState_assign
    __Pyx_ErrFetch(&error_type, &error_value, &error_traceback);
    res = __Pyx_Coroutine_Close(self);
    if (res == NULL)
        PyErr_WriteUnraisable(self);
    else
        Py_DECREF(res);
    __Pyx_ErrRestore(error_type, error_value, error_traceback);
#if PY_VERSION_HEX < 0x030400a1
    assert(self->ob_refcnt > 0);
    if (--self->ob_refcnt == 0) {
        return;
    }
    {
        Py_ssize_t refcnt = self->ob_refcnt;
        _Py_NewReference(self);
        self->ob_refcnt = refcnt;
    }
#if CYTHON_COMPILING_IN_CPYTHON
    assert(PyType_IS_GC(self->ob_type) &&
           _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);
    _Py_DEC_REFTOTAL;
#endif
#ifdef COUNT_ALLOCS
    --Py_TYPE(self)->tp_frees;
    --Py_TYPE(self)->tp_allocs;
#endif
#endif
}
static PyObject *
__Pyx_Coroutine_get_name(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_name);
    return self->gi_name;
}
static int
__Pyx_Coroutine_set_name(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_name;
    Py_INCREF(value);
    self->gi_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_Coroutine_get_qualname(__pyx_CoroutineObject *self)
{
    Py_INCREF(self->gi_qualname);
    return self->gi_qualname;
}
static int
__Pyx_Coroutine_set_qualname(__pyx_CoroutineObject *self, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = self->gi_qualname;
    Py_INCREF(value);
    self->gi_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static __pyx_CoroutineObject *__Pyx__Coroutine_New(PyTypeObject* type, __pyx_coroutine_body_t body,
                                                   PyObject *closure, PyObject *name, PyObject *qualname) {
    __pyx_CoroutineObject *gen = PyObject_GC_New(__pyx_CoroutineObject, type);
    if (gen == NULL)
        return NULL;
    gen->body = body;
    gen->closure = closure;
    Py_XINCREF(closure);
    gen->is_running = 0;
    gen->resume_label = 0;
    gen->classobj = NULL;
    gen->yieldfrom = NULL;
    gen->exc_type = NULL;
    gen->exc_value = NULL;
    gen->exc_traceback = NULL;
    gen->gi_weakreflist = NULL;
    Py_XINCREF(qualname);
    gen->gi_qualname = qualname;
    Py_XINCREF(name);
    gen->gi_name = name;
    PyObject_GC_Track(gen);
    return gen;
}

/* PatchModuleWithCoroutine */
                    static PyObject* __Pyx_Coroutine_patch_module(PyObject* module, const char* py_code) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    int result;
    PyObject *globals, *result_obj;
    globals = PyDict_New();  if (unlikely(!globals)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_coroutine_type",
    #ifdef __Pyx_Coroutine_USED
        (PyObject*)__pyx_CoroutineType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    result = PyDict_SetItemString(globals, "_cython_generator_type",
    #ifdef __Pyx_Generator_USED
        (PyObject*)__pyx_GeneratorType);
    #else
        Py_None);
    #endif
    if (unlikely(result < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "_module", module) < 0)) goto ignore;
    if (unlikely(PyDict_SetItemString(globals, "__builtins__", __pyx_b) < 0)) goto ignore;
    result_obj = PyRun_String(py_code, Py_file_input, globals, globals);
    if (unlikely(!result_obj)) goto ignore;
    Py_DECREF(result_obj);
    Py_DECREF(globals);
    return module;
ignore:
    Py_XDECREF(globals);
    PyErr_WriteUnraisable(module);
    if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning, "Cython module failed to patch module with custom type", 1) < 0)) {
        Py_DECREF(module);
        module = NULL;
    }
#else
    py_code++;
#endif
    return module;
}

/* PatchGeneratorABC */
                    #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
static PyObject* __Pyx_patch_abc_module(PyObject *module);
static PyObject* __Pyx_patch_abc_module(PyObject *module) {
    module = __Pyx_Coroutine_patch_module(
        module, ""
"if _cython_generator_type is not None:\n"
"    try: Generator = _module.Generator\n"
"    except AttributeError: pass\n"
"    else: Generator.register(_cython_generator_type)\n"
"if _cython_coroutine_type is not None:\n"
"    try: Coroutine = _module.Coroutine\n"
"    except AttributeError: pass\n"
"    else: Coroutine.register(_cython_coroutine_type)\n"
    );
    return module;
}
#endif
static int __Pyx_patch_abc(void) {
#if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
    static int abc_patched = 0;
    if (!abc_patched) {
        PyObject *module;
        module = PyImport_ImportModule((PY_VERSION_HEX >= 0x03030000) ? "collections.abc" : "collections");
        if (!module) {
            PyErr_WriteUnraisable(NULL);
            if (unlikely(PyErr_WarnEx(PyExc_RuntimeWarning,
                    ((PY_VERSION_HEX >= 0x03030000) ?
                        "Cython module failed to register with collections.abc module" :
                        "Cython module failed to register with collections module"), 1) < 0)) {
                return -1;
            }
        } else {
            module = __Pyx_patch_abc_module(module);
            abc_patched = 1;
            if (unlikely(!module))
                return -1;
            Py_DECREF(module);
        }
        module = PyImport_ImportModule("backports_abc");
        if (module) {
            module = __Pyx_patch_abc_module(module);
            Py_XDECREF(module);
        }
        if (!module) {
            PyErr_Clear();
        }
    }
#else
    if (0) __Pyx_Coroutine_patch_module(NULL, NULL);
#endif
    return 0;
}

/* Generator */
                    static PyMethodDef __pyx_Generator_methods[] = {
    {"send", (PyCFunction) __Pyx_Coroutine_Send, METH_O,
     (char*) PyDoc_STR("send(arg) -> send 'arg' into generator,\nreturn next yielded value or raise StopIteration.")},
    {"throw", (PyCFunction) __Pyx_Coroutine_Throw, METH_VARARGS,
     (char*) PyDoc_STR("throw(typ[,val[,tb]]) -> raise exception in generator,\nreturn next yielded value or raise StopIteration.")},
    {"close", (PyCFunction) __Pyx_Coroutine_Close, METH_NOARGS,
     (char*) PyDoc_STR("close() -> raise GeneratorExit inside generator.")},
    {0, 0, 0, 0}
};
static PyMemberDef __pyx_Generator_memberlist[] = {
    {(char *) "gi_running", T_BOOL, offsetof(__pyx_CoroutineObject, is_running), READONLY, NULL},
    {(char*) "gi_yieldfrom", T_OBJECT, offsetof(__pyx_CoroutineObject, yieldfrom), READONLY,
     (char*) PyDoc_STR("object being iterated by 'yield from', or None")},
    {0, 0, 0, 0, 0}
};
static PyGetSetDef __pyx_Generator_getsets[] = {
    {(char *) "__name__", (getter)__Pyx_Coroutine_get_name, (setter)__Pyx_Coroutine_set_name,
     (char*) PyDoc_STR("name of the generator"), 0},
    {(char *) "__qualname__", (getter)__Pyx_Coroutine_get_qualname, (setter)__Pyx_Coroutine_set_qualname,
     (char*) PyDoc_STR("qualified name of the generator"), 0},
    {0, 0, 0, 0, 0}
};
static PyTypeObject __pyx_GeneratorType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    "generator",
    sizeof(__pyx_CoroutineObject),
    0,
    (destructor) __Pyx_Coroutine_dealloc,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC | Py_TPFLAGS_HAVE_FINALIZE,
    0,
    (traverseproc) __Pyx_Coroutine_traverse,
    0,
    0,
    offsetof(__pyx_CoroutineObject, gi_weakreflist),
    0,
    (iternextfunc) __Pyx_Generator_Next,
    __pyx_Generator_methods,
    __pyx_Generator_memberlist,
    __pyx_Generator_getsets,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
#if PY_VERSION_HEX >= 0x030400a1
    0,
#else
    __Pyx_Coroutine_del,
#endif
    0,
#if PY_VERSION_HEX >= 0x030400a1
    __Pyx_Coroutine_del,
#endif
};
static int __pyx_Generator_init(void) {
    __pyx_GeneratorType_type.tp_getattro = PyObject_GenericGetAttr;
    __pyx_GeneratorType_type.tp_iter = PyObject_SelfIter;
    __pyx_GeneratorType = __Pyx_FetchCommonType(&__pyx_GeneratorType_type);
    if (unlikely(!__pyx_GeneratorType)) {
        return -1;
    }
    return 0;
}

/* CheckBinaryVersion */
                    static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

/* InitStrings */
                    static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_IntOrLong(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
